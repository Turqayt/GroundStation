<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Evergine.Mathematics</name>
    </assembly>
    <members>
        <member name="T:Evergine.Mathematics.BoundingBox">
            <summary>
            Represents a bounding box.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingBox.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingBox.Min">
            <summary>
            Bounding box minimum.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingBox.Max">
            <summary>
            Bounding box maximum.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingBox.Center">
            <summary>
            Gets the center of the bouding box.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingBox.HalfExtent">
            <summary>
            Gets the Bounding box half extents.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.BoundingBox"/> struct.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.CreateMerged(Evergine.Mathematics.BoundingBox,Evergine.Mathematics.BoundingBox)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.CreateMerged(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.BoundingBox@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.CreateFromSphere(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.CreateFromSphere(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.BoundingBox@)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Evergine.Mathematics.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Equals(Evergine.Mathematics.BoundingBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.GetCorners(Evergine.Mathematics.Vector3[])">
            <summary>
            Gets the corners.
            </summary>
            <param name="corners">The corners.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.BoundingBox@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>True if both boxes overlap.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.Plane@,Evergine.Mathematics.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Intersects(Evergine.Mathematics.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.Vector3@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Contains(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.SupportMapping(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Transform(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transform a bounding box.
            </summary>
            <param name="m">The transform.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Transform(Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Transform a bounding box.
            </summary>
            <param name="m">The transform.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.Transform(Evergine.Mathematics.BoundingBox,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transform a bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <param name="m">The transform.</param>
            <returns>The transformed bounding box.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.op_Equality(Evergine.Mathematics.BoundingBox,Evergine.Mathematics.BoundingBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingBox.op_Inequality(Evergine.Mathematics.BoundingBox,Evergine.Mathematics.BoundingBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.BoundingFrustum">
            <summary>
            Represents a bounding frustum.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.LeftPlaneIndex">
            <summary>
            Left plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.BottomPlaneIndex">
            <summary>
            Bottom plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.NearPlaneIndex">
            <summary>
            Near plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.NumPlanes">
            <summary>
            Number of planes.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.FarPlaneIndex">
            <summary>
            Far plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.RightPlaneIndex">
            <summary>
            Right plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.TopPlaneIndex">
            <summary>
            Top plane index.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.CornerArray">
            <summary>
            Array of corners.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingFrustum.planes">
            <summary>
            Array of planes.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Far">
            <summary>
            Gets the far.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Near">
            <summary>
            Gets the near.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingFrustum.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Evergine.Mathematics.BoundingFrustum"/> class from being created.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.#ctor(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.BoundingFrustum"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Contains(Evergine.Mathematics.Vector3@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Equals(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.GetCorners(Evergine.Mathematics.Vector3*)">
            <summary>
            Gets the corners.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.GetCorners(Evergine.Mathematics.Vector3[])">
            <summary>
            Gets the corners.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.BoundingBox,System.Boolean)">
            <summary>
            Intersects the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="disableNearPlane">Bool indicates the near plane doesn't check the collision.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Intersects the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Intersects the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.Plane)">
            <summary>
            Intersects the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.Ray)">
            <summary>
            Intersects the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.BoundingBox@,System.Boolean@,System.Boolean)">
            <summary>
            Intersects the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="disableNearPlane">Bool indicates the near plane doesn't check the collision.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersects the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.Plane@,Evergine.Mathematics.PlaneIntersectionType@)">
            <summary>
            Intersects the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.Intersects(Evergine.Mathematics.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersects the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.SupportMapping(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.ComputeIntersection(Evergine.Mathematics.Plane@,Evergine.Mathematics.Ray@)">
            <summary>
            Computes the intersection.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.ComputeIntersectionLine(Evergine.Mathematics.Plane@,Evergine.Mathematics.Plane@)">
            <summary>
            Computes the intersection line.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingFrustum.SetMatrix(Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Sets the matrix.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Evergine.Mathematics.BoundingOrientedBox">
            <summary>
            Bounding volume using an oriented bounding box.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingOrientedBox.CornerCount">
            <summary>
            Corner count.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingOrientedBox.RayEpsilon">
            <summary>
            Epsilon value used in ray tests, where a ray might hit the box almost edge-on.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingOrientedBox.Center">
            <summary>
            Bounding box center.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingOrientedBox.HalfExtent">
            <summary>
            Bounding box half extents.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingOrientedBox.Orientation">
            <summary>
            Bounding box orientation.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.BoundingOrientedBox.Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Evergine.Mathematics.BoundingOrientedBox.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.BoundingOrientedBox"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="halfExtents">The half extents.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.CreateFromBoundingBox(Evergine.Mathematics.BoundingBox)">
            <summary>
            Create an oriented box from an axis-aligned box.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Transform(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Vector3)">
            <summary>
            Transform the given bounding box by a rotation around the origin followed by a translation.
            </summary>
            <param name="rotation">Rotation quaternion.</param>
            <param name="translation">Tranlation vector.</param>
            <returns>A new bounding box, transformed relative to this one.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Transform(System.Single,Evergine.Mathematics.Quaternion,Evergine.Mathematics.Vector3)">
            <summary>
            Transform the given bounding box by a uniform scale and rotation around the origin followed
            by a translation.
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
            <returns>
            A new bounding box, transformed relative to this one.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion,Evergine.Mathematics.Vector3)">
            <summary>
            Transform the given bounding box by a uniform scale and rotation around the origin followed
            by a translation.
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
            <returns>
            A new bounding box, transformed relative to this one.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Transform(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transform this Bounding box.
            </summary>
            <param name="world">The world matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Equals(Evergine.Mathematics.BoundingOrientedBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.op_Equality(Evergine.Mathematics.BoundingOrientedBox,Evergine.Mathematics.BoundingOrientedBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.op_Inequality(Evergine.Mathematics.BoundingOrientedBox,Evergine.Mathematics.BoundingOrientedBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box..</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.BoundingBox@)">
            <summary>
            Determine if box A intersects box B.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingBox@)">
            <summary>
            Determine if this box contains, intersects, or is disjoint from the given BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.BoundingOrientedBox@)">
            <summary>
            Determine if box A contains, intersects, or is disjoint from box B.
            </summary>
            <param name="boxA">The box A.</param>
            <param name="oboxB">The obox B.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.BoundingOrientedBox@)">
            <summary>
            Returns true if this box intersects the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingOrientedBox@)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.BoundingFrustum@,System.Boolean@)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingFrustum,Evergine.Mathematics.BoundingOrientedBox@)">
            <summary>
            Determine whether the given frustum contains, intersects, or is disjoint from
            the given oriented box.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="obox">The obox.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Test whether this box contains, intersects, or is disjoint from the given sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Test whether this box intersects the given sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.BoundingOrientedBox@)">
            <summary>
            Test whether a BoundingSphere contains, intersects, or is disjoint from a BoundingOrientedBox.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Contains(Evergine.Mathematics.Vector3@)">
            <summary>
            Returns true if this box contains the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.Ray@)">
            <summary>
            Determine whether the given ray intersects this box. If so, returns
            the parametric value of the point of first intersection; otherwise
            returns null.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.Intersects(Evergine.Mathematics.Plane@)">
            <summary>
            Classify this bounding box as entirely in front of, in back of, or
            intersecting the given plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.GetCorners">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6.
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.GetCorners(Evergine.Mathematics.Vector3[],System.Int32)">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6.
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <param name="corners">Array to fill with the eight corner positions.</param>
            <param name="startIndex">Index within corners array to start writing positions.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.ContainsRelativeBox(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Determine whether the box described by half-extents hA, axis-aligned and centered at the origin, contains
            the box described by half-extents hB, whose position and orientation are given by the transform matrix mB.
            The matrix is assumed to contain only rigid motion; if it contains scaling or perpsective the result of
            this method will be incorrect.
            </summary>
            <param name="hA">Half-extents of first box.</param>
            <param name="hB">Half-extents of second box.</param>
            <param name="mB">Position and orientation of second box relative to first box.</param>
            <returns>
            ContainmentType enum indicating whether the boxes are disjoin, intersecting, or
            whether box A contains box B.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingOrientedBox.ConvertToFrustum">
            <summary>
            Convert this BoundingOrientedBox to a BoundingFrustum describing the same volume.
            A BoundingFrustum is defined by the matrix that carries its volume to the
            box from (-1,-1,0) to (1,1,1), so we just need a matrix that carries our box there.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.BoundingSphere">
            <summary>
            Represents a bounding sphere.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingSphere.Center">
            <summary>
            Sphere center.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.BoundingSphere.Radius">
            <summary>
            Sphere radius.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.#ctor(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.BoundingSphere"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Equals(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Equals(Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateMerged(Evergine.Mathematics.BoundingSphere,Evergine.Mathematics.BoundingSphere)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateMerged(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateFromBoundingBox(Evergine.Mathematics.BoundingBox)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateFromBoundingBox(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Evergine.Mathematics.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.CreateFromFrustum(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Creates from frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.Plane@,Evergine.Mathematics.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Intersects(Evergine.Mathematics.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.Vector3@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Contains(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.SupportMapping(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Transform(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.Transform(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.BoundingSphere@)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.op_Equality(Evergine.Mathematics.BoundingSphere,Evergine.Mathematics.BoundingSphere)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.BoundingSphere.op_Inequality(Evergine.Mathematics.BoundingSphere,Evergine.Mathematics.BoundingSphere)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.Byte4">
            <summary>
            Stores a vector of 4 bytes.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Byte4.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Byte4.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Byte4.Z">
            <summary>
            Z value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Byte4.W">
            <summary>
            W value.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Byte4"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.Equals(Evergine.Mathematics.Byte4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.Equals(Evergine.Mathematics.Byte4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Byte4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.ContainmentType">
            <summary>
            Type of containment.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.ContainmentType.Disjoint">
            <summary>
            Disjoint containment.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.ContainmentType.Contains">
            <summary>
            Contained containment.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.ContainmentType.Intersects">
            <summary>
            Intersection containment.
            </summary>
        </member>
        <member name="T:Evergine.Mathematics.DoubleExtensions">
            <summary>
            Extension functions for double type.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.DoubleExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.DoubleExtensions.Equal(System.Double,System.Double,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.DoubleExtensions.Distinct(System.Double,System.Double,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Evergine.Mathematics.FloatExtensions">
            <summary>
            Extension methods for flaot type.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.FloatExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.FloatExtensions.Equal(System.Single,System.Single,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they equal.</returns>
        </member>
        <member name="M:Evergine.Mathematics.FloatExtensions.Distinct(System.Single,System.Single,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they are distinct.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance algorithm.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.bitsToIndices">
            <summary>
            Bits to indices.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.closestPoint">
            <summary>
            Closest point.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.det">
            <summary>
            Gjk determinant.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.edgeLengthSq">
            <summary>
            Edge length squared.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.edges">
            <summary>
            Gjk edges.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.maxLengthSq">
            <summary>
            Max length squared.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.simplexBits">
            <summary>
            Simplex bits.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.y">
            <summary>
            Gjk Y.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Gjk.yLengthSq">
            <summary>
            Y length squared.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Gjk.ClosestPoint">
            <summary>
            Gets the closest point.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Gjk.FullSimplex">
            <summary>
            Gets a value indicating whether [full simplex].
            </summary>
            <value>
              <c>true</c> if [full simplex]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Gjk.MaxLengthSquared">
            <summary>
            Gets the max length squared.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Gjk"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.AddSupportPoint(Evergine.Mathematics.Vector3@)">
            <summary>
            Adds the support point.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.ComputeClosestPoint">
            <summary>
            Computes the closest point.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.Dot(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Dots the specified a.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.IsSatisfiesRule(System.Int32,System.Int32)">
            <summary>
            Determines whether [is satisfies rule] [the specified x bits].
            </summary>
            <param name="xBits">The x bits.</param>
            <param name="yBits">The y bits.</param>
            <returns>
              <c>true</c> if [is satisfies rule] [the specified x bits]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.UpdateDeterminant(System.Int32)">
            <summary>
            Updates the determinant.
            </summary>
            <param name="xmIdx">The xm idx.</param>
        </member>
        <member name="M:Evergine.Mathematics.Gjk.UpdateSimplex(System.Int32)">
            <summary>
            Updates the simplex.
            </summary>
            <param name="newIndex">The new index.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Evergine.Mathematics.IgnoreAttribute">
            <summary>
            Attribute to specify properties or fields that must not be serialized.
            </summary>
        </member>
        <member name="T:Evergine.Mathematics.MathSimdType">
            <summary>
            This class represent the type of SIMD instriction supported.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathSimdType.NoSimd">
            <summary>
            No SIMD instructions used.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathSimdType.Sse">
            <summary>
            SSE (Streaming SIMD Extensions) is supported.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathSimdType.AdvSimd">
            <summary>
            ARM AdvSIMD instructions.
            </summary>
        </member>
        <member name="T:Evergine.Mathematics.MathHelper">
            <summary>
            Math helper functions.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.MathHelper.Epsilon">
            <summary>
            The epsilon.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.MathHelper.SimdType">
            <summary>
            Gets the type of SIMD instructions used.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Return the next power of two value of the specified argument.
            </summary>
            <param name="v">The value.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.NextPowerOfTwo(System.UInt64)">
            <summary>
            Return the next power of two value of the specified argument.
            </summary>
            <param name="v">The value.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum float and maximum float value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="tangent1">Source tangent1.</param>
            <param name="value2">Source value2.</param>
            <param name="tangent2">Source tangent2.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Area(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is not clamped and values outside the range [0, 1] will result in a return value outside the range [value1, value2].
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <param name="c">The third vector.</param>
            <returns>Positive number if point is left, negative if point is right,
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <example>
            When amount = 0 returns value1.
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.LerpClamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is clamped to the range [0, 1].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <example>
            When amount = 0 returns value1.
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter amount that produces the interpolant value within the range [value1, value2].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="value">Interpolant value.</param>
            <returns>The linear parameter amount.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two float values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Max(System.Int32,System.Int32)">
            <summary>
            Returns the greater of two int values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two or more values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Max(Evergine.Mathematics.Vector2@)">
            <summary>
            Returns the greater of two <see cref="T:Evergine.Mathematics.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Min(Evergine.Mathematics.Vector2@)">
            <summary>
            Returns the lesser of two <see cref="T:Evergine.Mathematics.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Max(Evergine.Mathematics.Vector3@)">
            <summary>
            Returns the greater of three <see cref="T:Evergine.Mathematics.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.Min(Evergine.Mathematics.Vector3@)">
            <summary>
            Returns the lesser of three <see cref="T:Evergine.Mathematics.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Changes a float value towards a desired goal over time.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame).</param>
            <returns>The smooth value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees..</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.FloatEquals(System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.MathHelper.DivideByMultiple(System.UInt32,System.UInt32)">
            <summary>
            Divide value by alignment to get the minimum multiple higher than the value.
            </summary>
            <param name="value">The value to divide.</param>
            <param name="alignment">The alignment.</param>
            <returns>The multiply value.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Matrix3x3">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix3x3.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Rotation">
            <summary>
            Gets the roll angle.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix3x3.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTranslation(Evergine.Mathematics.Vector2)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTranslation(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTranslation(System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTranslation(System.Single,System.Single,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateRotation(System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateRotation(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="translate">The translate.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(System.Single,System.Single,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(Evergine.Mathematics.Vector2)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateScale(System.Single,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTransform(Evergine.Mathematics.Vector2,System.Single,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateTransform(Evergine.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateFromQuaternion(Evergine.Mathematics.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.CreateFromQuaternion(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Equals(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Equals(Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Transpose(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Transpose(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.SetSameDiagonal(System.Single)">
            <summary>
            Set the same diagonal values in the matrix.
            </summary>
            <param name="d">The diagonal value.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Determinant">
            <summary>
            Determinants this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Invert(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Invert(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
            <returns>True if everything ok.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Lerp(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Lerp(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@,System.Single,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Negate(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Negate(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Add(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Add(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Subtract(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Subtract(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Multiply(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Multiply(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Multiply(Evergine.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.Multiply(Evergine.Mathematics.Matrix3x3@,System.Single,Evergine.Mathematics.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.ToMatrix4x4(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.ToMatrix4x4(Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_UnaryNegation(Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Equality(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Inequality(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Addition(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Subtraction(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Multiply(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Multiply(Evergine.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Multiply(System.Single,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Division(Evergine.Mathematics.Matrix3x3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix3x3.op_Division(Evergine.Mathematics.Matrix3x3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.Matrix4x4">
            <summary>
            Represents a 4x4 matrix.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M14">
            <summary>
            First row, fourth column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M24">
            <summary>
            Second row, fourth column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M34">
            <summary>
            Third row, fourth column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M41">
            <summary>
            Fourth row, first column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M42">
            <summary>
            Fourth row, second column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M43">
            <summary>
            Fourth row, third column.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Matrix4x4.M44">
            <summary>
            Fourth row, fourth column.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.IsIdentity">
            <summary>
            Gets a value indicating whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Forward">
            <summary>
            Gets or sets the forward.
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Backward">
            <summary>
            Gets or sets the backward.
            </summary>
            <value>
            The backward.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Rotation">
            <summary>
            Gets the euler angles.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Orientation">
            <summary>
            Gets a quaternion from the Matrix.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Basis">
            <summary>
            Gets or sets the basis matrix for the rotation.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Matrix4x4"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m14">The M14.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m24">The M24.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
            <param name="m34">The M34.</param>
            <param name="m41">The M41.</param>
            <param name="m42">The M42.</param>
            <param name="m43">The M43.</param>
            <param name="m44">The M44.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Matrix4x4"/> struct.
            </summary>
            <param name="values">The array values.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateBillboard(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Nullable{Evergine.Mathematics.Vector3})">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateBillboard(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Nullable{Evergine.Mathematics.Vector3},Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateConstrainedBillboard(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Nullable{Evergine.Mathematics.Vector3},System.Nullable{Evergine.Mathematics.Vector3})">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateConstrainedBillboard(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Nullable{Evergine.Mathematics.Vector3},System.Nullable{Evergine.Mathematics.Vector3},Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateTranslation(Evergine.Mathematics.Vector3)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateTranslation(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The scaling matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(Evergine.Mathematics.Vector3)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis with a center point.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis with a center point.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The scaling matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The scaling matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateScale(System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationX(System.Single)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationX(System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationX(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a matrix for rotating points around the X-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationX(System.Single,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a matrix for rotating points around the X-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The rotation matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationY(System.Single)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationY(System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationY(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a matrix for rotating points around the Y-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationY(System.Single,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a matrix for rotating points around the Y-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The rotation matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationZ(System.Single)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationZ(System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationZ(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a matrix for rotating points around the Z-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateRotationZ(System.Single,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a matrix for rotating points around the Z-axis, from a center point.
            </summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <param name="result">The rotation matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTRS(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTRS(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTRS(Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion,Evergine.Mathematics.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTRS(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTR(Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion)">
            <summary>
            Create a translation, and rotation matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTR(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Create a translation, rotation matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTS(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Create a translation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromTS(Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Create a translation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromAxisAngle(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around <paramref name="axis" />, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromAxisAngle(Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around <paramref name="axis" />, in radians.</param>
            <param name="result">The rotation matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="verticalFieldOfView">Indicates if the field of view is parameter is vertical.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="verticalFieldOfView">Indicates if the field of view is parameter is vertical.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single,System.Boolean,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,System.Boolean,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="zeroToOneDepthClip">Indicates if we want to creat a ZeroToOne range depth, or if false, Negative One to One.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateLookAt(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="position">The init position.</param>
            <param name="target">The target.</param>
            <param name="upVector">The up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateLookAt(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="position">The init position.</param>
            <param name="target">The look target.</param>
            <param name="upVector">The up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateWorld(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateWorld(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromQuaternion(Evergine.Mathematics.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromQuaternion(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateShadow(Evergine.Mathematics.Vector3,Evergine.Mathematics.Plane)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateShadow(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Plane@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateReflection(Evergine.Mathematics.Plane)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.CreateReflection(Evergine.Mathematics.Plane@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Transform(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Transform(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Transforms the given matrix by applying the given Quaternion rotation.
            </summary>
            <param name="value">The source matrix to transform.</param>
            <param name="rotation">The rotation to apply.</param>
            <param name="result">The transformed matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Decompose(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@)">
            <summary>
            Attempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.
            If successful, the out parameters will contained the extracted values.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="scale">The scaling component of the transformation matrix.</param>
            <param name="rotation">The rotation component of the transformation matrix.</param>
            <param name="translation">The translation component of the transformation matrix.</param>
            <returns>True if the source matrix was successfully decomposed; False otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Equals(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Equals(Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Transpose(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">The source matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Transpose(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Transposes the rows and columns of a matrix.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">The transposed matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Invert">
            <summary>
            Inverts the specified matrix.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Invert(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <returns>If successful, contains the inverted matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Invert(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <param name="result">If successful, contains the inverted matrix.</param>
            <returns>True if the source matrix could be inverted; False otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Lerp(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4,System.Single)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Lerp(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Linearly interpolates between the corresponding values of two matrices.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <param name="result">The interpolated matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Negate(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Returns a new matrix with the negated elements of the given matrix.
            </summary>
            <param name="matrix">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Negate(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Returns a new matrix with the negated elements of the given matrix.
            </summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">The negated matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Add(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Adds two matrices together.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Add(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Adds two matrices together.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="result">The resulting matrix.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Subtract(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Subtract(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Subtracts the second matrix from the first.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="result">The result of the subtraction.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Multiply(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Multiply(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Multiply(Evergine.Mathematics.Matrix4x4,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Multiply(Evergine.Mathematics.Matrix4x4@,System.Single,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Abs(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The absolute matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.Abs(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_UnaryNegation(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Returns a new matrix with the negated elements of the given matrix.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Equality(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Inequality(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Addition(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Subtraction(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Multiply(Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Multiply(Evergine.Mathematics.Matrix4x4,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.op_Multiply(System.Single,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="P:Evergine.Mathematics.Matrix4x4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Matrix4x4.ToEngineFlippedYMatrix(Evergine.Mathematics.Matrix4x4@,System.Single[])">
            <summary>
            Convert to a Flipped Y Evergine matrix.
            </summary>
            <param name="m">reference to a Evergine matrix.</param>
            <param name="mat">OpenGL matrix.</param>
        </member>
        <member name="T:Evergine.Mathematics.Plane">
            <summary>
            Represents a plane.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal..</param>
            <param name="b">The Y component of the normal..</param>
            <param name="c">The Z component of the normal..</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.#ctor(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Plane"/> struct.
            </summary>
            <param name="normal">The plane's normal vector.</param>
            <param name="d">The plane's distance from the origin along its normal vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.#ctor(Evergine.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Plane"/> struct.
            </summary>
            <param name="value">A vector whose first three elements describe the normal vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Plane"/> struct.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Equals(Evergine.Mathematics.Plane)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Equals(Evergine.Mathematics.Plane@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Normalize(Evergine.Mathematics.Plane)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Normalize(Evergine.Mathematics.Plane@,Evergine.Mathematics.Plane@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Transform(Evergine.Mathematics.Plane,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Transform(Evergine.Mathematics.Plane@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Transform(Evergine.Mathematics.Plane,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Transform(Evergine.Mathematics.Plane@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Dot(Evergine.Mathematics.Vector4)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Dot(Evergine.Mathematics.Vector4@,System.Single@)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Dot(Evergine.Mathematics.Plane,Evergine.Mathematics.Vector4)">
            <summary>
            Calculates the dot product of a Plane and Vector4.
            </summary>
            <param name="plane">The Plane.</param>
            <param name="value">The Vector4.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotCoordinate(Evergine.Mathematics.Vector3)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotCoordinate(Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotCoordinate(Evergine.Mathematics.Plane,Evergine.Mathematics.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the normal vector of this Plane plus the distance (D) value of the Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotNormal(Evergine.Mathematics.Vector3)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotNormal(Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.DotNormal(Evergine.Mathematics.Plane,Evergine.Mathematics.Vector3)">
            <summary>
            Returns the dot product of a specified Vector3 and the Normal vector of this Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.BoundingSphere@,Evergine.Mathematics.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.Plane)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.Intersects(Evergine.Mathematics.Plane@,Evergine.Mathematics.Ray@)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <param name="ray">The intersection line.</param>
        </member>
        <member name="M:Evergine.Mathematics.Plane.op_Equality(Evergine.Mathematics.Plane,Evergine.Mathematics.Plane)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.op_Inequality(Evergine.Mathematics.Plane,Evergine.Mathematics.Plane)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.PointDistance(Evergine.Mathematics.Vector3)">
            <summary>
            Gets the distance between a <see cref="T:Evergine.Mathematics.Plane"/> and a point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance between the plane and the point.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Plane.PointDistance(Evergine.Mathematics.Vector3@)">
            <summary>
            Gets the distance between a <see cref="T:Evergine.Mathematics.Plane"/> and a point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance between the plane and the point.</returns>
        </member>
        <member name="T:Evergine.Mathematics.PlaneIntersectionType">
            <summary>
            Type of plane intersection.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.PlaneIntersectionType.Front">
            <summary>
            Intersects in front.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.PlaneIntersectionType.Back">
            <summary>
            Intersects in back.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.PlaneIntersectionType.Intersecting">
            <summary>
            Plane intersects.
            </summary>
        </member>
        <member name="T:Evergine.Mathematics.Point">
            <summary>
            Represents a point in a 2D coordinate system.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Point.X">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Mathematics.Point"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Point.Y">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Mathematics.Point"/>.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Point.Zero">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Point"/> with components 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Point.One">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Point"/> with components 1, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Point.UnitX">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Point"/> with components 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Point.UnitY">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Point"/> with components 0, 1.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Point.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Point"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Point"/> struct.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
        </member>
        <member name="M:Evergine.Mathematics.Point.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Point"/> struct.
            </summary>
            <param name="value">The value used for both coordinates of the point.</param>
        </member>
        <member name="M:Evergine.Mathematics.Point.Equals(Evergine.Mathematics.Point)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Point.Equals(Evergine.Mathematics.Point@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Mathematics.Point"/> are equal.
            </summary>
            <param name="other">The point to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Point.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Point.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Point.ToVector2">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Evergine.Mathematics.Vector2"/> representation for this object.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_UnaryNegation(Evergine.Mathematics.Point)">
            <summary>
            Inverts values in the specified <see cref="T:Evergine.Mathematics.Point"/>.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Point"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Addition(Evergine.Mathematics.Point,Evergine.Mathematics.Point)">
            <summary>
            Adds two points.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Point"/> on the left of the add sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Point"/> on the right of the add sign.</param>
            <returns>Sum of the points.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Subtraction(Evergine.Mathematics.Point,Evergine.Mathematics.Point)">
            <summary>
            Subtracts a <see cref="T:Evergine.Mathematics.Point"/> from a <see cref="T:Evergine.Mathematics.Point"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Point"/> on the left of the sub sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Point"/> on the right of the sub sign.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Multiply(Evergine.Mathematics.Point,Evergine.Mathematics.Point)">
            <summary>
            Multiplies the components of two points by each other.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Point"/> on the left of the mul sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Point"/> on the right of the mul sign.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Multiply(Evergine.Mathematics.Point,System.Int32)">
            <summary>
            Multiplies the components of point by a number.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Point"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Multiply(System.Int32,Evergine.Mathematics.Point)">
            <summary>
            Multiplies the components of point by a number.
            </summary>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Point"/> on the left of the mul sign.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Equality(Evergine.Mathematics.Point,Evergine.Mathematics.Point)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Point"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:Evergine.Mathematics.Point"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:Evergine.Mathematics.Point"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Point.op_Inequality(Evergine.Mathematics.Point,Evergine.Mathematics.Point)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Point"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:Evergine.Mathematics.Point"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:Evergine.Mathematics.Point"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Quaternion">
            <summary>
            Represents a quaternion.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Quaternion.identity">
            <summary>
            Identity quaternion.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Quaternion.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Quaternion.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Quaternion.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Quaternion.W">
            <summary>
            W component.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Quaternion.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether the Quaternion is the identity Quaternion.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Quaternion"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.#ctor(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="vectorPart">The vector part.</param>
            <param name="scalarPart">The scalar part.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Equals(Evergine.Mathematics.Quaternion)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Equals(Evergine.Mathematics.Quaternion@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Normalize(Evergine.Mathematics.Quaternion)">
            <summary>
            Normalizes the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Normalize(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Normalizes the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Conjugate">
            <summary>
            Conjugates this instance.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Conjugate(Evergine.Mathematics.Quaternion)">
            <summary>
            Conjugates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Conjugate(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Conjugates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Inverse(Evergine.Mathematics.Quaternion)">
            <summary>
            Inverses the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Inverse(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Inverses the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromAxisAngle(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromAxisAngle(Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromEuler(Evergine.Mathematics.Vector3)">
            <summary>
            Creates a quaternion from euler angles.
            </summary>
            <param name="euler">The euler angles.</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromEuler(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates a quaternion from euler angles.
            </summary>
            <param name="euler">The euler angles.</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromTwoVectors(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates from the angle between two vectors.
            </summary>
            <param name="u">First vector.</param>
            <param name="v">Second vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromTwoVectors(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates from the angle between two vectors.
            </summary>
            <param name="lookAt">The look at vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromLookAt(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates from the lookAt and up vector.
            </summary>
            <param name="lookAt">The look at vector.</param>
            <param name="up">The Up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromRotationMatrix(Evergine.Mathematics.Matrix4x4)">
            <summary>
            Creates from rotation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.CreateFromRotationMatrix(Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Creates from rotation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="quaternion">The quaternion result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Dot(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Dots the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Dot(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Dots the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Slerp(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion,System.Single)">
            <summary>
            Slerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Slerp(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,System.Single,Evergine.Mathematics.Quaternion@)">
            <summary>
            Slerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Lerp(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion,System.Single)">
            <summary>
             Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Lerp(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,System.Single,Evergine.Mathematics.Quaternion@)">
            <summary>
             Linearly interpolates between two quaternions.
            </summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <param name="result">The interpolated Quaternion.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.SmoothDamp(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion@,System.Single,System.Single)">
            <summary>
            Changes a quaternion towards a desired goal over time.
            </summary>
            <param name="current">Current quaternion.</param>
            <param name="target">Target quaternion.</param>
            <param name="deriv">Derivative quaternion.</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="gameTime">The elapsed time.</param>
            <returns>The smooth quaternion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Concatenate(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <returns>A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Concatenate(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.
            </summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <param name="result">The Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Negate(Evergine.Mathematics.Quaternion)">
            <summary>
            Negates the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Negate(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Negates the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Add(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Adds the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Add(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Adds the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Subtract(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Subtracts the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Subtract(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Subtracts the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Multiply(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="quaternion1">The Quaternion on the left side of the multiplication.</param>
            <param name="quaternion2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Multiply(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="quaternion1">The Quaternion on the left side of the multiplication.</param>
            <param name="quaternion2">The Quaternion on the right side of the multiplication.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Multiply(Evergine.Mathematics.Quaternion,System.Single)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Multiply(Evergine.Mathematics.Quaternion@,System.Single,Evergine.Mathematics.Quaternion@)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Divide(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">The source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.Divide(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Quaternion@)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">The source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_UnaryNegation(Evergine.Mathematics.Quaternion)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Equality(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Inequality(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Addition(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Subtraction(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Multiply(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Multiply(Evergine.Mathematics.Quaternion,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Multiply(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="rotation">The rotation quaternion.</param>
            <param name="point">The point as vector3.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.op_Division(Evergine.Mathematics.Quaternion,Evergine.Mathematics.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="quaternion1">The source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.ToEuler(Evergine.Mathematics.Quaternion)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>
            <returns>The rotationaxes.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.ToEuler(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>
            <param name="rotationaxes">The rotationaxes.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.ToAngleAxis(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Obtains the Angle and Axis of a Quaternion.
            </summary>
            <param name="orientation">The quaternion.</param>
            <param name="axis">The axis of the quaternion.</param>
            <param name="angle">The angle of the quaternion.</param>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.ArcTanAngle(System.Single,System.Single)">
            <summary>
            In a 2D grid, returns the angle to a specified point from the +X axis.
            </summary>
            <param name="x">The X.</param>
            <param name="y">The Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Quaternion.AngleTo(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Returns Euler angles that point from one point to another.
            </summary>
            <param name="from">From vector.</param>
            <param name="location">The location.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Ray">
            <summary>
            Represents a ray.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Ray.Position">
            <summary>
            Ray origin position.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Ray.Direction">
            <summary>
            Ray direction.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Ray.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Ray"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Equals(Evergine.Mathematics.Ray)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Equals(Evergine.Mathematics.Ray@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.Plane,System.Boolean)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ignoreNegative">Ignore negative values.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.Plane@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.Intersects(Evergine.Mathematics.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Calculate the closest points between two rays.
            </summary>
            <param name="ray">The second ray.</param>
            <param name="distanceA">The closest point distance in first ray to the second ray. </param>
            <param name="distanceB">The closest point distance in second ray to the first ray.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionXPlane(System.Single)">
            <summary>
            Gets the intersection point with the X plane at the specified X value.
            </summary>
            <param name="xValue">The X plane value.</param>
            <returns>The intersection point with the ray.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionXPlane(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Gets the intersection point with the X plane at the specified X value.
            </summary>
            <param name="xValue">The X plane value.</param>
            <param name="point">The intersection point with the ray.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionYPlane(System.Single)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value.
            </summary>
            <param name="yValue">The Y plane value.</param>
            <returns>The intersection point with the ray.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionYPlane(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value.
            </summary>
            <param name="yValue">The Y plane value.</param>
            <param name="point">The intersection point with the ray.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionZPlane(System.Single)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value.
            </summary>
            <param name="zValue">The Z plane value.</param>
            <returns>The intersection point with the ray.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.IntersectionZPlane(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value.
            </summary>
            <param name="zValue">The Z plane value.</param>
            <param name="point">The intersection point with the ray.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance units along the ray.
            </summary>
            <param name="distance">he distance.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.GetPoint(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Gets a point at distance units along the ray.
            </summary>
            <param name="distance">he distance.</param>
            <param name="result">The point.</param>
        </member>
        <member name="M:Evergine.Mathematics.Ray.op_Equality(Evergine.Mathematics.Ray,Evergine.Mathematics.Ray)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Ray.op_Inequality(Evergine.Mathematics.Ray,Evergine.Mathematics.Ray)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.RayHit3D">
            <summary>
            Contains ray hit data.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RayHit3D.Location">
            <summary>
            Location of the ray hit.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RayHit3D.Normal">
            <summary>
            Normal of the ray hit.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RayHit3D.T">
            <summary>
            T parameter of the ray hit.
            The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
        </member>
        <member name="T:Evergine.Mathematics.RayStep">
            <summary>
            Represent a Ray segment.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.RayStep"/> struct.
            </summary>
            <param name="origin">The ray origin.</param>
            <param name="terminus">The ray step final point.</param>
        </member>
        <member name="P:Evergine.Mathematics.RayStep.Origin">
            <summary>
            Gets the Ray origin.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RayStep.Terminus">
            <summary>
            Getsa the ray ending point.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RayStep.Direction">
            <summary>
            Gets the ray direction.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RayStep.Length">
            <summary>
            Gets the ray step length.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.GetPoint(System.Single)">
            <summary>
            Gets a point in this ray using the distance.
            </summary>
            <param name="distance">The distance to the origin.</param>
            <returns>The final point.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.UpdateRayStep(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Update current raystep with new origin and terminus points.
            Pass by ref to avoid unnecessary struct copy into function since values will be copied anyways locally.
            </summary>
            <param name="origin">beginning of raystep origin.</param>
            <param name="terminus">end of raystep.</param>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.CopyRay(Evergine.Mathematics.Ray,System.Single)">
            <summary>
            Copy the specified ray propertyes.
            </summary>
            <param name="ray">The ray.</param>
            <param name="rayLength">The length.</param>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.Contains(Evergine.Mathematics.Vector3)">
            <summary>
            Indicates if the specified point belong to this ray.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this point is part of this ray.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.GetPointByDistance(Evergine.Mathematics.RayStep[],System.Single)">
            <summary>
            Returns a point along an array of RaySteps by distance.
            </summary>
            <param name="steps">The ray steps array.</param>
            <param name="distance">The distance.</param>
            <returns>The final point.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.GetStepByDistance(Evergine.Mathematics.RayStep[],System.Single,System.Single@)">
            <summary>
            Returns a RayStep along an array of RaySteps by distance.
            </summary>
            <param name="steps">The ray steps array.</param>
            <param name="distance">The distance.</param>
            <param name="remainingDistance">The remaining distnace.</param>
            <returns>The selected ray step.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RayStep.GetDirectionByDistance(Evergine.Mathematics.RayStep[],System.Single)">
            <summary>
            Returns a direction along an array of RaySteps by distance.
            </summary>
            <param name="steps">The ray steps array.</param>
            <param name="distance">The distance.</param>
            <returns>The diretion of the selected ray step.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Rectangle">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Rectangle.empty">
            <summary>
            Represents an instance of the <see cref="T:Evergine.Mathematics.Rectangle"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:Evergine.Mathematics.Rectangle"/> are left uninitialized.
            </remarks>
        </member>
        <member name="F:Evergine.Mathematics.Rectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Rectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Rectangle.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Rectangle.Height">
            <summary>
            Gets or sets the height of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="F:Evergine.Mathematics.Rectangle.X"/> and <see cref="F:Evergine.Mathematics.Rectangle.Width"/> of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="F:Evergine.Mathematics.Rectangle.Y"/> and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <value>
            A <see cref="T:Evergine.Mathematics.Point"/> that represents the upper-left corner of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Center">
            <summary>
            Gets the coordinates of the center of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <value>
            A <see cref="T:Evergine.Mathematics.Point"/> that represents the center of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.Empty">
            <summary>
            Gets an instance of the <see cref="T:Evergine.Mathematics.Rectangle"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:Evergine.Mathematics.Rectangle"/> are left uninitialized.
            </remarks>
        </member>
        <member name="P:Evergine.Mathematics.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="F:Evergine.Mathematics.Rectangle.Width"/> or <see cref="F:Evergine.Mathematics.Rectangle.Height"/> property of this <see cref="T:Evergine.Mathematics.Rectangle"/> has a value of zero.
            </summary>
            <value>.
              This property returns <c>true</c> if the <see cref="F:Evergine.Mathematics.Rectangle.Width"/> or <see cref="F:Evergine.Mathematics.Rectangle.Height"/> property of this
              <see cref="T:Evergine.Mathematics.Rectangle"/> has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Rectangle"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Rectangle"/> struct with the specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Offset(Evergine.Mathematics.Point)">
            <summary>
            Adjusts the location of this rectangle by the specified <paramref name="amount"/>.
            </summary>
            <param name="amount">The amount to offset the location.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="offsetX">The amount to offset the location horizontally.</param>
            <param name="offsetY">The amount to offset the location vertically.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Enlarges this <see cref="T:Evergine.Mathematics.Rectangle"/> structure by the specified amount.
            </summary>
            <param name="horizontalAmount">The amount to inflate this <see cref="T:Evergine.Mathematics.Rectangle"/> structure horizontally.</param>
            <param name="verticalAmount">The amount to inflate this <see cref="T:Evergine.Mathematics.Rectangle"/> structure vertically.</param>
            <remarks>
            This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis.
            For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long
            (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center.
            If either x or y is negative, the <see cref="T:Evergine.Mathematics.Rectangle"/> is deflated in the corresponding direction.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
              This method returns <c>true</c> if the point defined by <paramref name="x"/> and <paramref name="y"/>
              is contained within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Contains(Evergine.Mathematics.Point)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <param name="pt">The <see cref="T:Evergine.Mathematics.Point"/> to test.</param>
            <returns>
              This method returns <c>true</c> if the point represented by the <paramref name="pt"/> parameter is contained
              within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Contains(Evergine.Mathematics.Point@,System.Boolean@)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <param name="pt">The <see cref="T:Evergine.Mathematics.Point"/> to test.</param>
            <param name="result">if set to <c>true</c> the point represented by the <paramref name="pt"/> parameter is contained
            within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure; otherwise <c>false</c>.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Contains(Evergine.Mathematics.Rectangle)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <param name="rect">The <see cref="T:Evergine.Mathematics.Rectangle"/> to test.</param>
            <returns>
              This method returns  <c>true</c> if the rectangular region represented by <paramref name="rect"/> is
              entirely contained within the rectangular region represented by this <see cref="T:Evergine.Mathematics.Rectangle"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Contains(Evergine.Mathematics.Rectangle@,System.Boolean@)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </summary>
            <param name="rect">The <see cref="T:Evergine.Mathematics.Rectangle"/> to test.</param>
            <param name="result">if set to <c>true</c> the rectangular region represented by <paramref name="rect"/> is entirely
            contained within this <see cref="T:Evergine.Mathematics.Rectangle"/> structure.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Intersects(Evergine.Mathematics.Rectangle)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Intersects(Evergine.Mathematics.Rectangle@,System.Boolean@)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="result">if set to <c>true</c> there is any intersection.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.ToVector4">
            <summary>
            Converts the <see cref="F:Evergine.Mathematics.Rectangle.X"/>, <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/> and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> of this
            <see cref="T:Evergine.Mathematics.Rectangle"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </summary>
            <returns>
            A <see cref="T:Evergine.Mathematics.Vector4"/> that contains the <see cref="F:Evergine.Mathematics.Rectangle.X"/>, <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/>, <see cref="F:Evergine.Mathematics.Rectangle.Height"/>,
            of this <see cref="T:Evergine.Mathematics.Rectangle"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.ToVector4(Evergine.Mathematics.Vector4@)">
            <summary>
            Converts the <see cref="F:Evergine.Mathematics.Rectangle.X"/>, <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/> and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> of this
            <see cref="T:Evergine.Mathematics.Rectangle"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </summary>
            <param name="vector"><see cref="T:Evergine.Mathematics.Vector4"/> reference to pass <see cref="T:Evergine.Mathematics.Rectangle"/> values.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Truncate(Evergine.Mathematics.RectangleF)">
            <summary>
            Converts the specified <see cref="T:Evergine.Mathematics.RectangleF"/> to a <see cref="T:Evergine.Mathematics.Rectangle"/> by truncating the <see cref="T:Evergine.Mathematics.RectangleF"/> values.
            </summary>
            <param name="value">The <see cref="T:Evergine.Mathematics.RectangleF"/> to be converted.</param>
            <returns>The truncated value of the <see cref="T:Evergine.Mathematics.Rectangle"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Round(Evergine.Mathematics.RectangleF)">
            <summary>
            Converts the specified <see cref="T:Evergine.Mathematics.RectangleF"/> to a <see cref="T:Evergine.Mathematics.Rectangle"/> by rounding the <see cref="T:Evergine.Mathematics.RectangleF"/>
            values to the nearest integer values.
            </summary>
            <param name="value">The <see cref="T:Evergine.Mathematics.Rectangle"/> value.</param>
            <returns>The rounded interger value of the <see cref="T:Evergine.Mathematics.Rectangle"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Intersect(Evergine.Mathematics.Rectangle,Evergine.Mathematics.Rectangle)">
            <summary>
            Returns a <see cref="T:Evergine.Mathematics.Rectangle"/> structure that represents the intersection of two rectangles. If there is no
            intersection, and empty <see cref="T:Evergine.Mathematics.Rectangle"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">The second rectangle to intersect.</param>
            <returns>A third <see cref="T:Evergine.Mathematics.Rectangle"/> structure the size of which represents the overlapped area of the two
            specified rectangles.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Intersect(Evergine.Mathematics.Rectangle@,Evergine.Mathematics.Rectangle@,Evergine.Mathematics.Rectangle@)">
            <summary>
            Calculates a <see cref="T:Evergine.Mathematics.Rectangle"/> structure that represents the intersection of two rectangles.
            If there is no intersection, and empty <see cref="T:Evergine.Mathematics.Rectangle"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">The second rectangle to intersect.</param>
            <param name="result">A rectangle that represents the intersection of two rectangles.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Union(Evergine.Mathematics.Rectangle,Evergine.Mathematics.Rectangle)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">The second rectangle to union.</param>
            <returns>
            A third <see cref="T:Evergine.Mathematics.Rectangle"/> structure that contains both of the two rectangles that form the union.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Union(Evergine.Mathematics.Rectangle@,Evergine.Mathematics.Rectangle@,Evergine.Mathematics.Rectangle@)">
            <summary>
            Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">The second rectangle to union.</param>
            <param name="result">The smallest possible third rectangle that can contain both of two rectangles that form a union.</param>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Equals(Evergine.Mathematics.Rectangle)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:Evergine.Mathematics.Rectangle"/>.
            </summary>
            <param name="other">The <see cref="T:Evergine.Mathematics.Rectangle"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:Evergine.Mathematics.Rectangle.X"/>, <see cref="F:Evergine.Mathematics.Rectangle.Y"/>,
            <see cref="F:Evergine.Mathematics.Rectangle.Width"/>, and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> properties equal to the corresponding properties of this
            <see cref="T:Evergine.Mathematics.Rectangle"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Equals(Evergine.Mathematics.Rectangle@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:Evergine.Mathematics.Rectangle"/> with the same location and size of this <see cref="T:Evergine.Mathematics.Rectangle"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
              This method returns <c>true</c> if <paramref name="obj"/> is a <see cref="T:Evergine.Mathematics.Rectangle"/> and its <see cref="F:Evergine.Mathematics.Rectangle.X"/>,
              <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/>, and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> properties are equal to the corresponding properties
              of this <see cref="T:Evergine.Mathematics.Rectangle"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.ToString">
            <summary>
            Converts the <see cref="P:Evergine.Mathematics.Rectangle.Location"/> and Size of this <see cref="T:Evergine.Mathematics.Rectangle"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. For example, "{X:20, Y:20, Width:100, Height:50}".
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Evergine.Mathematics.Rectangle"/> structure. For information about the use of hash codes, see <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.op_Equality(Evergine.Mathematics.Rectangle,Evergine.Mathematics.Rectangle)">
            <summary>
            Tests whether two <see cref="T:Evergine.Mathematics.Rectangle"/> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:Evergine.Mathematics.Rectangle"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Evergine.Mathematics.Rectangle"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> the two specified <see cref="T:Evergine.Mathematics.Rectangle"/> structures have equal
            <see cref="F:Evergine.Mathematics.Rectangle.X"/> , <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/>, and <see cref="F:Evergine.Mathematics.Rectangle.Height"/> properties; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Rectangle.op_Inequality(Evergine.Mathematics.Rectangle,Evergine.Mathematics.Rectangle)">
            <summary>
            Tests whether two <see cref="T:Evergine.Mathematics.Rectangle"/> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:Evergine.Mathematics.Rectangle"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Evergine.Mathematics.Rectangle"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:Evergine.Mathematics.Rectangle.X"/> , <see cref="F:Evergine.Mathematics.Rectangle.Y"/>, <see cref="F:Evergine.Mathematics.Rectangle.Width"/>, or <see cref="F:Evergine.Mathematics.Rectangle.Height"/>
            properties of the two <see cref="T:Evergine.Mathematics.Rectangle"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.RectangleF">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RectangleF.empty">
            <summary>
            Represents an instance of the <see cref="T:Evergine.Mathematics.RectangleF"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:Evergine.Mathematics.RectangleF"/> are left uninitialized.
            </remarks>
        </member>
        <member name="F:Evergine.Mathematics.RectangleF.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RectangleF.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RectangleF.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.RectangleF.Height">
            <summary>
            Gets or sets the height of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="F:Evergine.Mathematics.RectangleF.X"/> and <see cref="F:Evergine.Mathematics.RectangleF.Width"/> of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="F:Evergine.Mathematics.RectangleF.Y"/> and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <value>
            A <see cref="T:Evergine.Mathematics.Vector2"/> that represents the upper-left corner of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Center">
            <summary>
            Gets the coordinates of the center of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <value>
            A <see cref="T:Evergine.Mathematics.Vector2"/> that represents the center of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </value>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.Empty">
            <summary>
            Gets an instance of the <see cref="T:Evergine.Mathematics.RectangleF"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:Evergine.Mathematics.RectangleF"/> are left uninitialized.
            </remarks>
        </member>
        <member name="P:Evergine.Mathematics.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="F:Evergine.Mathematics.RectangleF.Width"/> or <see cref="F:Evergine.Mathematics.RectangleF.Height"/> property of this <see cref="T:Evergine.Mathematics.RectangleF"/> has a value of zero.
            </summary>
            <value>.
              This property returns <c>true</c> if the <see cref="F:Evergine.Mathematics.RectangleF.Width"/> or <see cref="F:Evergine.Mathematics.RectangleF.Height"/> property of this
              <see cref="T:Evergine.Mathematics.RectangleF"/> has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.RectangleF"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.RectangleF"/> struct with the specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Offset(Evergine.Mathematics.Vector2)">
            <summary>
            Adjusts the location of this rectangle by the specified <paramref name="amount"/>.
            </summary>
            <param name="amount">The amount to offset the location.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="offsetX">The amount to offset the location horizontally.</param>
            <param name="offsetY">The amount to offset the location vertically.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Enlarges this <see cref="T:Evergine.Mathematics.RectangleF"/> structure by the specified amount.
            </summary>
            <param name="horizontalAmount">The amount to inflate this <see cref="T:Evergine.Mathematics.RectangleF"/> structure horizontally.</param>
            <param name="verticalAmount">The amount to inflate this <see cref="T:Evergine.Mathematics.RectangleF"/> structure vertically.</param>
            <remarks>
            This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis.
            For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long
            (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center.
            If either x or y is negative, the <see cref="T:Evergine.Mathematics.RectangleF"/> is deflated in the corresponding direction.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
              This method returns <c>true</c> if the point defined by <paramref name="x"/> and <paramref name="y"/>
              is contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Contains(Evergine.Mathematics.Vector2)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:Evergine.Mathematics.Vector2"/> to test.</param>
            <returns>
              This method returns <c>true</c> if the point represented by the <paramref name="pt"/> parameter is contained
              within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Contains(Evergine.Mathematics.Vector2@,System.Boolean@)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:Evergine.Mathematics.Vector2"/> to test.</param>
            <param name="result">if set to <c>true</c> the point represented by the <paramref name="pt"/> parameter is contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure; otherwise <c>false</c>.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Contains(Evergine.Mathematics.RectangleF)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:Evergine.Mathematics.RectangleF"/> to test.</param>
            <returns>
              This method returns  <c>true</c> if the rectangular region represented by <paramref name="rect"/> is
              entirely contained within the rectangular region represented by this <see cref="T:Evergine.Mathematics.RectangleF"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Contains(Evergine.Mathematics.RectangleF@,System.Boolean@)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:Evergine.Mathematics.RectangleF"/> to test.</param>
            <param name="result">if set to <c>true</c> the rectangular region represented by <paramref name="rect"/> is entirely contained within this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Intersects(Evergine.Mathematics.RectangleF)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Intersects(Evergine.Mathematics.RectangleF@,System.Boolean@)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="result">if set to <c>true</c> there is any intersection.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.GetPoints">
            <summary>
            Gets the corner points of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <returns>
            A <see cref="T:Vector2[]"/> that represents the corner points of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.ToVector4">
            <summary>
            Converts the <see cref="F:Evergine.Mathematics.RectangleF.X"/>, <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/> and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> of this
            <see cref="T:Evergine.Mathematics.RectangleF"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </summary>
            <returns>
            A <see cref="T:Evergine.Mathematics.Vector4"/> that contains the <see cref="F:Evergine.Mathematics.RectangleF.X"/>, <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, <see cref="F:Evergine.Mathematics.RectangleF.Height"/>,
            of this <see cref="T:Evergine.Mathematics.RectangleF"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.ToVector4(Evergine.Mathematics.Vector4@)">
            <summary>
            Converts the <see cref="F:Evergine.Mathematics.RectangleF.X"/>, <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/> and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> of this
            <see cref="T:Evergine.Mathematics.RectangleF"/> to a <see cref="T:Evergine.Mathematics.Vector4"/> structure.
            </summary>
            <param name="vector"><see cref="T:Evergine.Mathematics.Vector4"/> reference to pass <see cref="T:Evergine.Mathematics.RectangleF"/> values.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Intersect(Evergine.Mathematics.RectangleF,Evergine.Mathematics.RectangleF)">
            <summary>
            Returns a <see cref="T:Evergine.Mathematics.RectangleF"/> structure that represents the intersection of two rectangles. If there is no
            intersection, and empty <see cref="T:Evergine.Mathematics.RectangleF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A second rectangle to intersect.</param>
            <returns>A third <see cref="T:Evergine.Mathematics.RectangleF"/> structure the size of which represents the overlapped area of the two
            specified rectangles.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Intersect(Evergine.Mathematics.RectangleF@,Evergine.Mathematics.RectangleF@,Evergine.Mathematics.RectangleF@)">
            <summary>
            Calculates a <see cref="T:Evergine.Mathematics.RectangleF"/> structure that represents the intersection of two rectangles. If there is no intersection, and empty <see cref="T:Evergine.Mathematics.RectangleF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A second rectangle to intersect.</param>
            <param name="result">A rectangle that represents the intersection of two rectangles.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Union(Evergine.Mathematics.RectangleF,Evergine.Mathematics.RectangleF)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A second rectangle to union.</param>
            <returns>A third <see cref="T:Evergine.Mathematics.RectangleF"/> structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Union(Evergine.Mathematics.RectangleF@,Evergine.Mathematics.RectangleF@,Evergine.Mathematics.RectangleF@)">
            <summary>
            Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A second rectangle to union.</param>
            <param name="result">The smallest possible third rectangle that can contain both of two rectangles that form a union.</param>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Equals(Evergine.Mathematics.RectangleF)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:Evergine.Mathematics.RectangleF"/>.
            </summary>
            <param name="other">The <see cref="T:Evergine.Mathematics.RectangleF"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:Evergine.Mathematics.RectangleF.X"/>, <see cref="F:Evergine.Mathematics.RectangleF.Y"/>,
            <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> properties equal to the corresponding properties of this
            <see cref="T:Evergine.Mathematics.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Equals(Evergine.Mathematics.RectangleF@)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:Evergine.Mathematics.RectangleF"/>.
            </summary>
            <param name="other">The <see cref="T:Evergine.Mathematics.RectangleF"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:Evergine.Mathematics.RectangleF.X"/>, <see cref="F:Evergine.Mathematics.RectangleF.Y"/>,
            <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> properties equal to the corresponding properties of this
            <see cref="T:Evergine.Mathematics.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:Evergine.Mathematics.RectangleF"/> with the same location and size of this <see cref="T:Evergine.Mathematics.RectangleF"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
              This method returns <c>true</c> if <paramref name="obj"/> is a <see cref="T:Evergine.Mathematics.RectangleF"/> and its <see cref="F:Evergine.Mathematics.RectangleF.X"/>,
              <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> properties are equal to the corresponding properties
              of this <see cref="T:Evergine.Mathematics.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.ToString">
            <summary>
            Converts the <see cref="P:Evergine.Mathematics.RectangleF.Location"/> and Size of this <see cref="T:Evergine.Mathematics.RectangleF"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. For example, "{X:20, Y:20, Width:100, Height:50}".
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Evergine.Mathematics.RectangleF"/> structure. For information about the use of hash codes, see <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.op_Equality(Evergine.Mathematics.RectangleF,Evergine.Mathematics.RectangleF)">
            <summary>
            Tests whether two <see cref="T:Evergine.Mathematics.RectangleF"/> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:Evergine.Mathematics.RectangleF"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Evergine.Mathematics.RectangleF"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> the two specified <see cref="T:Evergine.Mathematics.RectangleF"/> structures have equal
            <see cref="F:Evergine.Mathematics.RectangleF.X"/> , <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, and <see cref="F:Evergine.Mathematics.RectangleF.Height"/> properties; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.op_Inequality(Evergine.Mathematics.RectangleF,Evergine.Mathematics.RectangleF)">
            <summary>
            Tests whether two <see cref="T:Evergine.Mathematics.RectangleF"/> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:Evergine.Mathematics.RectangleF"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Evergine.Mathematics.RectangleF"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:Evergine.Mathematics.RectangleF.X"/> , <see cref="F:Evergine.Mathematics.RectangleF.Y"/>, <see cref="F:Evergine.Mathematics.RectangleF.Width"/>, or <see cref="F:Evergine.Mathematics.RectangleF.Height"/>
            properties of the two <see cref="T:Evergine.Mathematics.RectangleF"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.RectangleF.op_Implicit(Evergine.Mathematics.Rectangle)~Evergine.Mathematics.RectangleF">
            <summary>
            Converts the specified <see cref="T:Evergine.Mathematics.Rectangle"/> structure to a <see cref="T:Evergine.Mathematics.RectangleF"/> structure.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>
            The <see cref="T:Evergine.Mathematics.RectangleF"/> structure that is converted from the specified <see cref="T:Evergine.Mathematics.Rectangle"/> structure.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.Spline">
            <summary>
            Representes a spline.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Spline.a">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Spline.b">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Spline.c">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Spline.d">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Spline.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Spline"/> struct.
            </summary>
            <param name="a">A point.</param>
            <param name="b">B point.</param>
            <param name="c">C point.</param>
            <param name="d">D point.</param>
        </member>
        <member name="M:Evergine.Mathematics.Spline.GetPointOnSpline(System.Single)">
            <summary>
            Evaluate the point using a cubic equation.
            </summary>
            <param name="s">A distance.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Spline.CalculateCubicSpline(System.Int32,Evergine.Mathematics.Vector3[])">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/.
            </summary>
            <param name="n">the number of control points.</param>
            <param name="v">the array of vectors.</param>
            <returns>The spline.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Spline.CalculateCubicSpline(System.Int32@,Evergine.Mathematics.Vector3[]@,Evergine.Mathematics.Spline[]@)">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/.
            </summary>
            <param name="n">the number of control points.</param>
            <param name="v">the array of vectors.</param>
            <param name="c">The c.</param>
        </member>
        <member name="T:Evergine.Mathematics.UInt2">
            <summary>
            Stores a vector of 2 uints.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.UInt2.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.UInt2.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.UInt2"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.Equals(Evergine.Mathematics.UInt2)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.Equals(Evergine.Mathematics.UInt2@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.UInt3">
            <summary>
            Stores a vector of 3 UInts.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.UInt3.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.UInt3.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.UInt3.Z">
            <summary>
            Z value.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.UInt3"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.Equals(Evergine.Mathematics.UInt3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.Equals(Evergine.Mathematics.UInt3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.UInt3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Mathematics.Vector2">
            <summary>
            Represents a vector in a 2D coordinate system.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector2.X">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector2.Y">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Zero">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.One">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 1, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.UnitX">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.UnitY">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 0, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Center">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 0.5f, 0.5f.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Up">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 0, -1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Down">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 0, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Right">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Left">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector2"/> with components -1, 0.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Vector2"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector2"/> struct.
            </summary>
            <param name="x">The x coordinate in 2D space.</param>
            <param name="y">The y coordinate in 2D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector2"/> struct.
            </summary>
            <param name="value">The x and y coordinates in 2D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Equals(Evergine.Mathematics.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Equals(Evergine.Mathematics.Vector2@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Mathematics.Vector2"/> are equal.
            </summary>
            <param name="other">The vector to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Length">
            <summary>
            Returns the length of this <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <returns>The length of this <see cref="T:Evergine.Mathematics.Vector2"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Evergine.Mathematics.Vector2"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.ToVector3(System.Single)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector2"/> to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="z">The Z value.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.ToVector3(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector2"/> to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="z">The Z value.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.ToVector3(System.Single,Evergine.Mathematics.Vector3*)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector2"/> to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="z">The Z value.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Distance(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Distance(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.DistanceSquared(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.DistanceSquared(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single@)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The squared distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Dot(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Dot(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single@)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Normalize">
            <summary>
            Turns this <see cref="T:Evergine.Mathematics.Vector2"/> to a unit vector with the same direction.
            </summary>
            <returns>The previous vector length.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Normalize(Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Normalize(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Reflect(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Reflect(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Rotate(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="vector">The vector to be rotated.</param>
            <param name="angle">The angle to rotate.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Rotate(Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="vector">The vector to be rotated.</param>
            <param name="angle">The angle to rotate.</param>
            <param name="result">The rotated vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Min(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Min(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Max(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Max(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Abs(Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> with absolute values from the a vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Abs(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> with absolute values from the a vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Clamp(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Clamp(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Lerp(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Lerp(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Barycentric(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 2D triangle.
            </summary>
            <param name="value1">The first vector of 2D triangle.</param>
            <param name="value2">The second vector of 2D triangle.</param>
            <param name="value3">The third vector of 2D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 2D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector
            of 2D triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Barycentric(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 2D triangle.
            </summary>
            <param name="value1">The first vector of 2D triangle.</param>
            <param name="value2">The second vector of 2D triangle.</param>
            <param name="value3">The third vector of 2D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 2D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third
            vector of 2D triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.SmoothStep(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.SmoothStep(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.SmoothDamp(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2@,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time.
            </summary>
            <param name="current">The current position.</param>
            <param name="target">The target position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, modified by the function.</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame).</param>
            <returns>The smooth vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.SmoothDamp(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2@,System.Single,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time.
            </summary>
            <param name="current">The current position.</param>
            <param name="target">The target position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, modified by the function.</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="gameTime">The current game time (time between last frame).</param>
            <returns>The smooth vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.ClampMagnitude(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Returns a vector with its magnitude clamped to <paramref name="maxLength"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="maxLength">The max length.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.CatmullRom(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.CatmullRom(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Hermite(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Hermite(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector2@)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.SquareRoot(Evergine.Mathematics.Vector2)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2[],Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector2[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Evergine.Mathematics.Vector2"/> by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2[],System.Int32,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Evergine.Mathematics.Vector2"/> by the specified <see cref="T:Evergine.Mathematics.Matrix4x4"/>
            and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first
            <see cref="T:Evergine.Mathematics.Vector2"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.TransformNormal(Evergine.Mathematics.Vector2,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.TransformNormal(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector2@)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Transform(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a transformation of 2D vector by the specified
            <see cref="T:Evergine.Mathematics.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="rotation">The <see cref="T:Evergine.Mathematics.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector2"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Negate(Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Negate(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Add(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Add(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>, storing the result of
            the addition in <paramref name="result"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <param name="result">The result of the vector addition as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Subtract(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector2"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Subtract(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector2"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <param name="result">The result of the vector subtraction as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Multiply(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Multiply(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Multiply(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector2"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Multiply(Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector2"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector2"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Divide(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by the components of another <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Divide(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by the components of another <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Divide(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Divide(Evergine.Mathematics.Vector2@,System.Single,Evergine.Mathematics.Vector2@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Angle(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Return the angle in radians between to vectors.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector.</param>
            <returns>The angle in radians between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Angle(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Return the angle in radians between to vectors.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector.</param>
            <returns>The angle in radians between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Collinear(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line).
            </summary>
            <param name="a">First vertex.</param>
            <param name="b">Second vertex.</param>
            <param name="c">Third vertex.</param>
            <returns><c>true</c> if the tree vertices are aligned; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Collinear(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line).
            </summary>
            <param name="a">First vertex.</param>
            <param name="b">Second vertex.</param>
            <param name="c">Third vertex.</param>
            <param name="tolerance">A non-negative tolerace that is used to determine the collinearity of the vertices.</param>
            <returns><c>true</c> if the tree vertices are aligned; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Project(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector2"/> onto another <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector2"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector2"/> to project <paramref name="vector"/> on.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</returns>
            <remarks>
            The returned vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.Project(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector2"/> onto another <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector2"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector2"/> to project <paramref name="vector"/> on.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</param>
            <remarks>
            The <paramref name="result"/> vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_UnaryNegation(Evergine.Mathematics.Vector2)">
            <summary>
            Inverts values in the specified <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Addition(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the add sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Subtraction(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Subtracts a <see cref="T:Evergine.Mathematics.Vector2"/> from a <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the sub sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Multiply(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the mul sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Multiply(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Multiply(System.Single,Evergine.Mathematics.Vector2)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Division(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by the components of another <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the div sign.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector2"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Division(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector2"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector2"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Equality(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector2"/> instances are equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector2"/> instance on the left of the equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector2"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector2.op_Inequality(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector2"/> instances are not equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector2"/> instance on the left of the not equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector2"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Evergine.Mathematics.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Vector3">
            <summary>
            Represents a vector in a 3D coordinate system.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector3.X">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector3.Y">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector3.Z">
            <summary>
            The z coordinate of this <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Zero">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.One">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 1, 1, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.UnitX">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.UnitY">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.UnitZ">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Up">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Down">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, -1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Right">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Left">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components -1, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Forward">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 0, -1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Backward">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Vector3"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector3"/> struct.
            </summary>
            <param name="x">The x coordinate in 3D space.</param>
            <param name="y">The y coordinate in 3D space.</param>
            <param name="z">The z coordinate in 3D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector3"/> struct.
            </summary>
            <param name="value">The x, y and z coordinates in 3D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.#ctor(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector3"/> struct.
            </summary>
            <param name="value">The <see cref="T:Evergine.Mathematics.Vector2"/> vector with coordinates x and y.</param>
            <param name="z">The z coordinate in 3D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Equals(Evergine.Mathematics.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Equals(Evergine.Mathematics.Vector3@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Mathematics.Vector3"/> are equal.
            </summary>
            <param name="other">The vector to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector3.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Length">
            <summary>
            Returns the length of this <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <returns>The length of this <see cref="T:Evergine.Mathematics.Vector3"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Evergine.Mathematics.Vector3"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ToVector2">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector3"/> to <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> with the x and y components.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ToVector4(Evergine.Mathematics.Vector4@,System.Single)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector3"/> to <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector4"/> output.</param>
            <param name="w">The W component. 1.0 by default.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ToVector4(System.Single)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector3"/> to <see cref="T:Evergine.Mathematics.Vector4"/>. The W component is 1.0.
            </summary>
            <param name="w">The W component. 1.0 by default.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector4"/> output.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ToVector2(Evergine.Mathematics.Vector2@)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector3"/> to <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> with the x and y components as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.FromQuaternion(Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the euler angles from a quaternion.
            </summary>
            <param name="q">Source <see cref="T:Evergine.Mathematics.Quaternion"/>.</param>
            <param name="result"><see cref="T:Evergine.Mathematics.Vector3"/> that contains the euler angles from a quaternion as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Distance(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Distance(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <param name="result">The distance.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.DistanceSquared(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.DistanceSquared(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <param name="result">The distance squared.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Dot(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Dot(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Dot(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Dot(Evergine.Mathematics.Vector3)">
            <summary>
            Returns a dot product between this <see cref="T:Evergine.Mathematics.Vector3"/> instance and another vector.
            </summary>
            <param name="value">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Dot(Evergine.Mathematics.Vector3@,System.Single@)">
            <summary>
            Returns a dot product between this <see cref="T:Evergine.Mathematics.Vector3"/> instance and another vector.
            </summary>
            <param name="value">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Normalize">
            <summary>
            Turns this <see cref="T:Evergine.Mathematics.Vector3"/> to a unit vector with the same direction.
            </summary>
            <returns>The previous vector length.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Normalize(Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Normalize(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
            <returns>The previous vector length.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Cross(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Cross(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="result">The cross product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Cross(Evergine.Mathematics.Vector3)">
            <summary>
            Computes the cross product of this <see cref="T:Evergine.Mathematics.Vector3"/> instance and given vector.
            </summary>
            <param name="vector">The second vector.</param>
            <returns>The cross product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Cross(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Computes the cross product of this <see cref="T:Evergine.Mathematics.Vector3"/> instance and given vector.
            </summary>
            <param name="vector">The second vector.</param>
            <param name="result">The cross product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Reflect(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Reflect(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Reflect(Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains reflect vector of this <see cref="T:Evergine.Mathematics.Vector3"/> instance and
            given normal.
            </summary>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Reflect(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains reflect vector of this <see cref="T:Evergine.Mathematics.Vector3"/> instance and
            given normal.
            </summary>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Min(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Min(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Max(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Max(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Abs(Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/> with absolute values from the a vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Abs(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> with absolute values from the a vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Clamp(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Clamp(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Lerp(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Lerp(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Barycentric(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 3D triangle.
            </summary>
            <param name="value1">The first vector of 3D triangle.</param>
            <param name="value2">The second vector of 3D triangle.</param>
            <param name="value3">The third vector of 3D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 3D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third
            vector of 3D triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Barycentric(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 3D triangle.
            </summary>
            <param name="value1">The first vector of 3D triangle.</param>
            <param name="value2">The second vector of 3D triangle.</param>
            <param name="value3">The third vector of 3D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 3D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third
            vector of 3D triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SmoothStep(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SmoothStep(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SmoothDamp(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3@,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time.
            </summary>
            <param name="current">The current position.</param>
            <param name="target">The target position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, modified by the function.</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame).</param>
            <returns>The smooth vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SmoothDamp(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3@,System.Single,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time.
            </summary>
            <param name="current">The current position.</param>
            <param name="target">The target position we are trying to reach.</param>
            <param name="currentVelocity">The current velocity, modified by the function.</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="gameTime">The current game time (time between last frame).</param>
            <returns>The smooth vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.ClampMagnitude(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Returns a vector with its magnitude clamped to <paramref name="maxLength"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="maxLength">The max length.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.CatmullRom(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.CatmullRom(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Hermite(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Hermite(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Matrix3x3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of 3D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix3x3"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix3x3"/>.</param>
            <returns>Transformed <see cref="T:Evergine.Mathematics.Vector3"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix3x3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of 3D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix3x3"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix3x3"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3@)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3*,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3*)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of 3D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3[],Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Evergine.Mathematics.Vector3"/> by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.TransformNormal(Evergine.Mathematics.Vector3,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of the specified normal by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="normal">Source <see cref="T:Evergine.Mathematics.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.TransformNormal(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of the specified normal by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="normal">Source <see cref="T:Evergine.Mathematics.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed normal as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.TransformNormal(Evergine.Mathematics.Vector3*,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3*)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a transformation of the specified normal by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="normal">Source <see cref="T:Evergine.Mathematics.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed normal as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Transform(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.TransformCoordinate(Evergine.Mathematics.Vector3,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.TransformCoordinate(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Negate(Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Negate(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Add(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Add(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>, storing the result of
            the addition in <paramref name="result"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <param name="result">The result of the vector addition as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Subtract(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector3"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Subtract(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector3"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <param name="result">The result of the vector subtraction as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Multiply(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Multiply(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Multiply(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector3"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Multiply(Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector3"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector3"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Divide(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by the components of another <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Divide(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by the components of another <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Divide(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Divide(Evergine.Mathematics.Vector3@,System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Angle(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Angle(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Return the angle in radians between to vectors.
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <returns>The angle in radians between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SignedAngle(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Return the angle in radians between to vectors indicating the direction.
            Positive in a clocwise direction and negative in a anti-clockwise direction.
            </summary>
            <remarks>The result will never be greater than 180 degrees or smoller than -180 degress.</remarks>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <param name="axis">A vector around which the other vectors are rotated.</param>
            <returns>The angle in radians between two vectors with sign.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.RotateAround(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <returns>The point vector rotated.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.RotateAround(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector3@)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <param name="rotatePoint">The point vector rotated.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SquareRoot(Evergine.Mathematics.Vector3)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.SquareRoot(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <param name="result">The square root vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Project(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector3"/> onto another <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector3"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector3"/> to project <paramref name="vector"/> on.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</returns>
            <remarks>
            The returned vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.Project(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector3"/> onto another <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector3"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector3"/> to project <paramref name="vector"/> on.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</param>
            <remarks>
            The <paramref name="result"/> vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_UnaryNegation(Evergine.Mathematics.Vector3)">
            <summary>
            Inverts values in the specified <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Addition(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the add sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Subtraction(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Subtracts a <see cref="T:Evergine.Mathematics.Vector3"/> from a <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the sub sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Multiply(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the mul sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Multiply(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Multiply(System.Single,Evergine.Mathematics.Vector3)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Division(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by the components of another <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the div sign.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector3"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Division(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Equality(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector3"/> instances are equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector3"/> instance on the left of the equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector3"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector3.op_Inequality(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector3"/> instances are not equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector3"/> instance on the left of the not equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector3"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Evergine.Mathematics.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component,
            and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="T:Evergine.Mathematics.Vector4">
            <summary>
            Represents a vector in a 4D coordinate system.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector4.X">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector4.Y">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector4.Z">
            <summary>
            The z coordinate of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="F:Evergine.Mathematics.Vector4.W">
            <summary>
            The w coordinate of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.Zero">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 0, 0, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.One">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 1, 1, 1, 1.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.UnitX">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 1, 0, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.UnitY">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 0, 1, 0, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.UnitZ">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 0, 0, 1, 0.
            </summary>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.UnitW">
            <summary>
            Gets a <see cref="T:Evergine.Mathematics.Vector4"/> with components 0, 0, 0, 1.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Mathematics.Vector4"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector4"/> struct.
            </summary>
            <param name="x">The x coordinate in 4D space.</param>
            <param name="y">The y coordinate in 4D space.</param>
            <param name="z">The z coordinate in 4D space.</param>
            <param name="w">The w coordinate in 4D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.#ctor(Evergine.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">The <see cref="T:Evergine.Mathematics.Vector2"/> vector with coordinates x and y.</param>
            <param name="z">The z coordinate in 4D space.</param>
            <param name="w">The w coordinate in 4D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.#ctor(Evergine.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">The <see cref="T:Evergine.Mathematics.Vector3"/> vector with coordinates x, y and z.</param>
            <param name="w">The w coordinate in 4D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">The x, y, z and w coordinates in 4D space.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Equals(Evergine.Mathematics.Vector4)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Equals(Evergine.Mathematics.Vector4@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Mathematics.Vector4"/> are equal.
            </summary>
            <param name="other">The vector to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector4.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Length">
            <summary>
            Returns the length of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <returns>The length of this <see cref="T:Evergine.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Evergine.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ToVector2">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector4"/> to <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <returns>The <see cref="T:Evergine.Mathematics.Vector2"/> with the x and y components.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ToVector2(Evergine.Mathematics.Vector2@)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector4"/> to <see cref="T:Evergine.Mathematics.Vector2"/>.
            </summary>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector2"/> with the x and y components as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ToVector3">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector4"/> to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <returns>The <see cref="T:Evergine.Mathematics.Vector3"/> with the x, y and z components.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ToVector3(Evergine.Mathematics.Vector3@)">
            <summary>
            Convert a <see cref="T:Evergine.Mathematics.Vector4"/> to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector3"/> with the x, y and z components as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Distance(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Distance(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.DistanceSquared(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.DistanceSquared(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single@)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <param name="result">The distance squared.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Dot(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Dot(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors as an output parameter.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Normalize">
            <summary>
            Turns this <see cref="T:Evergine.Mathematics.Vector4"/> to a unit vector with the same direction.
            </summary>
            <returns>The previous vector length.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Normalize(Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Normalize(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
            <returns>The previous vector length.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Min(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector4"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Min(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector4"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Max(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector4"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Max(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector4"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Abs(Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector4"/> with absolute values from the a vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Abs(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the absolute values from the a vector.
            </summary>
            <param name="value">The vector.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector4"/> with absolute values from the a vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Clamp(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Clamp(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">The restricted vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Lerp(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Lerp(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Barycentric(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 4D triangle.
            </summary>
            <param name="value1">The first vector of 4D triangle.</param>
            <param name="value2">The second vector of 4D triangle.</param>
            <param name="value3">The third vector of 4D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 4D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third
            vector of 4D triangle.</param>
            <returns>The cartesian translation of barycentric coordinates.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Barycentric(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the cartesian coordinates of a vector specified in
            barycentric coordinates and relative to 4D triangle.
            </summary>
            <param name="value1">The first vector of 4D triangle.</param>
            <param name="value2">The second vector of 4D triangle.</param>
            <param name="value3">The third vector of 4D triangle.</param>
            <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second
            vector of 4D triangle.</param>
            <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third
            vector of 4D triangle.</param>
            <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.SmoothStep(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.SmoothStep(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.ClampMagnitude(Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Returns a vector with its magnitude clamped to <paramref name="maxLength"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="maxLength">The max length.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.CatmullRom(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of CatmullRom interpolation.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.CatmullRom(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains CatmullRom interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector in interpolation.</param>
            <param name="value2">The second vector in interpolation.</param>
            <param name="value3">The third vector in interpolation.</param>
            <param name="value4">The fourth vector in interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Hermite(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The hermite spline interpolation vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Hermite(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains hermite spline interpolation.
            </summary>
            <param name="value1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="value2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">The hermite spline interpolation vector as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector2,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <returns>Transformed <see cref="T:Evergine.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <returns>Transformed <see cref="T:Evergine.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <returns>Transformed <see cref="T:Evergine.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector4*,Evergine.Mathematics.Matrix4x4@,Evergine.Mathematics.Vector4*)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a transformation of 4D vector by the specified
            <see cref="T:Evergine.Mathematics.Matrix4x4"/>.
            </summary>
            <param name="position">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="matrix">The transformation <see cref="T:Evergine.Mathematics.Matrix4x4"/>.</param>
            <param name="result">Transformed <see cref="T:Evergine.Mathematics.Vector4"/> as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector2,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector4@)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector3,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector4@)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector4,Evergine.Mathematics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Transform(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Quaternion@,Evergine.Mathematics.Vector4@)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <param name="result">The transformed vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Negate(Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Negate(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Add(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Add(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>, storing the result of
            the addition in <paramref name="result"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <param name="result">The result of the vector addition as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Subtract(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector4"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Subtract(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains subtraction of on <see cref="T:Evergine.Mathematics.Vector4"/> from a another.
            </summary>
            <param name="value1">The first vector to substract.</param>
            <param name="value2">The second vector to substract.</param>
            <param name="result">The result of the vector subtraction as an ouput parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Multiply(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Multiply(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">The first vector to multiply.</param>
            <param name="value2">The second vector to multiply.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Multiply(Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector4"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector3"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Multiply(Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Creates a new <see cref="T:Evergine.Mathematics.Vector4"/> that contains a multiplication of <see cref="T:Evergine.Mathematics.Vector4"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Divide(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by the components of another <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Divide(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by the components of another <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Divide(Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Divide(Evergine.Mathematics.Vector4@,System.Single,Evergine.Mathematics.Vector4@)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.SquareRoot(Evergine.Mathematics.Vector4)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.SquareRoot(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <param name="result">The square root vector.</param>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Project(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector4"/> onto another <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector4"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector4"/> to project <paramref name="vector"/> on.</param>
            <param name="result">The <see cref="T:Evergine.Mathematics.Vector4"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</param>
            <remarks>
            The <paramref name="result"/> vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.Project(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Projects a <see cref="T:Evergine.Mathematics.Vector4"/> onto another <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="vector">The <see cref="T:Evergine.Mathematics.Vector4"/> to project.</param>
            <param name="onVector">The <see cref="T:Evergine.Mathematics.Vector4"/> to project <paramref name="vector"/> on.</param>
            <returns>The <see cref="T:Evergine.Mathematics.Vector4"/> obtained by projecting <paramref name="vector"/> onto <paramref name="onVector"/>.</returns>
            <remarks>
            The returned vector is parallel to <paramref name="onVector"/>. The function will return a zero vector if <paramref name="onVector"/> is almost zero.
            </remarks>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_UnaryNegation(Evergine.Mathematics.Vector4)">
            <summary>
            Inverts values in the specified <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Addition(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the add sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Subtraction(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Subtracts a <see cref="T:Evergine.Mathematics.Vector4"/> from a <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the sub sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Multiply(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the mul sign.</param>
            <param name="value2">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Multiply(Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Multiply(System.Single,Evergine.Mathematics.Vector4)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
            <param name="value">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Division(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by the components of another <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the div sign.</param>
            <param name="value2">Divisor <see cref="T:Evergine.Mathematics.Vector4"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Division(Evergine.Mathematics.Vector4,System.Single)">
            <summary>
            Divides the components of a <see cref="T:Evergine.Mathematics.Vector4"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Evergine.Mathematics.Vector4"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Equality(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector4"/> instances are equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector4"/> instance on the left of the equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector4"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Mathematics.Vector4.op_Inequality(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4)">
            <summary>
            Compares whether two <see cref="T:Evergine.Mathematics.Vector4"/> instances are not equal.
            </summary>
            <param name="value1"><see cref="T:Evergine.Mathematics.Vector4"/> instance on the left of the not equal sign.</param>
            <param name="value2"><see cref="T:Evergine.Mathematics.Vector4"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Evergine.Mathematics.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component,
            2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
    </members>
</doc>
