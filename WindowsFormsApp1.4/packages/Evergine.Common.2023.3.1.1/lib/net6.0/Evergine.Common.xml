<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Evergine.Common</name>
    </assembly>
    <members>
        <member name="T:Evergine.Common.AdapterType">
            <summary>
            Specifies the type of adapter.
            </summary>
        </member>
        <member name="F:Evergine.Common.AdapterType.DirectX">
            <summary>
            Uses DirectX.
            </summary>
        </member>
        <member name="F:Evergine.Common.AdapterType.OpenGLES">
            <summary>
            User OpenGL ES.
            </summary>
        </member>
        <member name="F:Evergine.Common.AdapterType.OpenGL">
            <summary>
            Uses OpenGL.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.AssetType">
            <summary>
            Asset Type (Model, Material, Texture, etc..)
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Model">
            <summary>
            Model asset (ej .fbx ...)
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.SkinnedModel">
            <summary>
            The skinned model
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Material">
            <summary>
            Material asset (ej. wmat)
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Sound">
            <summary>
            Sound asset (ej. wav)
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Texture">
            <summary>
            Texture asset (ej. jpg, png ...)
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Cubemap">
            <summary>
            Cubemap asset
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Spritesheet">
            <summary>
            Sprite sheet asset
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.AssetType.Prefab">
            <summary>
            The prefab
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.Converters.FloatRadianToDegreeConverter">
            <summary>
            Radian to degree converter class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.FloatRadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The degrees.</returns>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.FloatRadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <returns>The radians.</returns>
        </member>
        <member name="T:Evergine.Common.Attributes.Converters.IConverter">
            <summary>
            Interface Converter Source - Destination.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.IConverter.Convert(System.Object)">
            <summary>
            Convert source object to destination object.
            </summary>
            <param name="value">source object.</param>
            <returns>destination object.</returns>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.IConverter.ConvertBack(System.Object)">
            <summary>
            Convert destionation object.
            </summary>
            <param name="value">destination object.</param>
            <returns>source object.</returns>
        </member>
        <member name="T:Evergine.Common.Attributes.Converters.Vector3RadianToDegreeConverter">
            <summary>
            Randian to degree converter class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Convert from radians vector3 to degrees vector3.
            </summary>
            <param name="value">the radians.</param>
            <returns>the degrees.</returns>
        </member>
        <member name="M:Evergine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Convert from degrees vector3 to radians vector3.
            </summary>
            <param name="value">the degrees.</param>
            <returns>the radians.</returns>
        </member>
        <member name="T:Evergine.Common.Attributes.DontRenderProperty">
            <summary>
            Don't Render Property attribute.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.EvergineAssemblyUsage">
            <summary>
            The Evergine assembly usage type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.EvergineAssemblyUsage.Core">
            <summary>
            Evergine core assembly
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.EvergineAssemblyUsage.Extension">
            <summary>
            Extension assembly
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.EvergineAssemblyUsage.UserProject">
            <summary>
            Assembly from an user project
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.EvergineAssemblyUsage.Editor">
            <summary>
            Assembly for editor extensions
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.EvergineAssembly">
            <summary>
            Mark an assembly as a Evergine project assembly.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.EvergineAssembly.DefaultUsage">
            <summary>
            The usage when this attribute is used without specify a usage value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Attributes.EvergineAssembly.Type">
            <summary>
            Gets the assembly type.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.EvergineAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.EvergineAssembly"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.EvergineAssembly.#ctor(Evergine.Common.Attributes.EvergineAssemblyUsage)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.EvergineAssembly"/> class.
            </summary>
            <param name="type">The assembly usage.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.EvergineAssembly.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.EvergineAssembly"/> class.
            </summary>
            <param name="type">The assembly usage.</param>
        </member>
        <member name="T:Evergine.Common.Attributes.EvergineAttributeBase">
            <summary>
            Class that represents a Evergine attribute.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.EvergineMemberAttribute">
            <summary>
            Attribute that represents a member with specific settings.
            </summary>
        </member>
        <member name="P:Evergine.Common.Attributes.EvergineMemberAttribute.Order">
            <summary>
            Gets the order of the member.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.EvergineMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.EvergineMemberAttribute"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.EvergineMemberAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.EvergineMemberAttribute"/> class.
            </summary>
            <param name="order">The member order in the serialized structure.</param>
        </member>
        <member name="T:Evergine.Common.Attributes.IgnoreEvergineAttribute">
            <summary>
            Attribute class that represents a member of a class that shouldn't be serialized.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.MonoPInvokeCallbackAttribute">
            <summary>
            Necessary for AOT ports of Mono.
            </summary>
        </member>
        <member name="P:Evergine.Common.Attributes.MonoPInvokeCallbackAttribute.DelegateType">
            <summary>
            Gets or sets the type of the delegate.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.MonoPInvokeCallbackAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.MonoPInvokeCallbackAttribute"/> class.
            </summary>
            <param name="t">The delegate type.</param>
        </member>
        <member name="T:Evergine.Common.Attributes.NameKey">
            <summary>
            Attribute indicating a name key.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.RefreshEntityRequired">
            <summary>
            Refresh entity required components attribute.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RefreshEntityRequired.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RefreshEntityRequired" /> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPosition">
            <summary>
            The render position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPosition.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPosition.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPosition.End">
            <summary>
            The ends
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderProperty">
            <summary>
            Render property attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.ConverterType">
            <summary>
            Converter instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.RenderPosition">
            <summary>
            The render position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.Tag">
            <summary>
            The tag.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.AttachToTag">
            <summary>
            The attach to tag.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.Mask">
            <summary>
            The mask.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.AttachToValue">
            <summary>
            The attach to object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.Tooltip">
            <summary>
            Information about the property when pointer is over of it.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.CustomPropertyName">
            <summary>
            Custom property name.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.ShowConditionFunction">
            <summary>
            The property is shown if the contition is true.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderProperty.DefaultValue">
            <summary>
            The default value. Optional.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderProperty" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderProperty.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderProperty" /> class.
            </summary>
            <param name="converterType">the converter type.</param>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPropertyAsFInput">
            <summary>
            Render Property As Float Input attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsFInput.MinLimit">
            <summary>
            Minimun value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsFInput.MaxLimit">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsFInput.DesiredChange">
            <summary>
            The desired value change. Zero for default behavior.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsFInput.DesiredLargeChange">
            <summary>
            The desired value large change. Zero for default behavior.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsFInput.AsSlider">
            <summary>
            Show the property as slider.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue).</param>
            <param name="defaultValue">default value (Default null).</param>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPropertyAsInput">
            <summary>
            Render Property As Input.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsInput.MinLimit">
            <summary>
            Minimun value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsInput.MaxLimit">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsInput.DesiredChange">
            <summary>
            The desired value change. Zero for default behavior.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsInput.DesiredLargeChange">
            <summary>
            The desired value large change. Zero for default behavior.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsInput.AsSlider">
            <summary>
            Show the property as slider.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue).</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default int.MinValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default int.MinValue).</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue).</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minLimit">Minimum value (Default float.MinValue).</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue).</param>
            <param name="defaultValue">default value (Default null).</param>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPropertyAsList">
            <summary>
            Render Property As List Attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.IsItemEditable">
            <summary>
            Gets or sets a value indicating whether this list item  is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.UseNameKey">
            <summary>
            Value indicating whether the list has a key index.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.IsReorderable">
            <summary>
            Gets or sets a value indicating whether the list is reorderable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.ItemsToSelect">
            <summary>
            Gets the available items to insert.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.AddItemAction">
            <summary>
            Optional method called (after) when a new item is added.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.RemoveItemAction">
            <summary>
            Optional method called (after) when a new item is removed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.ShowOrder">
            <summary>
            If the order of the elements must be visible.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.Legend">
            <summary>
            The legend of the widget.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.CanDeleteItem">
            <summary>
            The property name of the item telling whether the item can be deleted or not.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsList.SelectItemTitle">
            <summary>
            The text that will show in the select item title (Only in case there are items to select).
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsList.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsList"/> class.
            </summary>
            <param name="isItemEditable">If the items must be editable.</param>
            <param name="isReorderable">If the list is reorderable.</param>
            <param name="useNameKey">If the list use a key.</param>
            <param name="showOrder">If the list must show the element index.</param>
            <param name="legend"> The text to be presented in the legend area.</param>
            <param name="selectItemTitle">The text showing in the item selector.</param>
            <param name="itemsToSelect">Method name of the items to select.</param>
            <param name="canDeleteItem">Method name of every item, telling wheter it can be deleted.</param>
            <param name="onAddedItemAction">Optional method called (after) when a new item is added.</param>
            <param name="onRemovedItemAction">Optional method called (after) when a new item is removed.</param>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPropertyAsTextBox">
            <summary>
            Render Property As TextBox input.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsTextBox" /> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input">
            <summary>
            Render Property As Float Input attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsVector2Input.MinX">
            <summary>
            Minimun X.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsVector2Input.MinY">
            <summary>
            Minimum Y.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsVector2Input.MaxX">
            <summary>
            Maximum X.
            </summary>
        </member>
        <member name="F:Evergine.Common.Attributes.RenderPropertyAsVector2Input.MaxY">
            <summary>
            Maximum Y.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X.</param>
            <param name="minY">Minimum Y.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X.</param>
            <param name="minY">Minimum Y.</param>
            <param name="maxX">Maximum X.</param>
            <param name="maxY">Maximum Y.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minX">Minimum X.</param>
            <param name="minY">Minimum Y.</param>
        </member>
        <member name="M:Evergine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type.</param>
            <param name="minX">Minimum X.</param>
            <param name="minY">Minimum Y.</param>
            <param name="maxX">Maximum X.</param>
            <param name="maxY">Maximum Y.</param>
        </member>
        <member name="T:Evergine.Common.Audio.AudioBuffer">
            <summary>
            The Audio Buffer class.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.Id">
            <inheritdoc />
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.ReaderVersion">
            <inheritdoc />
        </member>
        <member name="E:Evergine.Common.Audio.AudioBuffer.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.Dependencies">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.State">
            <summary>
            Gets the audio buffer State.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.Length">
            <summary>
            Gets the length of this buffer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.Format">
            <summary>
            Gets the wave format of this buffer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.Duration">
            <summary>
            Gets the duration of this buffer data according to the <see cref="P:Evergine.Common.Audio.AudioBuffer.Format"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBuffer.SampleCount">
            <summary>
            Gets the number of samples contained inside the buffer according to the <see cref="P:Evergine.Common.Audio.AudioBuffer.Format"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.FillAsync(System.IO.Stream,System.Int32,Evergine.Common.Audio.WaveFormat)">
            <summary>
            Asynchronously reads the bytes from the specified stream and writes them to audio buffer, using a specified buffer size.
            </summary>
            <param name="stream">The stream from which the contents will be copied.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is
            <c>81920</c>.</param>
            <param name="format">The format of the wave data.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.Fill(System.IO.Stream,System.Int32,Evergine.Common.Audio.WaveFormat)">
            <summary>
            Reads the bytes from the specified stream and writes them to audio buffer.
            </summary>
            <param name="stream">The stream from which the contents will be copied.</param>
            <param name="byteCount">Number of bytes to copy.</param>
            <param name="format">The format of the wave data.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.Fill``1(``0[],System.Int32,System.Int32,Evergine.Common.Audio.WaveFormat)">
            <summary>
            Reads the data from the specified buffer and writes them to audio buffer.
            </summary>
            <typeparam name="TBuffer">Type of a data to write.</typeparam>
            <param name="buffer">The array of <typeparamref name="TBuffer"/> data to write.</param>
            <param name="offset">The offset in the array to read from.</param>
            <param name="count">The number of <typeparamref name="TBuffer"/> element to write to the memory location.</param>
            <param name="format">The format of the wave data.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.InternalFillAsync(System.IO.Stream,System.Int32)">
            <summary>
            Fills the audio buffer with a specific stream.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="bufferSize">The buffer size.</param>
            <returns>Awaitable task of the operation.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.InternalFill(System.IO.Stream,System.Int32)">
            <summary>
            Fills the audio buffer with a specific stream.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="bufferSize">The buffer size.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.InternalFill``1(``0[],System.Int32,System.Int32)">
            <summary>
            Fills the audio buffer with a specific buffer.
            </summary>
            <typeparam name="TBuffer">The type of the buffer data.</typeparam>
            <param name="buffer">The source buffer.</param>
            <param name="offset">The source offset.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.CheckBufferState">
            <summary>
            Checks the buffer state.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.UpdateProperties(System.Int32,Evergine.Common.Audio.WaveFormat)">
            <summary>
            Updates the buffer properties.
            </summary>
            <param name="bufferSize">The new buffer size.</param>
            <param name="format">The new wave format.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.Invalidate(Evergine.Common.ILoadable)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBuffer.ReleaseUnusedMemory">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Audio.AudioBufferEventArgs">
            <summary>
            Provides data for <see cref="T:Evergine.Common.Audio.AudioBuffer"/> related events.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioBufferEventArgs.Buffer">
            <summary>
            Gets the buffer associated with the event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioBufferEventArgs.#ctor(Evergine.Common.Audio.AudioBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.AudioBufferEventArgs" /> class.
            </summary>
            <param name="buffer">The buffer associated with the event.</param>
        </member>
        <member name="T:Evergine.Common.Audio.AudioBufferStates">
            <summary>
            Describes the possible values of the property <see cref="P:Evergine.Common.Audio.AudioBuffer.State"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.AudioBufferStates.Unused">
            <summary>
             The buffer is not included in any queue for any <see cref="T:Evergine.Common.Audio.AudioSource"/>.
             In particular, the buffer is neither pending nor current for any source.
             The buffer can be disposed or changed at this time.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.AudioBufferStates.Pending">
            <summary>
            There is at least one <see cref="T:Evergine.Common.Audio.AudioSource"/> for which the buffer has been queued.
            The buffer cannot be disposed or changed at this time.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.AudioBufferStates.Disposed">
            <summary>
            The buffer has been disposed and wave data removed from memory.
            The buffer cannot be changed or enqueued in a <see cref="T:Evergine.Common.Audio.AudioSource"/> at this time.
            </summary>
        </member>
        <member name="T:Evergine.Common.Audio.AudioDevice">
            <summary>
            Represents a audio output device.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioDevice.MasterVolume">
            <summary>
            Gets or sets the global audio volume. Default value is <c>1.0f</c>.
            </summary>
            <remarks>
            Volume is ranging from 0.0f (silence) to 1.0f (full volume). Values beyond those limits are clamped.
            </remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioDevice.DefaultListener">
            <summary>
            Gets the default listener used by <see cref="M:Evergine.Common.Audio.AudioSource.Apply3D(Evergine.Common.Audio.AudioEmitter)"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.AudioDevice"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioDevice.SetMasterVolume(System.Single)">
            <summary>
            Sets the master volume of the device.
            </summary>
            <param name="volume">The new volume.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioDevice.CreateAudioSource(Evergine.Common.Audio.WaveFormat)">
            <summary>
            Create a new <see cref="T:Evergine.Common.Audio.AudioSource"/>.
            </summary>
            <param name="format">The format of the audio source.</param>
            <returns>A new <see cref="T:Evergine.Common.Audio.AudioSource"/> instance.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioDevice.CreateAudioBuffer">
            <summary>
            Creates an audio buffer.
            </summary>
            <returns>The result AudioBuffer object.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioDevice.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Evergine.Common.Audio.AudioEmitter">
            <summary>
            Represents a 3D audio emitter in the 3D world.
            This object, used in combination with an <see cref="T:Evergine.Common.Audio.AudioListener"/>, can simulate 3D audio localization
            effects for a given sound.
            For more details take a look at the <see cref="M:Evergine.Common.Audio.AudioSource.Apply3D(Evergine.Common.Audio.AudioEmitter)"/> function.
            </summary>
            <seealso cref="M:Evergine.Common.Audio.AudioSource.Apply3D(Evergine.Common.Audio.AudioEmitter)"/>
            <seealso cref="T:Evergine.Common.Audio.AudioListener"/>
        </member>
        <member name="F:Evergine.Common.Audio.AudioEmitter.WorldTransform">
            <summary>
            The world transform of the sound emitter in the 3D world.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.AudioEmitter.Velocity">
            <summary>
            The sound emitter velocity in the 3D world.
            </summary>
            <remarks>This is only used to calculate the doppler effect on the sound effect.</remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioEmitter.DistanceScaleFactor">
            <summary>
            Gets or sets the distance scale factor of the emitter.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioEmitter.ConeInnerAngle">
            <summary>
            Gets or sets the inner cone angle in radians. This value must be within <c>0.0f</c> to <see cref="F:Evergine.Mathematics.MathHelper.TwoPi"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioEmitter.ConeOuterAngle">
            <summary>
            Gets or sets the outer cone angle in radians. This value must be within <see cref="P:Evergine.Common.Audio.AudioEmitter.ConeInnerAngle"/> to <see cref="F:Evergine.Mathematics.MathHelper.TwoPi"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioEmitter.ConeOuterVolume">
            <summary>
            Gets or sets the volume scaler on/beyond outer cone. This value must be within <c>0.0f</c> to <c>1.0f</c>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.AudioEmitter"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Audio.AudioListener">
            <summary>
            Class representing an audio listener.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioListener.WorldTransform">
            <summary>
            Gets or sets the world transform of the sound listener in the 3D world.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioListener.Velocity">
            <summary>
            Gets or sets the sound listener velocity in the 3D world.
            </summary>
            <remarks>This is only used to calculate the Doppler effect on the sound effect.</remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioListener.DopplerFactor">
            <summary>
            Gets or sets the Doppler effect factor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.AudioListener"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioListener.UpdateWorldTransform(Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Updates the world transform of this listener.
            </summary>
            <param name="worldTransform">The new world transform matrix.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioListener.UpdateVelocity(Evergine.Mathematics.Vector3@)">
            <summary>
            Updates the velocity of this listener.
            </summary>
            <param name="velocity">The new velocity.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioListener.UpdateDopplerFactor(System.Single)">
            <summary>
            Updates the Doppler factor of this listener.
            </summary>
            <param name="dopplerFactor">The new Doppler factor.</param>
        </member>
        <member name="T:Evergine.Common.Audio.AudioSource">
            <summary>
            The audio source class.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.Volume">
            <summary>
            Gets or sets the global volume at which the sound is played. Default value is <c>1.0f</c>.
            </summary>
            <remarks>
            Volume is ranging from 0.0f (silence) to 1.0f (full volume). Values beyond those limits are clamped.
            </remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.Pan">
            <summary>
            Gets or sets the sound balance between left and right speaker. Default value is <c>0.0f</c>.
            </summary>
            <remarks>
            Panning is ranging from <c>-1.0f</c> (full left) to <c>1.0f</c> (full right). <c>0.0f</c> is centered.
            Values beyond this range are clamped.
            </remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.Pitch">
            <summary>
            Gets or sets the pitch of the sound, might conflict with spatialized sound spatialization.
            Default value is <c>1.0f</c>.
            </summary>
            <remarks>
            Pitch is ranging from <see cref="F:Evergine.Mathematics.MathHelper.Epsilon"/> to <see cref="F:System.Single.MaxValue"/>. Values beyond this
            range are clamped.
            Each reduction by 50 percent equals a pitch shift of -12 semitones(one octave reduction).
            Each doubling equals a pitch shift of 12 semitones(one octave increase).
            </remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.IsLooped">
            <summary>
            Gets or sets a value indicating whether the sound should loop from beginning when it reaches the end.
            Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.State">
            <summary>
            Gets the state (playing, paused, or stopped) of the sound.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.PlayPosition">
            <summary>
            Gets the playback position. If <see cref="P:Evergine.Common.Audio.AudioSource.IsLooped"/> is active, the value will loop back to zero on
            every loop.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.QueuePlayPosition">
            <summary>
            Gets or sets the playback position relative to the beginning of the <see cref="P:Evergine.Common.Audio.AudioSource.PendingBuffers"/> queue.
            </summary>
            <remarks>
            QueuePosition is ranging from <see cref="F:System.TimeSpan.Zero"/> to <see cref="P:Evergine.Common.Audio.AudioSource.QueueDuration"/>. Values beyond this
            range are clamped.
            When the audio source is in <see cref="F:Evergine.Common.Media.PlayState.Stopped"/> state and the value is higher than
            <see cref="F:System.TimeSpan.Zero"/> the state will change to <see cref="F:Evergine.Common.Media.PlayState.Paused"/>.
            The position is relative to the beginning of all the queued buffers for the source, and any queued buffers
            traversed by a set value will raise the event <see cref="E:Evergine.Common.Audio.AudioSource.BufferEnded"/>.
            </remarks>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.QueueDuration">
            <summary>
            Gets the total duration of the buffers that are currently queued in this audio source.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.CurrentBuffer">
            <summary>
            Gets the buffer at the beginning of the pending queue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.PendingBuffers">
            <summary>
            Gets a enumerable that contains the buffers that are pending to be processed by this audio source
            including <see cref="P:Evergine.Common.Audio.AudioSource.CurrentBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.AudioSource.PendingBuffersCount">
            <summary>
            Gets the number of buffers that are pending to be processed by this audio source
            including <see cref="P:Evergine.Common.Audio.AudioSource.CurrentBuffer"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Audio.AudioSource.BufferStarted">
            <summary>
            Occurs when this audio source is about to start processing an enqueued <see cref="T:Evergine.Common.Audio.AudioBuffer"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Audio.AudioSource.BufferEnded">
            <summary>
            Occurs when this audio source finishes processing an enqueued <see cref="T:Evergine.Common.Audio.AudioBuffer"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.#ctor(Evergine.Common.Audio.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.AudioSource"/> class.
            </summary>
            <param name="format">The format of the audio data.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.SetVolume(System.Single)">
            <summary>
            Sets the volume of this source.
            </summary>
            <param name="volume">The new volume.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.SetPan(System.Single)">
            <summary>
            Sets the pan of this audio source.
            </summary>
            <param name="pan">The new pan.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.SetPitch(System.Single)">
            <summary>
            Sets the new pitch of this source.
            </summary>
            <param name="pitch">The new pitch.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.SetLoop(System.Boolean)">
            <summary>
            Sets a new value to indicate if the source is looped.
            </summary>
            <param name="isLooped">If the source must loop the sound.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.IsPlaying">
            <summary>
            Checks if the source is playing.
            </summary>
            <returns>True if the audio source is playing. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.IsPaused">
            <summary>
            Checks if this audio source is paused.
            </summary>
            <returns>True if this audio source is pause. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.GetPlayPosition">
            <summary>
            Gets the play TimeSpan position of the audio.
            </summary>
            <returns>A TimeSpan with the current play position.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.GetQueuePlayPosition">
            <summary>
            Gets the Queue Play TimeSpan Position.
            </summary>
            <returns>A TimeSpan with the Queue Play Position.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.SetQueuePlayPosition(System.TimeSpan)">
            <summary>
            Sets the queue play TimeSpan position.
            </summary>
            <param name="position">The new TimeSpan position.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.InternalEnqueueBuffer(Evergine.Common.Audio.AudioBuffer,System.Nullable{System.Int32}@)">
            <summary>
            Enqueues an audio buffer into the source.
            </summary>
            <param name="buffer">The buffer to be enqueued.</param>
            <param name="index">Output variable containing the buffer index.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.InternalPlay">
            <summary>
            Plays the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.InternalPause">
            <summary>
            Pauses the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.InternalStop">
            <summary>
            Stops the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.Apply3D(Evergine.Common.Audio.AudioEmitter)">
            <summary>
            Sets the ·D properties of the Audio Source according to an audio emitter.
            </summary>
            <param name="emitter">The audio emitter.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.FlushBuffers">
            <summary>
            Flush all the audio buffers.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.EnqueueBuffer(Evergine.Common.Audio.AudioBuffer)">
            <summary>
            Enqueues an audio buffer.
            </summary>
            <param name="buffer">The audio buffer.</param>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.Play">
            <summary>
            Plays the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.Pause">
            <summary>
            Pauses the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.Stop">
            <summary>
            Stops the audio source.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.OnBufferStart">
            <summary>
            Method called when an audio buffer starts playing.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.AudioSource.OnBufferProccessed(System.Boolean)">
            <summary>
            Method called when an audio buffer has being processed.
            </summary>
            <param name="isReused">If the buffer must be reused.</param>
        </member>
        <member name="T:Evergine.Common.Audio.PlayRange">
            <summary>
            Describes the range of audio samples to play, in time unit.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.PlayRange.Start">
            <summary>
            The Stating time.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.PlayRange.Length">
            <summary>
            The Length of the audio extract to play.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.PlayRange.End">
            <summary>
            Gets the Ending time.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.PlayRange.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.PlayRange" /> structure.
            </summary>
            <param name="start">The Stating time.</param>
            <param name="length">The Length of the audio extract to play.</param>
        </member>
        <member name="M:Evergine.Common.Audio.PlayRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Audio.PlayRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Audio.PlayRange.op_Equality(Evergine.Common.Audio.PlayRange,Evergine.Common.Audio.PlayRange)">
            <summary>
            Compares whether two <see cref="T:Evergine.Common.Audio.PlayRange"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:Evergine.Common.Audio.PlayRange"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:Evergine.Common.Audio.PlayRange"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.PlayRange.op_Inequality(Evergine.Common.Audio.PlayRange,Evergine.Common.Audio.PlayRange)">
            <summary>
            Compares whether two <see cref="T:Evergine.Common.Audio.PlayRange"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:Evergine.Common.Audio.PlayRange"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:Evergine.Common.Audio.PlayRange"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Evergine.Common.Audio.WaveFormat">
            <summary>
            The format of the wave sound.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormat.Channels">
            <summary>
            Gets the number of channels of audio wave data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormat.SampleRate">
            <summary>
            Gets the sample rate, in Hertz (Hz), of audio wave data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormat.Encoding">
            <summary>
            Gets the encoding used for the audio data samples.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormat.hashCode">
            <summary>
            Wave format hash code.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.WaveFormat.BitsPerSample">
            <summary>
            Gets the size in bits for one sample.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.WaveFormat.BlockAlign">
            <summary>
            Gets the number of bytes for one sample including all channels.
            </summary>
        </member>
        <member name="P:Evergine.Common.Audio.WaveFormat.AverageBytesPerSecond">
            <summary>
            Gets the average number of bytes used per second.
            </summary>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.#ctor(System.Boolean,System.Int32,Evergine.Common.Audio.WaveFormatEncodings)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Audio.WaveFormat"/> class.
            </summary>
            <param name="isMono">If sound data is in mono (one channel) or stereo (two channels).</param>
            <param name="sampleRate">Sample rate, in Hertz (Hz), of audio data. It must be between 8,000 Hz and 48,000 Hz.</param>
            <param name="encoding">The encoding used for the audio data samples.</param>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.GetAlignedByteSize(System.Int32)">
            <summary>
            Calculates a valid size that is block-aligned according to the <see cref="P:Evergine.Common.Audio.WaveFormat.BlockAlign"/> value.
            In case that the size is not block-aligned, this method will discard the latest partial block.
            </summary>
            <param name="sizeInBytes">The size in bytes of a wave buffer.</param>
            <returns>The block-aligned size.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.IsValidSampleRate(System.Int32)">
            <summary>
            Returns a value indicating whether a sample rate value is valid.
            </summary>
            <param name="sampleRate">The sample rate, in Hertz (Hz).</param>
            <returns><c>true</c> is the sample rate value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.IsAlignedByteSize(System.Int32)">
            <summary>
            Gets a value indicating whether the specified byte size is block-aligned.
            </summary>
            <param name="sizeInBytes">The size in bytes of a wave buffer.</param>
            <returns><c>true</c> if the specified byte size is block-aligned; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertDurationToByteSize(System.TimeSpan)">
            <summary>
            Gets the size in bytes of a wave buffer equivalent to the specified duration.
            </summary>
            <param name="duration">The duration as a <see cref="T:System.TimeSpan"/>.</param>
            <returns>The size of a wave buffer equivalent to the specified duration.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertSampleCountToByteSize(System.Int32)">
            <summary>
            Gets the size in bytes of a wave buffer equivalent to the specified number of samples.
            </summary>
            <param name="samplesCount">The number of samples.</param>
            <returns>The size of a wave buffer equivalent to the specified number of samples.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertByteSizeToDuration(System.Int32)">
            <summary>
            Gets the duration equivalent to the specified size in bytes of a wave buffer.
            </summary>
            <param name="sizeInBytes">The size in bytes of a wave buffer.</param>
            <returns>The duration as a <see cref="T:System.TimeSpan"/> equivalent to the specified size in bytes.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertSampleCountToDuration(System.Int32)">
            <summary>
            Gets the duration equivalent to the specified number of samples.
            </summary>
            <param name="samplesCount">The number of samples.</param>
            <returns>The duration as a <see cref="T:System.TimeSpan"/> equivalent to the specified number of samples.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertDurationToSampleCount(System.TimeSpan)">
            <summary>
            Gets the number of samples of a wave buffer equivalent to the specified duration.
            </summary>
            <param name="duration">The duration as a <see cref="T:System.TimeSpan"/>.</param>
            <returns>The number of samples of a wave buffer equivalent to the specified duration.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ConvertByteSizeToSampleCount(System.Int32)">
            <summary>
            Gets the size in bytes of a wave buffer equivalent to the specified number of samples.
            </summary>
            <param name="sizeInBytes">The size in bytes of a wave buffer.</param>
            <returns>The number of samples of a wave buffer equivalent to the specified duration.</returns>
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Audio.WaveFormat.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Evergine.Common.Audio.WaveFormatEncodings">
            <summary>
            Describes the possible values of the property <see cref="F:Evergine.Common.Audio.WaveFormat.Encoding"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormatEncodings.PCM8">
            <summary>
            PCM 8 bits unsigned.
            </summary>
        </member>
        <member name="F:Evergine.Common.Audio.WaveFormatEncodings.PCM16">
            <summary>
            PCM 16 bits signed.
            </summary>
        </member>
        <member name="T:Evergine.Common.BinaryReaderExtensions">
            <summary>
            Extension functions for reading Evergine data types with a BinaryReader.
            </summary>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadMatrix4x4(System.IO.BinaryReader)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadMatrix4x4(System.IO.BinaryReader,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadMatrix4x4(System.IO.BinaryReader,System.Byte[],System.Int32,Evergine.Mathematics.Matrix4x4@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="data">The data.</param>
            <param name="startIndex">The start index.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadPoint(System.IO.BinaryReader)">
            <summary>
            Reads the Point.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector2(System.IO.BinaryReader)">
            <summary>
            Reads the vector2.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector2(System.IO.BinaryReader,Evergine.Mathematics.Vector2@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads the vector3.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector3(System.IO.BinaryReader,Evergine.Mathematics.Vector3@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Reads the vector4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVector4(System.IO.BinaryReader,Evergine.Mathematics.Vector4@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadQuaternion(System.IO.BinaryReader)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadQuaternion(System.IO.BinaryReader,Evergine.Mathematics.Quaternion@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="q">The output quaternion.</param>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadRectangle(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadRectangleF(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadByte4(System.IO.BinaryReader)">
            <summary>
            Reads the byte4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadVertexAttributes(System.IO.BinaryReader)">
            <summary>
            Reads the vertex attributes of a binary reader stream.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The vertex attribute dictionary.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadNullableBoundingBox(System.IO.BinaryReader)">
            <summary>
            Reads a nullable bounding box from a binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The read nullable bounding box.</returns>
        </member>
        <member name="M:Evergine.Common.BinaryReaderExtensions.ReadBoundingBox(System.IO.BinaryReader)">
            <summary>
            Reads a BoundingBox from the Binary Reader.
            </summary>
            <param name="reader">The Binary Reader.</param>
            <returns>A BoundingBox object.</returns>
        </member>
        <member name="T:Evergine.Common.BinaryWriterExtensions">
            <summary>
            Extension functions for writing Evergine data types with a BinaryWriter.
            </summary>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Writes the matrix.
            </summary>
            <param name="writer">The writer.</param>
            <param name="m">The matrix.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Point)">
            <summary>
            Writes the Point.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector2.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Vector2)">
            <summary>
            Writes the vector2.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector2.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Vector3)">
            <summary>
            Writes the vector3.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector3.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Vector4)">
            <summary>
            Writes the vector4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector4.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Byte4)">
            <summary>
            Writes the byte4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="b">The byte.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Rectangle)">
            <summary>
            Writes the rectangle.
            </summary>
            <param name="writer">The writer.</param>
            <param name="r">The rectangle.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.RectangleF)">
            <summary>
            Writes the rectangle.
            </summary>
            <param name="writer">The writer.</param>
            <param name="r">The rectangle.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.Quaternion)">
            <summary>
            Writes the vector4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="q">The quaternion.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Writes a vertex attributes dictionary to the binary stream.
            </summary>
            <param name="writer">The Binary Writer.</param>
            <param name="vertexAttributes">The vertex attribute dictionary.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{Evergine.Mathematics.BoundingBox})">
            <summary>
            Writes a nullable Bounding Box into a Binary Writer.
            </summary>
            <param name="writer">The Binary Writer.</param>
            <param name="boundingBox">The nullable Bounding Box to be written.</param>
        </member>
        <member name="M:Evergine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,Evergine.Mathematics.BoundingBox)">
            <summary>
            Writes a Bounding Box into a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter object.</param>
            <param name="boundingBox">The Bounding Box.</param>
        </member>
        <member name="T:Evergine.Common.Collections.CheckDictionary`2">
            <summary>
            Dictionary implementation to detect when the collection is modified.
            </summary>
            <typeparam name="K">Key type.</typeparam>
            <typeparam name="V">Value type.</typeparam>
        </member>
        <member name="F:Evergine.Common.Collections.CheckDictionary`2.internalDictionary">
            <summary>
            The internal dictionary.
            </summary>
        </member>
        <member name="F:Evergine.Common.Collections.CheckDictionary`2.changed">
            <summary>
            Indicate if the collection is changed.
            </summary>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:Evergine.Common.Collections.CheckDictionary`2" /> is changed.
            </summary>
            <value>
              <c>true</c> if changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.CheckDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if was suscessfully removed.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if value was retourned.</returns>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The value.
            </value>
            <param name="key">The key.</param>
            <returns>the value.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Evergine.Common.Collections.CheckDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>was removed.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>the enumerator.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Evergine.Common.Collections.FastList`1">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> implementation that let you access to the internal array.
            </summary>
            <typeparam name="T">The elements type.</typeparam>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.FastList`1"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.FastList`1"/> class.
            </summary>
            <param name="collection">The item collection.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.FastList`1"/> class.
            </summary>
            <param name="capacity">The list capacity.</param>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Capacity">
            <summary>
            Gets or sets the list capacity.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.IncreaseCapacity(System.Int32)">
            <summary>
            Increases this list capacity.
            </summary>
            <param name="amount">The amount to be increased.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Clear(System.Boolean)">
            <summary>
            Clears this list with a fast-clear option.
            </summary>
            <param name="fastClear">if set to <c>true</c> this method only resets the count elements but doesn't clear items referenced already stored in the list.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Resize(System.Int32,System.Boolean)">
            <summary>
            Resizes this list.
            </summary>
            <param name="newSize">The new list size.</param>
            <param name="fastClear">If we don't want to clear the inner array when resizing.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of elements to the list.
            </summary>
            <param name="collection">The collection to be added.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.AsReadOnly">
            <summary>
            Returns the list as a ReadOnlyCollection.
            </summary>
            <returns>The ReadOnlyCollection object containing the items of the list.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.BinarySearch(`0)">
            <summary>
            Searches an item through the binary search method.
            </summary>
            <param name="item">The object to search for.</param>
            <returns> The index of the specified value in the specified array, if value is found; otherwise, a negative number.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches an item through the binary search method.
            </summary>
            <param name="item">The object to search for.</param>
            <param name="comparer">The comparer implementation to use when comparing elements. -or- null to use the comparable implementation of each element.</param>
            <returns> The index of the specified value in the specified array, if value is found; otherwise, a negative number.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches an item through the binary search method.
            </summary>
            <param name="index">The starting index of the range to search.</param>
            <param name="count"> The length of the range to search.</param>
            <param name="item">The object to search for.</param>
            <param name="comparer">The comparer implementation to use when comparing elements. -or- null to use the comparable implementation of each element.</param>
            <returns> The index of the specified value in the specified array, if value is found; otherwise, a negative number.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.CopyTo(`0[])">
            <summary>
            Copies the elements of this list to another array.
            </summary>
            <param name="array">The destination array where the elements of this list will be copied.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the elements of this list to another array.
            </summary>
            <param name="index">The starting index of this list.</param>
            <param name="array">The destination array where the elements will be copied.</param>
            <param name="arrayIndex">The starting index of the destination array.</param>
            <param name="count">The amount of elements to be copied.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.EnsureCapacity(System.Int32)">
            <summary>
            Increases the list capacity ensuring the minimum size provided.
            </summary>
            <param name="min">The minimum capacity.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Exists(System.Predicate{`0})">
            <summary>
            Checks if the list contains an item that satisfies the predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>True if exists an element that matches the predicate. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first item of this list that matches a predicate.
            </summary>
            <param name="match">The predicate to match.</param>
            <returns>The item that matches the predicate. The default value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all the items of this list that matches a predicate.
            </summary>
            <param name="match">The predicate to match.</param>
            <returns>A FastList containing the items that matches the predicate.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the first item of the list that matches the predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the match item if exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item of the list that matches the predicate.
            </summary>
            <param name="startIndex">The start index to search.</param>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the match item if exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item of the list that matches the predicate.
            </summary>
            <param name="startIndex">The start index to search.</param>
            <param name="count">The number of elements to search.</param>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the match item if exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last item of this list that matches the predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>The last item that matches the predicate.Its default value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last item of this list that matches the predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the last item that matches the predicate if it exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item of this list that matches the predicate.
            </summary>
            <param name="startIndex">The start index for the search.</param>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the last item that matches the predicate if it exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item of this list that matches the predicate.
            </summary>
            <param name="startIndex">The start index for the search.</param>
            <param name="count">The number of items for the search.</param>
            <param name="match">The predicate to be match.</param>
            <returns>The index of the last item that matches the predicate if it exists. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each item of this list.
            </summary>
            <param name="action">The action to be executed per element.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.GetEnumerator">
            <summary>
            Gets the list enumerator.
            </summary>
            <returns>The list enumerator.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets another FastList containing a range of the elements of this list.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The range size.</param>
            <returns>A FastList containing a range of the elements of this list.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.IndexOf(`0,System.Int32)">
            <summary>
            Gets the index of an item in this list, starting in a specified index.
            </summary>
            <param name="item">The item to search.</param>
            <param name="index">The start index.</param>
            <returns>The index of the item if it exists in the list. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the index of an item in this list, starting in a specified index.
            </summary>
            <param name="item">The item to search.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the item if it exists in the list. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of items in this list in a specified index.
            </summary>
            <param name="index">The index of the insertion.</param>
            <param name="collection">The item collection.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.LastIndexOf(`0)">
            <summary>
            Gets the last index of an item in this list.
            </summary>
            <param name="item">The item to be searched.</param>
            <returns>The index of the last item if it exists in the list. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Gets the last index of an item in this list.
            </summary>
            <param name="item">The item to be searched.</param>
            <param name="index">The start index.</param>
            <returns>The index of the last item if it exists in the list. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the last index of an item in this list.
            </summary>
            <param name="item">The item to be searched.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of elements of the search.</param>
            <returns>The index of the last item if it exists in the list. A negative value otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all the elements of this array that match the predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>The number of items removed.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items of this list.
            </summary>
            <param name="index">The start index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Reverse">
            <summary>
            Reverses this list.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses a range of the list.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The number of elements for the operation.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list.
            </summary>
            <param name="comparer">The comparer used for the operation.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list.
            </summary>
            <param name="index">The start item of the sort range.</param>
            <param name="count">The number of items of the range to be sorted.</param>
            <param name="comparer">The comparer used for the sorting.</param>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.ToArray">
            <summary>
            Gets the list as array.
            </summary>
            <returns>A new array containing all the items of the list.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.TrimExcess">
            <summary>
            Adjusts the capacity of the list to its current size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Checks if all the items of the list match a predicate.
            </summary>
            <param name="match">The predicate to be match.</param>
            <returns>True if all the items of the list matches the predicate. False otherwise.</returns>
        </member>
        <member name="T:Evergine.Common.Collections.FastList`1.Enumerator">
            <summary>
            A struct that represents the enumerator of the list.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Collections.FastList`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Collections.FastList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Collections.PriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information.
            </summary>
            <typeparam name="T">The values in the queue.  Must implement the PriorityQueueNode interface.</typeparam>
        </member>
        <member name="F:Evergine.Common.Collections.PriorityQueue`1.numNodes">
            <summary>
            The num nodes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Collections.PriorityQueue`1.nodes">
            <summary>
            The nodes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Collections.PriorityQueue`1.numNodesEverEnqueued">
            <summary>
            The num nodes ever enqueued.
            </summary>
        </member>
        <member name="P:Evergine.Common.Collections.PriorityQueue`1.Count">
            <summary>
            Gets the number of nodes.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Evergine.Common.Collections.PriorityQueue`1.First">
            <summary>
            Gets the head of the queue, without removing it (use Dequeue() for that).  O(1).
            </summary>
            <value>
            Returns the head of the queue, without removing it (use Dequeue() for that).  O(1).
            </value>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.PriorityQueue`1"/> class.
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause an exception).</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Enqueues the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with highest priority; ties are broken by order of insertion), and returns it.  O(log n).
            </summary>
            <returns>The dequeued node.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  Note that the node does not need to be the head of the queue.  O(log n).
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified node].
            </summary>
            <param name="node">The node.</param>
            <returns>True if contains the node, false in other case.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.Swap(`0,`0)">
            <summary>
            Swaps the specified node1.
            </summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.CascadeUp(`0)">
            <summary>
            Cascades up.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.CascadeDown(`0)">
            <summary>
            Cascades down.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false.
            </summary>
            <param name="higher">The higher.</param>
            <param name="lower">The lower.</param>
            <returns>True if t has higher priority than lower.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.PriorityQueue`1.OnNodeUpdated(`0)">
            <summary>
            Called when [node updated].
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:Evergine.Common.Collections.SimpleCache`2">
            <summary>
            Simple cache implementation.
            </summary>
            <typeparam name="TKey">The cache key.</typeparam>
            <typeparam name="KValue">The cache value.</typeparam>
        </member>
        <member name="P:Evergine.Common.Collections.SimpleCache`2.Expiration">
            <summary>
            Gets or sets the cache expiration time.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.SimpleCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Collections.SimpleCache`2"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Collections.SimpleCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache.
            </summary>
            <param name="key">The key to search.</param>
            <param name="createFunction">The Create function in case the element is not in the cache.</param>
            <returns>The key item. If it doesn't exist in the cache, a new one is created and added.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.SimpleCache`2.GetOrAdd``1(`0,``0,System.Func{`0,``0,`1})">
            <summary>
            Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache.
            </summary>
            <param name="key">The key to search.</param>
            <param name="context">The create function context.</param>
            <param name="createFunction">The Create function in case the element is not in the cache.</param>
            <returns>The key item. If it doesn't exist in the cache, a new one is created and added.</returns>
            <typeparam name="TContext">The createFunction context.</typeparam>
        </member>
        <member name="M:Evergine.Common.Collections.SimpleCache`2.UpdateOrAdd(`0,System.Func{`1})">
            <summary>
            Gets an item of the cache from its key. And if it doesn't exist, a it adds one to the cache.
            </summary>
            <param name="key">The key to search.</param>
            <param name="createFunction">The Create function in case the element is not in the cache.</param>
            <returns>The key item. If it doesn't exist in the cache, a new one is created and added.</returns>
        </member>
        <member name="M:Evergine.Common.Collections.SimpleCache`2.CheckConsistency(System.Action{`0})">
            <summary>
            Checks cache consistency. Remove unused elements.
            </summary>
            <param name="itemRemovedFunc">Method invoked when an item is removed.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.PriorityQueueNode">
            <summary>
            Priority Queue Node class.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.PriorityQueueNode.Priority">
            <summary>
            Gets or sets the Priority to insert this node at.  Must be set BEFORE adding a node to the queue.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Evergine.Common.Helpers.PriorityQueueNode.InsertionIndex">
            <summary>
            Gets or sets the  order the node was inserted in.
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the insertion.
            </value>
        </member>
        <member name="P:Evergine.Common.Helpers.PriorityQueueNode.QueueIndex">
            <summary>
            Gets or sets the current position in the queue.
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the queue.
            </value>
        </member>
        <member name="T:Evergine.Common.Helpers.BasicCache`2">
            <summary>
            A simple cache implementation.
            </summary>
            <typeparam name="T">The item key type of the cache.</typeparam>
            <typeparam name="K">The item value type of the cache.</typeparam>
        </member>
        <member name="T:Evergine.Common.Helpers.BasicCache`2.NewItemInstanceDelegate">
            <summary>
            Delegate that crates a new instance by its key.
            </summary>
            <param name="key">The key.</param>
            <returns>The new item instance.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.BasicCache`2.BasicCacheItem`1">
            <summary>
            A simple cache item.
            </summary>
            <typeparam name="S">The type of the value.</typeparam>
        </member>
        <member name="F:Evergine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Expiration">
            <summary>
            The expiration time.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.BasicCache`2.items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.BasicCache`2.itemsToRemove">
            <summary>
            The items to remove.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.BasicCache`2.ExpirationTime">
            <summary>
            Gets or sets the expiration time.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.BasicCache`2.NewInstanceHandle">
            <summary>
            A handle to build a new instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.BasicCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.BasicCache`2" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.BasicCache`2.GetItem(`0)">
            <summary>
            Gets an item.
            </summary>
            <param name="key">The item key.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.BasicCache`2.AddItem(`0,`1)">
            <summary>
            Add an item to the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.BasicCache`2.Check">
            <summary>
            Check if the cache items has expired.
            </summary>
        </member>
        <member name="T:Evergine.Common.Helpers.BoolEventArgs">
            <summary>
            Event arguments for a bool value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.BoolEventArgs.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:Evergine.Common.Helpers.BoolEventArgs"/> is value.
            </summary>
            <value>
              <c>true</c> if value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Helpers.BoolEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.BoolEventArgs"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:Evergine.Common.Helpers.CmdParser">
            <summary>
            Parses command line input.
            </summary>
        </member>
        <member name="T:Evergine.Common.Helpers.CmdParser.Option">
            <summary>
            A unit of significant text on the command line.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.CmdParser.Option.Raw">
            <summary>
            Gets or Sets Raw argument text.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.CmdParser.Option.Name">
            <summary>
            Gets argument uppercase text.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.CmdParser.Option.Help">
            <summary>
            Gets the documentation senstence.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.CmdParser.Option.CallBack">
            <summary>
            Gets the function pointer will process this option.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.CmdParser.Option.#ctor(System.String,System.Func{System.String,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.CmdParser.Option"/> class.
            </summary>
            <param name="name">The argument name.</param>
            <param name="callback">The callback used to process it.</param>
            <param name="help">The help sentence.</param>
        </member>
        <member name="P:Evergine.Common.Helpers.CmdParser.ErrorMessage">
            <summary>
            Gets the error text message.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.CmdParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.CmdParser"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.CmdParser.Parse(System.String[])">
            <summary>
            Parse the argument inside the commandline.
            </summary>
            <param name="args">The argument array.</param>
            <returns>True if the parser was successful.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.CmdParser.AddOption(Evergine.Common.Helpers.CmdParser.Option)">
            <summary>
            Add a new option to the parser.
            </summary>
            <param name="newOption">Option to add.</param>
            <returns>This instace object.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.CmdParser.ShowHelp(System.String)">
            <summary>
            Show the documentation on console.
            </summary>
            <param name="msg">The error message.</param>
            <returns>True whether everything ok.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.ColorHelpers">
            <summary>
            The control utility methods.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.GammaToLinear(System.Single)">
            <summary>
            Convert a gamma color to linear space.
            </summary>
            <param name="gamma">The gamma color.</param>
            <returns>The converted linear color.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.GammaToLinear(Evergine.Mathematics.Vector3@,Evergine.Mathematics.Vector3@)">
            <summary>
            Convert a gamma color to linear space.
            </summary>
            <param name="gamma">The gamma color.</param>
            <param name="linear">The converted linear color.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.GammaToLinear(Evergine.Mathematics.Vector4,Evergine.Mathematics.Vector4@)">
            <summary>
            Convert a gamma color to linear space.
            </summary>
            <param name="gamma">The gamma color.</param>
            <param name="linear">The converted linear color.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.GammaToLinear(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Convert a gamma color to linear space.
            </summary>
            <param name="gamma">The gamma color.</param>
            <param name="linear">The converted linear color.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.LinearToGamma(System.Single)">
            <summary>
            Convert a linear color to gamma  space.
            </summary>
            <param name="linear">The color in linear space.</param>
            <returns>The converted gamma color.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.LinearToGamma(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3@)">
            <summary>
            Convert a linear color to gamma space.
            </summary>
            <param name="linear">The color in linear space.</param>
            <param name="gamma">The converted gamma color.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.LinearToGamma(Evergine.Mathematics.Vector4@,Evergine.Mathematics.Vector4@)">
            <summary>
            Convert a linear color to gamma space.
            </summary>
            <param name="linear">The color in linear space.</param>
            <param name="gamma">The converted gamma color.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ColorHelpers.CCTToLinear(System.Single,Evergine.Mathematics.Vector3@)">
            <summary>
            Convert from correlated color temperature to linear color space.
            </summary>
            <param name="temperature">The color temperature in K (Kelvin).</param>
            <param name="linear">The converted linear color.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.DynamicBVHNode`1">
            <summary>
            A BVH node.
            </summary>
            <typeparam name="T">The node type.</typeparam>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.AABB">
            <summary>
            Enlarged AABB.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.UserData">
            <summary>
            The custom user data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.ParentOrNext">
            <summary>
            The parent node index if this node is in use.
            If it is a free node, it refers to the next free node.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.Child1">
            <summary>
            The first child.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.Child2">
            <summary>
            The second child.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVHNode`1.Height">
            <summary>
            leaf = 0, free node = -1.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVHNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this node is a leaf.
            </summary>
            <returns>If is a leaf.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.DynamicBVH`1">
            <summary>
            A Dynamic Binary Volume Hierarchy implementation.
            </summary>
            <typeparam name="T">The object contained.</typeparam>
            <remarks>
            Inspired in Box2D b2DynamicTree https://github.com/erincatto/Box2D/blob/master/Box2D/Collision/b2DynamicTree.h.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVH`1.NullNode">
            <summary>
            The null node index.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVH`1.Nodes">
            <summary>
            The node array.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.DynamicBVH`1.NodeCount">
            <summary>
            The node count.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.DynamicBVH`1.Height">
            <summary>
            Gets the height of the binary tree in O(N) time. Should not be called often.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.DynamicBVH`1.MaxBalance">
            <summary>
            Gets the maximum balance of an node in the tree. The balance is the difference in height of the two children of a node.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.DynamicBVH`1.AreaRatio">
            <summary>
            Gets the ratio of the sum of the node areas to the root area.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.DynamicBVH`1"/> class.
            </summary>
            <param name="defaultNodeCapacity">The default node capacity.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.CreateProxy(Evergine.Mathematics.BoundingBox@,`0)">
            <summary>
            Create a proxy. Provide a tight fitting AABB and a userData pointer.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="userData">The userData.</param>
            <returns>The proxy Id.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.DestroyProxy(System.Int32)">
            <summary>
            Destroy a proxy. This asserts if the id is invalid.
            </summary>
            <param name="proxyId">The proxy Id.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.MoveProxy(System.Int32,Evergine.Mathematics.BoundingBox@,Evergine.Mathematics.Vector3@)">
            <summary>
            Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            </summary>
            <param name="proxyId">The proxy Id.</param>
            <param name="aabb">The AABB.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.GetUserData(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <param name="proxyId">The proxy Id.</param>
            <returns>the proxy user data or null if the id is invalid.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.GetFatAABB(System.Int32,Evergine.Mathematics.BoundingBox@)">
            <summary>
            Get the fat AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy Id.</param>
            <param name="fatAABB">Output value for fat AABB.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.DynamicBVH`1.QueryDelegate">
            <summary>
            The query delegate function.
            </summary>
            <param name="proxyId">The proxy Id.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.DynamicBVH`1.QueryDelegate`1">
            <summary>
            The query delegate function.
            </summary>
            <param name="proxyId">The proxy Id.</param>
            <param name="aabb">The AABB to test.</param>
            <param name="result">The partial result for the query.</param>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The query result.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.Query``1(Evergine.Common.Helpers.DynamicBVH{`0}.QueryDelegate{``0},Evergine.Mathematics.BoundingBox@)">
            <summary>
            Query an AABB for overlapping proxies.
            The callback class is called for each proxy that overlaps the supplied AABB.</summary>
            <param name="callback">A callback function called on every hit.</param>
            <param name="aabb">The AABB to test.</param>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The query result.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.RayCast(Evergine.Common.Helpers.DynamicBVH{`0}.QueryDelegate,Evergine.Mathematics.Ray@)">
            <summary>
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.Validate">
            <summary>
            Validate this tree. For testing.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.RebuildBottomUp">
            <summary>
            Build an optimal tree. Very expensive. For testing.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.ShiftOrigin(Evergine.Mathematics.Vector3@)">
            <summary>
            Shift the world origin. Useful for large worlds. The shift formula is: position -= newOrigin.
            </summary>
            <param name="newOrigin">The new origin with respect to the old origin.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.DynamicBVH`1.AllocateNode">
            <summary>
            Allocate a node from the pool. Grow the pool if necessary.
            </summary>
            <returns>The node Id.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.EnumExtensions">
            <summary>
            Extentions for enums.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            A FX 3.5 way to mimic the FX4 "HasFlag" method.
            </summary>
            <param name="variable">The tested enum.</param>
            <param name="value">The value to test.</param>
            <returns>True if the flag is set. Otherwise false.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.GenericEventArgs`1">
            <summary>
            Event argument for a generic value.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
        </member>
        <member name="P:Evergine.Common.Helpers.GenericEventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.GenericEventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.IGetNativePointers">
            <summary>
            Interface that represents an object that could provide some native pointers.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.IGetNativePointers.AvailablePointerKeys">
            <summary>
            Gets a list of all available keys to obtain native pointers.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.IGetNativePointers.GetNativePointer(System.String,System.IntPtr@)">
            <summary>
            Obtain a native pointer of this graphics context using the given key.
            </summary>
            <param name="pointerKey">The pointer key.</param>
            <param name="nativePointer">The native pointer.</param>
            <returns>True if there are an available pointer with this key.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.IntEventArgs">
            <summary>
            Event args for an integer value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.IntEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.IntEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.IntEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.ExecutionState">
            <summary>
            The executon state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.ExecutionState.NonInitialized">
            <summary>
            Non Initialized State
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.ExecutionState.Running">
            <summary>
            Running State
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.ExecutionState.Paused">
            <summary>
            Paused State
            </summary>
        </member>
        <member name="T:Evergine.Common.Helpers.IPausable">
            <summary>
            Interface for pausable objects.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.IPausable.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="M:Evergine.Common.Helpers.IPausable.Initialize">
            <summary>
            Initialize the object.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.IPausable.Pause">
            <summary>
            Pause the object.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.IPausable.Resume">
            <summary>
            Pause the object.
            </summary>
        </member>
        <member name="T:Evergine.Common.Helpers.IPooledObjectPolicy`1">
            <summary>
            Object creation policy.
            </summary>
            <typeparam name="T">The pooled object type.</typeparam>
        </member>
        <member name="M:Evergine.Common.Helpers.IPooledObjectPolicy`1.Create">
            <summary>
            Create a new pooled object.
            </summary>
            <returns>The pooled object.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.IPooledObjectPolicy`1.Return(`0)">
            <summary>
            Return pooled object.
            </summary>
            <param name="obj">The pooled object.</param>
            <returns>If all is ok.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.ObjectPool`1">
            <summary>
            Object pool collection.
            </summary>
            <typeparam name="T">The pool object type.</typeparam>
        </member>
        <member name="P:Evergine.Common.Helpers.ObjectPool`1.Size">
            <summary>
            Gets the pool size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.ObjectPool`1.#ctor(Evergine.Common.Helpers.IPooledObjectPolicy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.ObjectPool`1"/> class.
            </summary>
            <param name="policy">The object policy.</param>
        </member>
        <member name="M:Evergine.Common.Helpers.ObjectPool`1.Clear">
            <summary>
            Clear the pooled objects.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.ObjectPool`1.Get">
            <summary>
            Get a pooled object.
            </summary>
            <returns>A pooled object.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ObjectPool`1.Return(`0)">
            <summary>
            Return a pooled object.
            </summary>
            <param name="element">The object to release.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.PropertyInfoExtensions">
            <summary>
            Reflection extensions.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.PropertyInfoExtensions.GetValueGetter(System.Reflection.PropertyInfo)">
            <summary>
            Get the expression of a value getter for a property. Compile the expression to execute or combine it with other expressions.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>The value property getter.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.PropertyInfoExtensions.GetValueSetter(System.Reflection.PropertyInfo)">
            <summary>
            Get the expression of a value setter for a property. Compile the expression to execute or combine it with other expressions.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>The value property setter.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.ReflectionHelper">
            <summary>
            Helper methods for reflection.
            </summary>
        </member>
        <member name="F:Evergine.Common.Helpers.ReflectionHelper.castablePrimitiveTypes">
            <summary>
            List of castable primitive types by each primitive type.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is enum.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type" /> is a enum type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)">
            <summary>
            Determines whether the specified type is an interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a enum type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a value type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Type" /> is a generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a generic type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a generic type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a generic type definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is one of the primitive types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the second specified type can be assigned to the first specified type instance.
            </summary>
            <param name="first">The first type.</param>
            <param name="second">The type to check.</param>
            <returns>
            <c>true</c> if the first specified type can be assigned from the second type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the second specified type can be casted to the first specified type instance.
            </summary>
            <param name="first">The first type.</param>
            <param name="second">The type to check.</param>
            <returns>
            <c>true</c> if the first specified type can be casted from the second type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if an attribute of the specified type is applied to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the member type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="obj">The member.</param>
            <returns>
            The type assembly.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The type assembly.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> name in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly"/> name in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member assembly.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)">
            <summary>
            Gets the type from which the current System.Type directly inherits.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:System.Type"/> from which the current System.Type directly inherits, or null
            if the current <see cref="T:System.Type"/> represents the System.Object class or an interface.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)">
            <summary>
            Returns a <see cref="T:System.Type"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:System.Type"/> object representing a generic type from which the current type can be constructed.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces.
            </summary>
            <param name="type">The type.</param>
            <returns>The interfaces.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)">
            <summary>
            Gets the name of the current member.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member type.
            </returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetSizeOf``1">
            <summary>
            Gets the size of the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The size of the specified type.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)">
            <summary>
            Gets the full name of the name of the specified type without assembly full name.
            </summary>
            <param name="type">The type.</param>
            <returns>The full name of the name without assembly full name.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Find the types that match the corresponding predicate.
            </summary>
            <param name="assembly">The target search assembly.</param>
            <param name="predicate">The predicate to filter types.</param>
            <returns>A collection of matching types.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.SizeEventArgs">
            <summary>
            Event args for a size value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.SizeEventArgs.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.SizeEventArgs.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.SizeEventArgs.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.SizeEventArgs"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The heigth.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.StringEventArgs">
            <summary>
            Event args for a string value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Helpers.StringEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.StringEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Helpers.StringEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Evergine.Common.Helpers.TimeSpanExtended">
            <summary>
            Extension methods for TimeSpan.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.Int32)">
            <summary>
            Divides the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.TimeSpan)">
            <summary>
            Divides the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.Int32)">
            <summary>
            Multiplies the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="multipler">The multipler.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.TimeSpan)">
            <summary>
            Multiplies the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.TypeExtensions">
            <summary>
            Extension methods for <c>Type</c>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeExtensions.GetSimpleAssemblyQualifiedName(System.Type)">
            <summary>
            Get assembly qualified name, but without the version and public token.
            </summary>
            <param name="type">Type to get name for.</param>
            <returns>Simple assembly qualified name. Example: <code>"MyAssembly.MyNamespace.MyClass, MyAssembly"</code></returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeExtensions.GetAllInstances``1(System.Reflection.Assembly,System.ValueTuple{System.Type,System.Object}[],System.String[])">
            <summary>
            Finds and instances the specified types in the given assembly, using the parameters for call to the constructor.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="assembly">The assembly to find the types.</param>
            <param name="constructorParameters">The parameters used to find a matching constructor.</param>
            <param name="typeNames">The type names.</param>
            <returns>The enumerable of instances.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.TypeInfoAllMemberExtensions">
            <summary>
            Extensions for TypeInfo.
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)">
            <summary>
            Get contructors of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the contructors.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)">
            <summary>
            Get events of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the events.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)">
            <summary>
            Get fields of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the fields.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)">
            <summary>
            Get members of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the members.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)">
            <summary>
            Get methods of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the methods.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)">
            <summary>
            Get nested types of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the nested types.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)">
            <summary>
            Get properties of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the properties.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.TypeInfoAllMemberExtensions.GetAll``1(System.Reflection.TypeInfo,System.Func{System.Reflection.TypeInfo,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Helper method to iterate the type and its base types.
            </summary>
            <typeparam name="T">The returned member type.</typeparam>
            <param name="typeInfo">The type info.</param>
            <param name="accessor">The func to get the members of the type.</param>
            <returns>The members.</returns>
        </member>
        <member name="T:Evergine.Common.Helpers.Utils">
            <summary>
            Extension methods and more ...
            </summary>
        </member>
        <member name="M:Evergine.Common.Helpers.Utils.CompareTo``1(``0[],``0[])">
            <summary>
            Compare an array with other array.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array1">Specifies the array1.</param>
            <param name="array2">Specifies the array2.</param>
            <returns>True whether the array1 and array2 are equals or not otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Helpers.Utils.DisposeAndNull``1(``0@)">
            <summary>
            Safely dispose a reference if not null, and set it to null after dispose.
            </summary>
            <typeparam name="T">The type of object to dispose.</typeparam>
            <param name="disposable">Object to dispose.</param>
            <remarks>
            The reference will be set to null after dispose.
            </remarks>
        </member>
        <member name="T:Evergine.Common.Curves.ColorCurve">
            <summary>
            Class that manages a color gradient.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.ColorCurve.Lerp(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves.
            </summary>
            <param name="value1">The value 1.</param>
            <param name="value2">The value 2.</param>
            <param name="amount">The lerp amount.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Evergine.Common.Curves.ColorCurve.CreateKey(System.Single,Evergine.Common.Graphics.Color)">
            <summary>
            Cretes a new key element.
            </summary>
            <param name="lerp">The lerp.</param>
            <param name="value">The value.</param>
            <returns>The keyframe.</returns>
        </member>
        <member name="T:Evergine.Common.Curves.ColorKeyframe">
            <summary>
            Repersents a color keyframe of a curve.
            </summary>
        </member>
        <member name="T:Evergine.Common.Curves.CurveKeyframe`1">
            <summary>
            The curve key class.
            </summary>
            <typeparam name="T">The type of the keyframe.</typeparam>
        </member>
        <member name="M:Evergine.Common.Curves.CurveKeyframe`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Curves.CurveKeyframe`1"/> class.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.CurveKeyframe`1.Lerp">
            <summary>
            The key lerp.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.CurveKeyframe`1.Value">
            <summary>
            The key value.
            </summary>
        </member>
        <member name="T:Evergine.Common.Curves.Curve`2">
            <summary>
            The curve class.
            </summary>
            <typeparam name="T">The type of the curve.</typeparam>
            <typeparam name="K">The type of the keyframe.</typeparam>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.keyframes">
            <summary>
            The keyframes of the curve.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.cachedValues">
            <summary>
            The cached values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.cacheDirty">
            <summary>
            If the cache is dirty.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.isCached">
            <summary>
            If the.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.cacheSize">
            <summary>
            The cache size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.minLerp">
            <summary>
            Minimum lerp.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.maxLerp">
            <summary>
            Maximum lerp.
            </summary>
        </member>
        <member name="F:Evergine.Common.Curves.Curve`2.rangeLerp">
            <summary>
            The lerp range of the curve.
            </summary>
        </member>
        <member name="P:Evergine.Common.Curves.Curve`2.Keyframes">
            <summary>
            Gets the key frames.
            </summary>
        </member>
        <member name="P:Evergine.Common.Curves.Curve`2.HasValues">
            <summary>
            Gets a value indicating whether the curve has values.
            </summary>
        </member>
        <member name="P:Evergine.Common.Curves.Curve`2.IsCached">
            <summary>
            Gets or sets a value indicating whether the curve is cached or not.
            </summary>
        </member>
        <member name="P:Evergine.Common.Curves.Curve`2.CacheSize">
            <summary>
            Gets or sets the cache size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Curves.Curve`2"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.AddKey(System.Single,`0)">
            <summary>
            Adds a key to the curve.
            </summary>
            <param name="lerp">The lerp.</param>
            <param name="value">The key value.</param>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.RemoveKey(`1)">
            <summary>
            Removes a key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.GetValue(System.Single)">
            <summary>
            Gets the value of the curve in a specific lerp.
            </summary>
            <param name="lerp">The lerp.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.GetCurveValue(System.Single)">
            <summary>
            Calculates the curve value in a specific lerp.
            </summary>
            <param name="lerp">The lerp.</param>
            <returns>The curve value.</returns>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.RefreshCache">
            <summary>
            Refreshes the cache.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.Lerp(`0,`0,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves.
            </summary>
            <param name="value1">The value 1.</param>
            <param name="value2">The value 2.</param>
            <param name="amount">The lerp amount.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Evergine.Common.Curves.Curve`2.CreateKey(System.Single,`0)">
            <summary>
            Cretes a new key element.
            </summary>
            <param name="lerp">The lerp.</param>
            <param name="value">The value.</param>
            <returns>The keyframe.</returns>
        </member>
        <member name="T:Evergine.Common.Curves.FloatCurve">
            <summary>
            The curve class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.FloatCurve.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Curves.FloatCurve"/> class.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Evergine.Common.Curves.FloatCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Curves.FloatCurve"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Curves.FloatCurve.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves.
            </summary>
            <param name="value1">The value 1.</param>
            <param name="value2">The value 2.</param>
            <param name="amount">The lerp amount.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Evergine.Common.Curves.FloatCurve.CreateKey(System.Single,System.Single)">
            <summary>
            Cretes a new key element.
            </summary>
            <param name="lerp">The lerp.</param>
            <param name="value">The value.</param>
            <returns>The keyframe.</returns>
        </member>
        <member name="T:Evergine.Common.Curves.FloatKeyframe">
            <summary>
            Repersents a float keyframe of a curve.
            </summary>
        </member>
        <member name="T:Evergine.Common.Dependencies.DependencyLinkTypes">
            <summary>
            Enum for the type of dependency links.
            </summary>
        </member>
        <member name="F:Evergine.Common.Dependencies.DependencyLinkTypes.AttachableObject">
            <summary>
            Attachable Objects.
            </summary>
        </member>
        <member name="F:Evergine.Common.Dependencies.DependencyLinkTypes.Loadable">
            <summary>
            Loadable objects.
            </summary>
        </member>
        <member name="F:Evergine.Common.Dependencies.DependencyLinkTypes.All">
            <summary>
            All types.
            </summary>
        </member>
        <member name="T:Evergine.Common.Dependencies.LoadableDependenciesManager">
            <summary>
            Manager to create dependencies between DependencyObjects and Loadables.
            </summary>
        </member>
        <member name="M:Evergine.Common.Dependencies.LoadableDependenciesManager.RegisterDelegateDependencyLink``1(Evergine.Common.IDependencyObject,``0,System.String,System.Object[])">
            <summary>
            Registers the delegate dependency link.
            </summary>
            <typeparam name="T">The type of target.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="updateMethodName">Name of the update method.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Evergine.Common.Dependencies.LoadableDependenciesManager.RegisterPropertyDependencyLink``1(Evergine.Common.IDependencyObject,System.String)">
            <summary>
            Registers the property dependency link.
            </summary>
            <typeparam name="T">The type of target.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The created dependency link.</returns>
        </member>
        <member name="M:Evergine.Common.Dependencies.LoadableDependenciesManager.UnregisterDelegateDependencyLink``1(Evergine.Common.IDependencyObject,``0,System.String,System.Object[])">
            <summary>
            Registers the delegate dependency link.
            </summary>
            <typeparam name="T">The type of target.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="updateMethodName">Name of the update method.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Evergine.Common.Dependencies.LoadableDependenciesManager.Unregister``1(``0)">
            <summary>
            Unregisters the dependencies of the specified loadable.
            </summary>
            <typeparam name="T">The type of target.</typeparam>
            <param name="loadable">The loadable.</param>
        </member>
        <member name="T:Evergine.Common.LoadableDependencyLink`1">
            <summary>
            Represents a dependency link between a <see cref="T:Evergine.Common.IDependencyObject"/> and a <see cref="T:Evergine.Common.ILoadable"/> that implements <see cref="T:Evergine.Common.IDependencyObject"/>.
            </summary>
            <typeparam name="T">The type of ILoadable.</typeparam>
            <seealso cref="T:Evergine.Common.IDependencyLink" />
        </member>
        <member name="P:Evergine.Common.LoadableDependencyLink`1.Type">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.LoadableDependencyLink`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:Evergine.Common.LoadableDependencyLink`1.#ctor(Evergine.Common.IDependencyObject,`0,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.LoadableDependencyLink`1" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Evergine.Common.LoadableDependencyLink`1.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.LoadableDependencyLink`1.SetTarget(`0)">
            <summary>
            Sets the target without invoke update method.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Evergine.Common.LoadableDependencyLink`1.Unregister(Evergine.Common.IDependencyObject)">
            <summary>
            Unregisters this instance in the dependency list of source and target.
            </summary>
            <param name="caller">The caller.</param>
        </member>
        <member name="M:Evergine.Common.LoadableDependencyLink`1.IsTheSameLink(Evergine.Common.IDependencyObject,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Determines whether this instance represents the link for the specified parameters.
            </summary>
            <param name="source">The source.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameters">The parameters.</param>
            <returns><c>true</c> if this instance represents the link for the parameters; otherwise, return <c>false</c>.</returns>
        </member>
        <member name="T:Evergine.Common.EvergineException">
            <summary>
            Represents errors that occur inside Evergine API.
            </summary>
        </member>
        <member name="M:Evergine.Common.EvergineException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.EvergineException"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.EvergineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.EvergineException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Evergine.Common.EvergineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.EvergineException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Evergine.Common.ExecutionMode">
            <summary>
            Specifies the execution mode of the application.
            </summary>
        </member>
        <member name="F:Evergine.Common.ExecutionMode.Standalone">
            <summary>
            This application is running as Standalone one (outside of Visual Editor).
            </summary>
        </member>
        <member name="F:Evergine.Common.ExecutionMode.Editor">
            <summary>
            The application is running inside Visual Editor.
            </summary>
        </member>
        <member name="F:Evergine.Common.ExecutionMode.EditorSimulation">
            <summary>
            The application is running inside Visual Editor on Simulation mode.
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.Battery.BaseBattery">
            <summary>
            Base class for cross battery.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BaseBattery.RemainingChargePercent">
            <summary>
            Gets the remaining battery charge percent.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BaseBattery.Status">
            <summary>
            Gets the current battery status.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BaseBattery.PowerSource">
            <summary>
            Gets the current power source.
            </summary>
        </member>
        <member name="E:Evergine.Common.Features.Battery.BaseBattery.BatteryChanged">
            <summary>
            Event that fires when battery status, level or power changes
            </summary>
        </member>
        <member name="M:Evergine.Common.Features.Battery.BaseBattery.IsBatteryChangedEventSubscribed">
            <summary>
            Whether the BatteryChanged event has subscribers or not.
            </summary>
            <returns>Whether the BatteryChanged event has subscribers.</returns>
        </member>
        <member name="M:Evergine.Common.Features.Battery.BaseBattery.OnBatteryChanged(Evergine.Common.Features.Battery.BatteryChangedEventArgs)">
            <summary>
            Event handler for battery changes.
            </summary>
            <param name="e">The arguments.</param>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BaseBattery.disposed">
            <summary>
            Whether the object was already disposed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Features.Battery.BaseBattery.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Evergine.Common.Features.Battery.BaseBattery"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Features.Battery.BaseBattery.Dispose">
            <summary>
            Dispose of class and parent classes.
            </summary>
        </member>
        <member name="M:Evergine.Common.Features.Battery.BaseBattery.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            <param name="disposing">Whether to dispose of unmanaged resources.</param>
        </member>
        <member name="T:Evergine.Common.Features.Battery.BatteryChangedEventArgs">
            <summary>
            Arguments to pass to event handlers.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BatteryChangedEventArgs.RemainingChargePercent">
            <summary>
            Gets or sets the remaining battery charge percent.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BatteryChangedEventArgs.Status">
            <summary>
            Gets or sets the current status of the battery.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.BatteryChangedEventArgs.PowerSource">
            <summary>
            Gets or sets the source of power.
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.Battery.BatteryStatus">
            <summary>
            Status of the battery.
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.Unknown">
            <summary>
            The battery is in an unknown state
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.Charging">
            <summary>
            The battery is plugged in and charging
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.Discharging">
            <summary>
            The battery is currently discharging
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.Full">
            <summary>
            The battery is completely full
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.NotCharging">
            <summary>
            The battery is neither charging nor discharging
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.BatteryStatus.NoBattery">
            <summary>
            The battery is not present
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.Battery.IBattery">
            <summary>
            Interface for battery.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.IBattery.RemainingChargePercent">
            <summary>
            Gets the remaining battery charge percent.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.IBattery.Status">
            <summary>
            Gets the current battery status.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.Battery.IBattery.PowerSource">
            <summary>
            Gets the current power source.
            </summary>
        </member>
        <member name="E:Evergine.Common.Features.Battery.IBattery.BatteryChanged">
            <summary>
            Event handler for battery changes
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.Battery.BatteryChangedEventHandler">
            <summary>
            Battery level changed event handler.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Evergine.Common.Features.Battery.PowerSource">
            <summary>
            Current power source.
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.PowerSource.None">
            <summary>
            No external power source
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.PowerSource.Ac">
            <summary>
            Charging from AC
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.PowerSource.Usb">
            <summary>
            Charging from USB
            </summary>
        </member>
        <member name="F:Evergine.Common.Features.Battery.PowerSource.Wireless">
            <summary>
            Charging with a wireless charger
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.IFeatures">
            <summary>
            Features interface.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.IFeatures.Vibrate">
            <summary>
            Gets the vibrate feature.
            </summary>
        </member>
        <member name="P:Evergine.Common.Features.IFeatures.Battery">
            <summary>
            Gets the battery feature.
            </summary>
        </member>
        <member name="T:Evergine.Common.Features.Vibrate.IVibrate">
            <summary>
            Interface for vibrate.
            </summary>
        </member>
        <member name="M:Evergine.Common.Features.Vibrate.IVibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time.
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate. 500ms is default.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.AddressMode">
            <summary>
            Specifies texture addressing mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.PointClamp">
            <summary>
            Point/nearest neighbor filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.PointWrap">
            <summary>
            Point/nearest neighbor filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.LinearClamp">
            <summary>
            Bilinear filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.LinearWrap">
            <summary>
            Bilinear filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.AnisotropicClamp">
            <summary>
            Anisotropic filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AddressMode.AnisotropicWrap">
            <summary>
            Anisotropic filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.AnisotropyLevel">
            <summary>
            Specifies the level of anisotropic filtering.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AnisotropyLevel.Aniso1x">
            <summary>
            1x anisotropic filtering.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.AnisotropyLevel.Aniso2x">
            <summary>
            2x anisotropic filtering.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ArrayHelpers">
            <summary>
            Class containing useful methods for manipulating arrays.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ArrayHelpers.EnsureCapacity``1(``0[]@,System.Int32)">
            <summary>
            Ensure that the array has the specified capacity. If it's not, resize the array size to the specified capacity.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array">The array.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ArrayHelpers.EnsureCapacityPo2``1(``0[]@,System.Int32)">
            <summary>
            Ensure that the array has the specified capacity. If it's not, resize the capacity to the next power of two value that contains the specified capacity.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array">The array.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ArrayHelpers.EnsureArraySize``1(``0[]@,System.Int32)">
            <summary>
            Ensure that the array length is equal that the specified size. If it's not, resize the array size to the specified capacity.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="array">The array.</param>
            <param name="size">The capacity.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ArrayHelpers.CopyArray``1(``0[])">
            <summary>
            Array copy.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="src">The source array.</param>
            <returns>The cloned array.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.BillboardType">
            <summary>
            Specifies a Billboard behavior.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BillboardType.PointOrientation">
            <summary>
            An object is orientated about a point to always face the camera.
            With this type of billboarding the object will always appear the same to the camera, however it will be affected by perspective.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BillboardType.Axial_Orientation">
            <summary>
            An object is rotated about an axis to face towards the camera.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Blend">
            <summary>
            Blend factors, which modulate values for the pixel shader and render target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.Zero">
            <summary>
            The data source is the color black (0, 0, 0, 0). No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.One">
            <summary>
            The data source is the color white (1, 1, 1, 1). No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.SourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseSourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.SourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseSourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.DestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseDestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.DestinationColor">
            <summary>
            The data source is color data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseDestinationColor">
            <summary>
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.SourceAlphaSaturate">
            <summary>
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.BlendFactor">
            <summary>
            The data source is the blend factor set with BlendStates. No pre-blend operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseBlendFactor">
            <summary>
            The data source is the blend factor set with SetBlendState. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.SecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseSecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.SecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Blend.InverseSecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendMode">
            <summary>
            Specifies alpha blending mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendMode.Opaque">
            <summary>
            No blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendMode.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendMode.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendMode.NonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendOperation">
            <summary>
            RGB or alpha blending operation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendOperation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendOperation.Substract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendOperation.ReverseSubstract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendOperation.Min">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendOperation.Max">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendStateDescription">
            <summary>
            Describes the blend state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.AlphaToCoverageEnable">
            <summary>
            Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.IndependentBlendEnable">
            <summary>
            Specifies whether to enable independent blending in simultaneous render targets. Set to TRUE to enable independent blending.
            If set to FALSE, only the RenderTarget[0] members are used; RenderTarget[1..7] are ignored.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget0">
            <summary>
            RenderTarget blend description 0 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget1">
            <summary>
            RenderTarget blend description 1 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget2">
            <summary>
            RenderTarget blend description 2 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget3">
            <summary>
            RenderTarget blend description 3 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget4">
            <summary>
            RenderTarget blend description 4 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget5">
            <summary>
            RenderTarget blend description 5 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget6">
            <summary>
            RenderTarget blend description 6 / 7.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateDescription.RenderTarget7">
            <summary>
            RenderTarget blend description 7 / 7.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.BlendStateDescription.Default">
            <summary>
            Gets default values for BlendStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.SetDefault">
            <summary>
            Default BlendStateDescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.Equals(Evergine.Common.Graphics.BlendStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.op_Equality(Evergine.Common.Graphics.BlendStateDescription,Evergine.Common.Graphics.BlendStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateDescription.op_Inequality(Evergine.Common.Graphics.BlendStateDescription,Evergine.Common.Graphics.BlendStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendStateRenderTargetDescription">
            <summary>
            Describes the blend state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.BlendEnable">
            <summary>
            Enable (or disable) blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.SourceBlendColor">
            <summary>
            This blend option specifies the operation to perform on the RGB value that the pixel shader outputs.
            The BlendOp member defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.DestinationBlendColor">
            <summary>
            This blend option specifies the operation to perform on the current RGB value in the render target.
            The BlendOp member defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.BlendOperationColor">
            <summary>
            This blend operation defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.SourceBlendAlpha">
            <summary>
            This blend option specifies the operation to perform on the alpha value that the pixel shader outputs.
            Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha
            and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.DestinationBlendAlpha">
            <summary>
            This blend option specifies the operation to perform on the current alpha value in the render target.
            Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha
            and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.BlendOperationAlpha">
            <summary>
            This blend operation defines how to combine the SrcBlendAlpha and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateRenderTargetDescription.ColorWriteChannels">
            <summary>
            A write mask.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.BlendStateRenderTargetDescription.Default">
            <summary>
            Gets default values for BlendStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.SetDefault">
            <summary>
            Default BlendStateDescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.Equals(Evergine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.op_Equality(Evergine.Common.Graphics.BlendStateRenderTargetDescription,Evergine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStateRenderTargetDescription.op_Inequality(Evergine.Common.Graphics.BlendStateRenderTargetDescription,Evergine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendStateEnum">
            <summary>
            The blend state default values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.Opaque">
            <summary>
            Not blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.AlphaNonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.Multiplicative">
            <summary>
            Multiplicative alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BlendStates">
            <summary>
            Default known values for <see cref="T:Evergine.Common.Graphics.BlendStateDescription"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStates.Opaque">
            <summary>
            Not blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStates.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStates.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStates.Multiplicative">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BlendStates.NonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BlendStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.BlendStates"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Bone">
            <summary>
            Represents a bone object from a model.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Bone.Index">
            <summary>
            Index of the bone in the hierarchy.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Bone.ParentIndex">
            <summary>
            Index of the parent bone; -1 if it is the root bone.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Bone.Name">
            <summary>
            Name of the bone.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Bone.LocalTransform">
            <summary>
            Local bone transform.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Bone.AbsoluteTransform">
            <summary>
            Absolute bone transform.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Bone.SetValues(System.Int32,System.Int32,System.String,Evergine.Mathematics.Matrix4x4,Evergine.Mathematics.Matrix4x4)">
            <summary>
            Private method for setting all values.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.Buffer">
            <summary>
            This class represent a buffer resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Buffer.updateCounter">
            <summary>
             Counter that represent every time that this buffer is updated.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Buffer.Description">
            <summary>
            Gets the buffer description.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Buffer.UpdateCounter">
            <summary>
            Gets the counter that counts every time that this buffer is updated.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Buffer.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Buffer.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.BufferDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Buffer"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="description">The buffer description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Buffer.#ctor(Evergine.Common.Graphics.GraphicsContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Buffer"/> class.
            </summary>
            <param name="context">The graphics context.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Buffer.Touch">
            <summary>
            Increment the update counter.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BufferDescription">
            <summary>
            Contains properties that describe the characteristics of a new buffer object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferDescription.SizeInBytes">
            <summary>
            Retrieves or sets the size of the new buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferDescription.Flags">
            <summary>
            Buffer flags describing buffer type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferDescription.CpuAccess">
            <summary>
            Specifies the types of CPU access allowed for this buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferDescription.Usage">
            <summary>
            Usage of this buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferDescription.StructureByteStride">
            <summary>
            The structure byte stride.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.#ctor(System.UInt32,Evergine.Common.Graphics.BufferFlags,Evergine.Common.Graphics.ResourceUsage,Evergine.Common.Graphics.ResourceCpuAccess,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">Size of the buffer in bytes.</param>
            <param name="flags">Buffer flags describing the buffer type.</param>
            <param name="cpuAccess">Describe the type of CPU access allowed for. </param>
            <param name="usage">Usage for this buffer.</param>
            <param name="structureByteStride">The structure byte stride.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.Equals(Evergine.Common.Graphics.BufferDescription)">
            <summary>
            Determines whether the specified parameter is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.op_Equality(Evergine.Common.Graphics.BufferDescription,Evergine.Common.Graphics.BufferDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.op_Inequality(Evergine.Common.Graphics.BufferDescription,Evergine.Common.Graphics.BufferDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferDescription.GetCpuAccessFromResourceUsage(Evergine.Common.Graphics.ResourceUsage)">
            <summary>
            Gets the cpu access flags from resource usage.
            </summary>
            <param name="usage">The usage.</param>
            <returns>The cpu access flags.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.BufferFlags">
            <summary>
            Identifies how to bing a buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.VertexBuffer">
            <summary>
            Bind a buffer as a vertex buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.IndexBuffer">
            <summary>
            Bind a buffer as an index buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.ConstantBuffer">
            <summary>
            Bind a buffer as a constant buffer to a shader stage. This flag may NOT be combined with any other bind flag.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.ShaderResource">
            <summary>
            Bind a buffer or texture to a shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.AccelerationStructure">
            <summary>
            Bind a buffer to used in a raytracing stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.RenderTarget">
            <summary>
            Bind a texture as a render target for the output-merger stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.UnorderedAccess">
            <summary>
            Bind an unordered access resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.BufferStructured">
            <summary>
             Enables a resource as a structured buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferFlags.IndirectBuffer">
            <summary>
            Indirect Buffer.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BufferParameterBinding">
            <summary>
            This class represents a parameter property of a constant buffer. Used un WebGL1 and OpenGL ES 2.0.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.BufferParameterBinding.BufferParameterType">
            <summary>
            The buffer parameter type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferParameterBinding.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferParameterBinding.CBufferSlot">
            <summary>
            The constant slot.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferParameterBinding.ParameterType">
            <summary>
            The buffer parameter type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferParameterBinding.Offset">
            <summary>
            Offset of this parameter in the buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.BufferParameterBinding.ArrayCount">
            <summary>
            In case of array, specify the parameter array size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.BufferParameterBinding.FromType(System.Type)">
            <summary>
            Gets the buffer parameter type from a string type.
            </summary>
            <param name="type">The type.</param>
            <returns>float.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ClearFlags">
            <summary>
            Specifies <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> clearing modes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearFlags.None">
            <summary>
            Do not clear.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearFlags.Target">
            <summary>
            Clear color target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearFlags.Depth">
            <summary>
            Clear depth target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearFlags.Stencil">
            <summary>
            Clear the stencil target
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearFlags.All">
            <summary>
            Clear color, depth and stencil target
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ClearValue">
            <summary>
            Structure specifying a clear value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearValue.ColorValues">
            <summary>
            The array of color clear value to use when clearing each color attachment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearValue.Depth">
            <summary>
            The depth clear value to use when clearing a depth/stencil attachment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearValue.Stencil">
            <summary>
            The stencil clear value to use when clearing a depth/stencil attachment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClearValue.Flags">
            <summary>
            Kind of clear to perfom <see cref="T:Evergine.Common.Graphics.ClearValue"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ClearValue.None">
            <summary>
            Gets default values for None clear value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ClearValue.Default">
            <summary>
            Gets default values for clear value.
            </summary>
            <remarks>That mean one ColorAttachment using CornFlowerBlue as clear color and depth = 1 / stencil = 0.</remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,Evergine.Common.Graphics.Color[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="colorValues">The array of values to clear the color attachments.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,Evergine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="colorValue">The value to clear the color attachment.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,Evergine.Mathematics.Vector4[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="colorValues">The array of values to clear the color attachments.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,System.Single,System.Byte,Evergine.Common.Graphics.Color[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="depth">The value to clear the depth buffer.</param>
            <param name="stencil">The value to clear the stencil buffer.</param>
            <param name="colorValues">The array of values to clear the color attachments.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,System.Single,System.Byte,Evergine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="depth">The value to clear the depth buffer.</param>
            <param name="stencil">The value to clear the stencil buffer.</param>
            <param name="colorValue">The value to clear the color attachment.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ClearValue.#ctor(Evergine.Common.Graphics.ClearFlags,System.Single,System.Byte,Evergine.Mathematics.Vector4[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ClearValue"/> struct.
            </summary>
            <param name="flags">Identify the textures to clear <see cref="T:Evergine.Common.Graphics.ClearFlags"/>.</param>
            <param name="depth">The value to clear the depth buffer.</param>
            <param name="stencil">The value to clear the stencil buffer.</param>
            <param name="colorValues">The array of values to clear the color attachments.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ClipDepth">
            <summary>
             Define the tipe of depth in the clip space depth.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClipDepth.ZeroToOne">
            <summary>
            The depth in clip space is in the [0, 1] range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ClipDepth.NegativeOneToOne">
            <summary>
            The depth in clip space is in the [-1, 1] range.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Color">
            <summary>
            Represents a 32-bit color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.aliceBlue">
            <summary>
            Alice blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.antiqueWhite">
            <summary>
            Antique white color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.blanchedAlmond">
            <summary>
            Blanched almond color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.blueViolet">
            <summary>
            Blue violet color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.burlyWood">
            <summary>
            Burly wood color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.cadetBlue">
            <summary>
            Cadet blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.cornflowerBlue">
            <summary>
            Cornflower blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkBlue">
            <summary>
            Dark blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkCyan">
            <summary>
            Dark cyan color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkGoldenrod">
            <summary>
            Dark goldenrod color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkGray">
            <summary>
            Dark gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkGreen">
            <summary>
            Dark green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkKhaki">
            <summary>
            Dark khaki color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkMagenta">
            <summary>
            Dark magenta color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkOliveGreen">
            <summary>
            Dark olive green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkOrange">
            <summary>
            Dark orange color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkOrchid">
            <summary>
            Dark orchid color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkRed">
            <summary>
            Dark red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkSalmon">
            <summary>
            Dark salmon color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkSeaGreen">
            <summary>
            Dark sea green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkSlateBlue">
            <summary>
            Dark slate blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkSlateGray">
            <summary>
            Dark slate gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkTurquoise">
            <summary>
            Dark turquoise color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.darkViolet">
            <summary>
            Dark violet color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.deepPink">
            <summary>
            Deep pink color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.deepSkyBlue">
            <summary>
            Deep sky blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.dimGray">
            <summary>
            Dim gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.dodgerBlue">
            <summary>
            Dodger blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.floralWhite">
            <summary>
            Floral white color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.forestGreen">
            <summary>
            Forest green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.ghostWhite">
            <summary>
            Ghost white color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.greenYellow">
            <summary>
            Green yellow color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.hotPink">
            <summary>
            Hot pink color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.indianRed">
            <summary>
            Indian red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lavenderBlush">
            <summary>
            Lavender blush color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lawnGreen">
            <summary>
            Lawn green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lemonChiffon">
            <summary>
            Lemon chiffon color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightBlue">
            <summary>
            Light blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightCoral">
            <summary>
            Light color color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightCyan">
            <summary>
            Light cyan color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightGoldenrodYellow">
            <summary>
            Light goldenrod yellow color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightGreen">
            <summary>
            Light green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightGray">
            <summary>
            Light gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightPink">
            <summary>
            Light pink color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightSalmon">
            <summary>
            Light salmon color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightSeaGreen">
            <summary>
            Light sea green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightSkyBlue">
            <summary>
            Light sky blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightSlateGray">
            <summary>
            Light slate gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightSteelBlue">
            <summary>
            Light steel blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lightYellow">
            <summary>
            Light yellow color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.limeGreen">
            <summary>
            Lime green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumAquamarine">
            <summary>
            Medium aquamarine color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumBlue">
            <summary>
            Medium blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumOrchid">
            <summary>
            Medium orchid color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumPurple">
            <summary>
            Medium purple color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumSeaGreen">
            <summary>
            Medium sea green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumSlateBlue">
            <summary>
            Medium slate blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumSpringGreen">
            <summary>
            Medium spring green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumTurquoise">
            <summary>
            Medium turquoise color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mediumVioletRed">
            <summary>
            Medium violet red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.midnightBlue">
            <summary>
            Midnight blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mintCream">
            <summary>
            Mint cream color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.mistyRose">
            <summary>
            Misty rose color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.moccasin">
            <summary>
            Mocassin color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.navajoWhite">
            <summary>
            Navajo white color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.navy">
            <summary>
            Pale navy color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.oldLace">
            <summary>
            Pale old lace color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.olive">
            <summary>
            Pale olive color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.oliveDrab">
            <summary>
            Pale olive drab color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.orange">
            <summary>
            Pale orange color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.orangeRed">
            <summary>
            Pale orange red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.orchid">
            <summary>
            Pale orchid color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.paleGoldenrod">
            <summary>
            Pale goldenrod color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.paleGreen">
            <summary>
            Pale green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.paleTurquoise">
            <summary>
            Pale turquoise color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.paleVioletRed">
            <summary>
            Pale violet red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.papayaWhip">
            <summary>
            Papaya whip color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.peachPuff">
            <summary>
            Peach puff color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.powderBlue">
            <summary>
            Powder blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.rosyBrown">
            <summary>
            Rosy brown color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.royalBlue">
            <summary>
            Royal blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.saddleBrown">
            <summary>
            Saddle brown color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.sandyBrown">
            <summary>
            Sandy brown color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.seaGreen">
            <summary>
            Sea green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.seaShell">
            <summary>
            Sea shell color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.skyBlue">
            <summary>
            Sky blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.slateBlue">
            <summary>
            Slate blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.slateGray">
            <summary>
            Slate gray color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.springGreen">
            <summary>
            Spring green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.steelBlue">
            <summary>
            Steel blue color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.white">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.whiteSmoke">
            <summary>
            White smoke color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.yellowGreen">
            <summary>
            Yellow green color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.R">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.G">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.B">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Color.A">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Transparent">
            <summary>
            Gets the transparent.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.AliceBlue">
            <summary>
            Gets the alice blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.AntiqueWhite">
            <summary>
            Gets the antique white.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Aqua">
            <summary>
            Gets the aqua.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Aquamarine">
            <summary>
            Gets the aquamarine.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Azure">
            <summary>
            Gets the azure.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Beige">
            <summary>
            Gets the beige.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Bisque">
            <summary>
            Gets the bisque.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Black">
            <summary>
            Gets the black.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.BlanchedAlmond">
            <summary>
            Gets the blanched almond.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Blue">
            <summary>
            Gets the blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.BlueViolet">
            <summary>
            Gets the blue violet.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Brown">
            <summary>
            Gets the brown.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.BurlyWood">
            <summary>
            Gets the burly wood.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.CadetBlue">
            <summary>
            Gets the cadet blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Chartreuse">
            <summary>
            Gets the chartreuse.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Chocolate">
            <summary>
            Gets the chocolate.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Coral">
            <summary>
            Gets the coral.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.CornflowerBlue">
            <summary>
            Gets the cornflower blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Cornsilk">
            <summary>
            Gets the cornsilk.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Crimson">
            <summary>
            Gets the crimson.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Cyan">
            <summary>
            Gets the cyan.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkBlue">
            <summary>
            Gets the dark blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkCyan">
            <summary>
            Gets the dark cyan.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkGoldenrod">
            <summary>
            Gets the dark goldenrod.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkGray">
            <summary>
            Gets the dark gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkGreen">
            <summary>
            Gets the dark green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkKhaki">
            <summary>
            Gets the dark khaki.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkMagenta">
            <summary>
            Gets the dark magenta.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkOliveGreen">
            <summary>
            Gets the dark olive green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkOrange">
            <summary>
            Gets the dark orange.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkOrchid">
            <summary>
            Gets the dark orchid.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkRed">
            <summary>
            Gets the dark red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkSalmon">
            <summary>
            Gets the dark salmon.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkSeaGreen">
            <summary>
            Gets the dark sea green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkSlateBlue">
            <summary>
            Gets the dark slate blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkSlateGray">
            <summary>
            Gets the dark slate gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkTurquoise">
            <summary>
            Gets the dark turquoise.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DarkViolet">
            <summary>
            Gets the dark violet.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DeepPink">
            <summary>
            Gets the deep pink.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DeepSkyBlue">
            <summary>
            Gets the deep sky blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DimGray">
            <summary>
            Gets the dim gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.DodgerBlue">
            <summary>
            Gets the dodger blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Firebrick">
            <summary>
            Gets the firebrick.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.FloralWhite">
            <summary>
            Gets the floral white.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.ForestGreen">
            <summary>
            Gets the forest green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Fuchsia">
            <summary>
            Gets the fuchsia.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Gainsboro">
            <summary>
            Gets the gainsboro.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.GhostWhite">
            <summary>
            Gets the ghost white.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Gold">
            <summary>
            Gets the gold.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Goldenrod">
            <summary>
            Gets the goldenrod.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Gray">
            <summary>
            Gets the gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Green">
            <summary>
            Gets the green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.GreenYellow">
            <summary>
            Gets the green yellow.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Honeydew">
            <summary>
            Gets the honeydew.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.HotPink">
            <summary>
            Gets the hot pink.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.IndianRed">
            <summary>
            Gets the indian red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Indigo">
            <summary>
            Gets the indigo.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Ivory">
            <summary>
            Gets the ivory.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Khaki">
            <summary>
            Gets the khaki.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Lavender">
            <summary>
            Gets the lavender.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LavenderBlush">
            <summary>
            Gets the lavender blush.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LawnGreen">
            <summary>
            Gets the lawn green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LemonChiffon">
            <summary>
            Gets the lemon chiffon.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightBlue">
            <summary>
            Gets the light blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightCoral">
            <summary>
            Gets the light coral.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightCyan">
            <summary>
            Gets the light cyan.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightGoldenrodYellow">
            <summary>
            Gets the light goldenrod yellow.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightGreen">
            <summary>
            Gets the light green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightGray">
            <summary>
            Gets the light gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightPink">
            <summary>
            Gets the light pink.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightSalmon">
            <summary>
            Gets the light salmon.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightSeaGreen">
            <summary>
            Gets the light sea green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightSkyBlue">
            <summary>
            Gets the light sky blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightSlateGray">
            <summary>
            Gets the light slate gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightSteelBlue">
            <summary>
            Gets the light steel blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LightYellow">
            <summary>
            Gets the light yellow.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Lime">
            <summary>
            Gets the lime.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.LimeGreen">
            <summary>
            Gets the lime green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Linen">
            <summary>
            Gets the linen.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Magenta">
            <summary>
            Gets the magenta.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Maroon">
            <summary>
            Gets the maroon.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumAquamarine">
            <summary>
            Gets the medium aquamarine.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumBlue">
            <summary>
            Gets the medium blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumOrchid">
            <summary>
            Gets the medium orchid.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumPurple">
            <summary>
            Gets the medium purple.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumSeaGreen">
            <summary>
            Gets the medium sea green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumSlateBlue">
            <summary>
            Gets the medium slate blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumSpringGreen">
            <summary>
            Gets the medium spring green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumTurquoise">
            <summary>
            Gets the medium turquoise.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MediumVioletRed">
            <summary>
            Gets the medium violet red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MidnightBlue">
            <summary>
            Gets the midnight blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MintCream">
            <summary>
            Gets the mint cream.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.MistyRose">
            <summary>
            Gets the misty rose.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Moccasin">
            <summary>
            Gets the moccasin.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.NavajoWhite">
            <summary>
            Gets the navajo white.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Navy">
            <summary>
            Gets the navy.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.OldLace">
            <summary>
            Gets the old lace.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Olive">
            <summary>
            Gets the olive.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.OliveDrab">
            <summary>
            Gets the olive drab.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Orange">
            <summary>
            Gets the orange.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.OrangeRed">
            <summary>
            Gets the orange red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Orchid">
            <summary>
            Gets the orchid.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PaleGoldenrod">
            <summary>
            Gets the pale goldenrod.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PaleGreen">
            <summary>
            Gets the pale green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PaleTurquoise">
            <summary>
            Gets the pale turquoise.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PaleVioletRed">
            <summary>
            Gets the pale violet red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PapayaWhip">
            <summary>
            Gets the papaya whip.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PeachPuff">
            <summary>
            Gets the peach puff.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Peru">
            <summary>
            Gets the peru.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Pink">
            <summary>
            Gets the pink.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Plum">
            <summary>
            Gets the plum.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.PowderBlue">
            <summary>
            Gets the powder blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Purple">
            <summary>
            Gets the purple.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Red">
            <summary>
            Gets the red.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.RosyBrown">
            <summary>
            Gets the rosy brown.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.RoyalBlue">
            <summary>
            Gets the royal blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SaddleBrown">
            <summary>
            Gets the saddle brown.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Salmon">
            <summary>
            Gets the salmon.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SandyBrown">
            <summary>
            Gets the sandy brown.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SeaGreen">
            <summary>
            Gets the sea green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SeaShell">
            <summary>
            Gets the sea shell.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Sienna">
            <summary>
            Gets the sienna.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Silver">
            <summary>
            Gets the silver.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SkyBlue">
            <summary>
            Gets the sky blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SlateBlue">
            <summary>
            Gets the slate blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SlateGray">
            <summary>
            Gets the slate gray.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Snow">
            <summary>
            Gets the snow.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SpringGreen">
            <summary>
            Gets the spring green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.SteelBlue">
            <summary>
            Gets the steel blue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Tan">
            <summary>
            Gets the tan.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Teal">
            <summary>
            Gets the teal.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Thistle">
            <summary>
            Gets the thistle.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Tomato">
            <summary>
            Gets the tomato.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Turquoise">
            <summary>
            Gets the turquoise.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Violet">
            <summary>
            Gets the violet.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Wheat">
            <summary>
            Gets the wheat.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.White">
            <summary>
            Gets the white.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.WhiteSmoke">
            <summary>
            Gets the white smoke.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Yellow">
            <summary>
            Gets the yellow.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.YellowGreen">
            <summary>
            Gets the yellow green.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Luminance">
            <summary>
            Gets the color luminance.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.InherentColor">
            <summary>
            Gets the inherent color, discarding its luminance.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Color.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <param name="index">Element index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="packetValue">The packet value.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone in the [0, 1] range.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component in the [0, 1] range.</param>
            <param name="g">Green component in the [0, 1] range.</param>
            <param name="b">Blue component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="hex">hexadecimal color code.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Addition(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Subtraction(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Multiply(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Multiply(Evergine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Multiply(System.Single,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="b">First color.</param>
            <param name="a">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Division(Evergine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Equality(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.op_Inequality(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.Lerp(Evergine.Common.Graphics.Color@,Evergine.Common.Graphics.Color@,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.Lerp(Evergine.Common.Graphics.Color,Evergine.Common.Graphics.Color,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.Equals(Evergine.Common.Graphics.Color)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToInt">
            <summary>
            To int value.
            </summary>
            <returns>Color as int value.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToHexColorCode">
            <summary>
            To the hexadecimal code.
            </summary>
            <returns>Color as hexadecimal code with the format #RGBA.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToVector3">
            <summary>
            Converts to a Vector3.
            </summary>
            <returns>Color as a Vector3.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToVector3(Evergine.Mathematics.Vector3@)">
            <summary>
            Converts to a Vector3.
            </summary>
            <param name="vector">Color as a Vector3.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromVector3(Evergine.Mathematics.Vector3@)">
            <summary>
            Converts Vector3 to Color.
            </summary>
            <param name="vector">Vector3 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromVector3(Evergine.Mathematics.Vector4@,Evergine.Common.Graphics.Color@)">
            <summary>
            Converts Vector4 to Color.
            </summary>
            <param name="vector">Vector3 with color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromVector4(Evergine.Mathematics.Vector4@)">
            <summary>
            Converts Vector4 to Color.
            </summary>
            <param name="vector">Vector4 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromVector4(Evergine.Mathematics.Vector4@,Evergine.Common.Graphics.Color@)">
            <summary>
            Converts Vector4 to Color.
            </summary>
            <param name="vector">Vector4 with color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToVector4">
            <summary>
            Converts to a Vector4.
            </summary>
            <returns>Color as a Vector4.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.ToVector4(Evergine.Mathematics.Vector4@)">
            <summary>
            Converts to a Vector4.
            </summary>
            <param name="vector">Color as a Vector4.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSV components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="v">Value component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromHex(System.String)">
            <summary>
            Creates a color from Hex coded string.
            </summary>
            <param name="colorcode">Hex format #AARRGGBB or #RRGGBB.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.FromHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSL components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="l">Luminance component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Color.HueToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Obtains an RGB component based on the hue values.
            </summary>
            <param name="p">P component.</param>
            <param name="q">Q component.</param>
            <param name="t">T component.</param>
            <returns>A RGB component.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ColorWriteChannels">
            <summary>
            Identify which components of each pixel of a render target are writable during blending.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.None">
            <summary>
            None of the data are stored.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.Red">
            <summary>
            Allow data to be stored in the red component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.Green">
            <summary>
            Allow data to be stored in the green component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.Blue">
            <summary>
            Allow data to be stored in the blue component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.Alpha">
            <summary>
            Allow data to be stored in the alpha component.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ColorWriteChannels.All">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.CommandBuffer">
            <summary>
            A command buffer stores commands until the buffer is committed for execution by the GPU.
            CommandBuffers are transient single-use objects and do not support reuse.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.CommandBuffer.CommandBufferState">
            <summary>
            Available states for a command buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandBuffer.CommandBufferState.Initial">
            <summary>
            Before Begin has been called or after the reset method.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandBuffer.CommandBufferState.Recording">
            <summary>
            Between Begin and End. The command buffer is in a state where it can record commands.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandBuffer.CommandBufferState.Executable">
            <summary>
            After End, the command buffer is in a state where it has finished recording commands and can be committed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandBuffer.CommandBufferState.Commited">
            <summary>
            After commit, the command buffer is in a state where it is waiting to be execute by the commandqueue.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CommandBuffer.State">
            <summary>
            Gets or sets the state of this commandbuffer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CommandBuffer.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CommandBuffer.AvailablePointerKeys">
            <inheritdoc/>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandBuffer.InRenderPass">
            <summary>
            Whether in a renderPass or false in other case.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CommandBuffer.GraphicsContext">
            <summary>
            Gets the generic graphicsContext.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Begin">
            <summary>
            Set the initialize state for this commandbuffer.
            This function must be called before other graphics commands ca be issued.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.End">
            <summary>
            Completes the command buffer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.EndInternal">
            <summary>
            Completes the command buffer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Reset">
            <summary>
            Reset the command buffer to the initial state.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetVertexBuffers(Evergine.Common.Graphics.Buffer[])">
            <summary>
            Set an array of vertex buffers to the input-assembler stage.
            </summary>
            <param name="buffers">The array of the vertex buffers being bound.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetVertexBuffer(System.UInt32,Evergine.Common.Graphics.Buffer,System.UInt32)">
            <summary>
            Set an buffers to the input-assembler stage.
            </summary>
            <param name="slot">The buffer slot.</param>
            <param name="buffer">The buffer being bound.</param>
            <param name="offset">Offset (in bytes) from the start of buffer to the first vertex to use.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetVertexBuffers(Evergine.Common.Graphics.Buffer[],System.Int32[])">
            <summary>
            Set an array of buffers to the input-assembler stage.
            </summary>
            <param name="buffers">The array of the vertex buffers being bound.</param>
            <param name="offsets">Offsets (in bytes) from the start of each vertexbuffer to the first vertex to use.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetIndexBuffer(Evergine.Common.Graphics.Buffer,Evergine.Common.Graphics.IndexFormat,System.UInt32)">
            <summary>
            Set an array of index buffers to the input-assembler stage.
            </summary>
            <param name="buffer">The buffer being bound.</param>
            <param name="format">Indices Data Type (Default UInt16).</param>
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetScissorRectangles(Evergine.Mathematics.Rectangle[])">
            <summary>
            Set an scissor rectangle in a specific slot.
            </summary>
            <param name="rectangles">The array of the scissor rectangles.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetViewports(Evergine.Common.Graphics.Viewport[])">
            <summary>
            Set a viewport in a specific slot.
            </summary>
            <param name="viewports">The array of the viewports.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.ResourceBarrierUnorderedAccessView(Evergine.Common.Graphics.Buffer)">
            <summary>
            Sets a resource barrier for a texture.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.ResourceBarrierUnorderedAccessView(Evergine.Common.Graphics.Texture)">
            <summary>
            Sets a resource barrier for a texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetGraphicsPipelineState(Evergine.Common.Graphics.GraphicsPipelineState)">
            <summary>
            Sets the graphics pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The graphics pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetGraphicsPipelineStateInternal(Evergine.Common.Graphics.GraphicsPipelineState)">
            <summary>
            Sets the graphics pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The graphics pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetComputePipelineState(Evergine.Common.Graphics.ComputePipelineState)">
            <summary>
            Sets the compute pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The compute pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetComputePipelineStateInternal(Evergine.Common.Graphics.ComputePipelineState)">
            <summary>
            Sets the compute pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The compute pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetRaytracingPipelineState(Evergine.Common.Graphics.Raytracing.RaytracingPipelineState)">
            <summary>
            Sets the raytracing pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The raytracing pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetRaytracingPipelineStateInternal(Evergine.Common.Graphics.Raytracing.RaytracingPipelineState)">
            <summary>
            Sets the raytracing pipeline state object for this commandbuffer.
            </summary>
            <param name="pipeline">The raytracing pipeline state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.SetResourceSet(Evergine.Common.Graphics.ResourceSet,System.UInt32,System.UInt32[])">
            <summary>
            Set the active <see cref="T:Evergine.Common.Graphics.ResourceSet"/> for the given index.
            </summary>
            <param name="resourceSet">The new <see cref="T:Evergine.Common.Graphics.ResourceSet"/>.</param>
            <param name="index">The resourceSet index.</param>
            <param name="constantBufferOffsets">Array of values specifying the constant buffer offsets.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BeginRenderPass(Evergine.Common.Graphics.RenderPassDescription@)">
            <summary>
            Begin a render pass.
            </summary>
            <param name="description">The renderPass description <see cref="T:Evergine.Common.Graphics.RenderPassDescription"/>.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BeginRenderPassInternal(Evergine.Common.Graphics.RenderPassDescription@)">
            <summary>
            Begin a render pass.
            </summary>
            <param name="description">The renderPass description <see cref="T:Evergine.Common.Graphics.RenderPassDescription"/>.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.EndRenderPass">
            <summary>
            End a render pass.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.EndRenderPassInternal">
            <summary>
            End a render pass.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0[],System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0[],System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="count">The number of elements.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0@,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateBufferData(Evergine.Common.Graphics.Buffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer from a pointer.
            </summary>
            <param name="buffer">Buffer instance.</param>
            <param name="source">The data pointer.</param>
            <param name="sourceSizeInBytes">The size in bytes.</param>
            <param name="destinationOffsetInBytes">The offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateBufferDataInternal(Evergine.Common.Graphics.Buffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer from a pointer.
            </summary>
            <param name="buffer">Buffer instance.</param>
            <param name="source">The data pointer.</param>
            <param name="sourceSizeInBytes">The size in bytes.</param>
            <param name="destinationOffsetInBytes">The offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyBufferDataTo(Evergine.Common.Graphics.Buffer,Evergine.Common.Graphics.Buffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy this buffer in the destination buffer.
            </summary>
            <param name="origin">the origin buffer.</param>
            <param name="destination">The destination buffer.</param>
            <param name="sizeInBytes">The data size in bytes to copy.</param>
            <param name="sourceOffset">The source buffer offset in bytes.</param>
            <param name="destinationOffset">The destination buffer offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyBufferDataToInternal(Evergine.Common.Graphics.Buffer,Evergine.Common.Graphics.Buffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copy this buffer in the destination buffer.
            </summary>
            <param name="origin">the origin buffer.</param>
            <param name="destination">The destination buffer.</param>
            <param name="sizeInBytes">The data size in bytes to copy.</param>
            <param name="sourceOffset">The source buffer offset in bytes.</param>
            <param name="destinationOffset">The destination buffer offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyTextureDataTo(Evergine.Common.Graphics.Texture,Evergine.Common.Graphics.Texture)">
            <summary>
            Copies all subresources from this texture in other texture.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyTextureDataTo(Evergine.Common.Graphics.Texture,Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32)">
            <summary>
            Copies one subresource from this texture in other texture.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
            <param name="mipLevel">The mip level to copy.</param>
            <param name="arrayLayer">The array layer to copy.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyTextureDataTo(Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies a region from this texture in other texture.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="sourceX">The x-coordinate of the upper left corner of the source region.</param>
            <param name="sourceY">The y-coordinate of the upper left corner of the source region.</param>
            <param name="sourceZ">The z-coordinate of the upper left corner of the source region.</param>
            <param name="sourceMipLevel">The mip level to copy from the source texture.</param>
            <param name="sourceBasedArrayLayer">The starting array layer to copy from the source texture.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
            <param name="destinationX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationMipLevel">The mip level to copy the data into.</param>
            <param name="destinationBasedArrayLayer">The starting array layer to copy data into.</param>
            <param name="width">The width in texels of the copy region.</param>
            <param name="height">The height in texels of the copy region.</param>
            <param name="depth">The depth in texels of the copy region.</param>
            <param name="layerCount">The number of array layers to copy.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.CopyTextureDataToInternal(Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies a region from this texture in other texture.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="sourceX">The x-coordinate of the upper left corner of the source region.</param>
            <param name="sourceY">The y-coordinate of the upper left corner of the source region.</param>
            <param name="sourceZ">The z-coordinate of the upper left corner of the source region.</param>
            <param name="sourceMipLevel">The mip level to copy from the source texture.</param>
            <param name="sourceBasedArrayLayer">The starting array layer to copy from the source texture.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
            <param name="destinationX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationMipLevel">The mip level to copy the data into.</param>
            <param name="destinationBasedArrayLayer">The starting array layer to copy data into.</param>
            <param name="width">The width in texels of the copy region.</param>
            <param name="height">The height in texels of the copy region.</param>
            <param name="depth">The depth in texels of the copy region.</param>
            <param name="layerCount">The number of array layers to copy.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Blit(Evergine.Common.Graphics.Texture,Evergine.Common.Graphics.Texture)">
            <summary>
            Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Blit(Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies all subresources from this texture in other texture with format conversion and preparing to present in swapchain.
            </summary>
            <param name="source">The source <see cref="T:Evergine.Common.Graphics.Texture"></see>.</param>
            <param name="sourceX">The x-coordinate of the upper left corner of the source region.</param>
            <param name="sourceY">The y-coordinate of the upper left corner of the source region.</param>
            <param name="sourceZ">The z-coordinate of the upper left corner of the source region.</param>
            <param name="sourceMipLevel">The mip level to copy from the source texture.</param>
            <param name="sourceBasedArrayLayer">The starting array layer to copy from the source texture.</param>
            <param name="destination">The destination <see cref="T:Evergine.Common.Graphics.Texture"></see> into which data is copied./>.</param>
            <param name="destinationX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationMipLevel">The mip level to copy the data into.</param>
            <param name="destinationBasedArrayLayer">The starting array layer to copy data into.</param>
            <param name="layerCount">The number of array layers to copy.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Draw(System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, non-instanced primitives.
            </summary>
            <param name="vertexCount">Number of vertices to draw.</param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DrawInstanced(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, instanced primitives.
            </summary>
            <param name="vertexCountPerInstance">Number of vertices to draw.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startVertexLocation">Index of the first vertex.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DrawInstancedIndirect(Evergine.Common.Graphics.Buffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw instanced, GPU-generated primitives.
            </summary>
            <param name="argBuffer">A buffer containing the GPU generated primitives.</param>
            <param name="offset">Offset to the start of the GPU generated primitives.</param>
            <param name="drawCount">It is the number of draws to execute, and can be zero.</param>
            <param name="stride">It is the byte stride between succesive sets of draw parameters.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DrawIndexed(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw indexed, non-instanced primitives.
            </summary>
            <param name="indexCount">Number of indices to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DrawIndexedInstanced(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw indexed, instanced primitives.
            </summary>
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DrawIndexedInstancedIndirect(Evergine.Common.Graphics.Buffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw indexed, instanced, GPU-generated primitives.
            </summary>
            <param name="argBuffer">A buffer containing the GPU generated primitives.</param>
            <param name="offset">Offset to the start of the GPU generated primitives.</param>
            <param name="drawCount">It is the number of draws to execute, and can be zero.</param>
            <param name="stride">It is the byte stride between succesive sets of draw parameters.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Dispatch(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Execute commands in a compute shader from a thread group.
            </summary>
            <param name="groupCountX">
            The number of groups dispatched in the x direction. groupSizeX must be
            less than or equal to (65535).
            </param>
            <param name="groupCountY">
            The number of groups dispatched in the y direction. groupSizeY must be
            less than or equal to (65535).
            </param>
            <param name="groupCountZ">
            The number of groups dispatched in the z direction. groupSizeZ must be
                less than or equal to (65535).
            </param>
            <remarks>
            You call the Dispatch method to execute commands in a compute shader. A compute
            shader can be run on many threads in parallel, within a thread group. Index a
            particular thread, within a thread group using a 3D vector given by (x,y,z).
            </remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Dispatch1D(System.UInt32,System.UInt32)">
            <summary>
            Execute commands in a compute shader to solve a 1D problem.
            </summary>
            <param name="threadCountX">The size of the problem.</param>
            <param name="groupSizeX">The group size, 64 by default.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Dispatch2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Execute commands in a compute shader to solve a 2D problem.
            </summary>
            <param name="threadCountX">The x size of the problem.</param>
            <param name="threadCountY">The y size of the problem.</param>
            <param name="groupSizeX">The group size x, 8 by default.</param>
            <param name="groupSizeY">The group size y, 8 by default.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Dispatch3D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Execute commands in a compute shader to solve a 3D problem.
            </summary>
            <param name="threadCountX">The x size of the problem.</param>
            <param name="threadCountY">The y size of the problem.</param>
            <param name="threadCountZ">The z size of the problem.</param>
            <param name="groupSizeX">The group size x.</param>
            <param name="groupSizeY">The group size y.</param>
            <param name="groupSizeZ">The group size z.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Commit">
            <summary>
            Commits this command buffer to the command queue waiting to be execute on GPU after <see cref="M:Evergine.Common.Graphics.CommandQueue.Submit"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DispatchIndirect(Evergine.Common.Graphics.Buffer,System.UInt32)">
            <summary>
            Execute a command list over one or more thread groups.
            </summary>
            <param name="argBuffer">A buffer which must be loaded with data that matches the argument list for <see cref="M:Evergine.Common.Graphics.CommandBuffer.Dispatch(System.UInt32,System.UInt32,System.UInt32)"/>.</param>
            <param name="offset">A byte-aligned offset between the start of the buffer and the arguments.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.GenerateMipmaps(Evergine.Common.Graphics.Texture)">
            <summary>
            Generates mipmaps for the given <see cref="T:Evergine.Common.Graphics.Texture"/>. The largest mipmap is used to generate all of the lower mipmap
            levels contained in the Texture.
            </summary>
            <param name="texture">The <see cref="T:Evergine.Common.Graphics.Texture"/> to generate mipmaps for. This Texture must have been created with
            <see cref="T:Evergine.Common.Graphics.TextureFlags"/>.<see cref="F:Evergine.Common.Graphics.TextureFlags.GenerateMipmaps"/>.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BeginDebugMarker(System.String)">
            <summary>
            Marks the beginning of a section of event code. This allows subsequent commands to be
            categorized and filtered when viewed in external debugging tools.
            </summary>
            <remarks>
            You call the EndDebugMarker method to mark the end of the section of event code.
            BeginDebugMarker has no effect if the calling application is not running under an enabled profiling tool.
            </remarks>
            <param name="label">String that contains the name of the event.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.EndDebugMarker">
            <summary>
            Marks the end of a section of event code.
            </summary>
            <remarks>
            EndDebugMarker has no effect if the calling application is not running under an enabled profiling tool.
            </remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.InsertDebugMarker(System.String)">
            <summary>
            Marks a single point of execution in code. This is used by graphics debuggers to identify
            points of interest in a command stream.
            </summary>
            <remarks>
            InsertDebugMarker has no effect if the calling application is not running under an enabled profiling tool.
            </remarks>
            <param name="label">String that contains the name of the event.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.WriteTimestamp(Evergine.Common.Graphics.QueryHeap,System.UInt32)">
            <summary>
            Write a device timestamp into a query heap.
            </summary>
            <param name="heap">Specifies the queryheap.</param>
            <param name="index">The query index.</param>
            <remarks>This method works only with timestamp queryheap type.</remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BeginQuery(Evergine.Common.Graphics.QueryHeap,System.UInt32)">
            <summary>
            Begins a GPU query.
            </summary>
            <param name="heap">Specifies the queryheap containing the query.</param>
            <param name="index">The query index.</param>
            <remarks>This method works only with occusion and binaryOcclusion queryheap types.</remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.EndQuery(Evergine.Common.Graphics.QueryHeap,System.UInt32)">
            <summary>
            Ends a GPU query.
            </summary>
            <param name="heap">Specifies the queryheap containing the query.</param>
            <param name="index">The query index.</param>
            <remarks>This method works only with occusion and binaryOcclusion queryheap types.</remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BuildRaytracingAccelerationStructure(Evergine.Common.Graphics.Raytracing.BottomLevelASDescription)">
            <summary>
            Perform an bottom level acceleration structure build on the GPU.
            </summary>
            <param name="blas">Bottom level acceleration structure description.</param>
            <returns>Bottom Level Acceleration Structure.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.BuildRaytracingAccelerationStructure(Evergine.Common.Graphics.Raytracing.TopLevelASDescription)">
            <summary>
            Perform an top level acceleration structure build on the GPU.
            </summary>
            <param name="tlas">Top level acceleration structure description.</param>
            <returns>Top Level Acceleration Structure.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.UpdateRaytracingAccelerationStructure(Evergine.Common.Graphics.Raytracing.TopLevelAS@,Evergine.Common.Graphics.Raytracing.TopLevelASDescription)">
            <summary>
            Refit an top level accelerations structure build on the GPU.
            </summary>
            <param name="tlas">Top level acceleration structure.</param>
            <param name="newDescription">New top level description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.DispatchRays(Evergine.Common.Graphics.Raytracing.DispatchRaysDescription)">
            <summary>
            Launch threads of a ray generation shader. See Initiating raytracing for an overview. Can be called from
            graphics or compute command lists and bundles.
            </summary>
            <param name="description">Dispatch rays description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandBuffer.GetNativePointer(System.String,System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.CommandQueue">
            <summary>
            A pool of <see cref="M:Evergine.Common.Graphics.CommandQueue.CommandBuffer"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandQueue.CommandBufferArraySize">
            <summary>
            The command buffer array size.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CommandQueue.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandQueue.CommandBuffer">
            <summary>
            Gets the next <see cref="M:Evergine.Common.Graphics.CommandQueue.CommandBuffer"/>.
            </summary>
            <returns>The CommandBuffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandQueue.Submit">
            <summary>
            Submits a CommandBuffer list to be executed by the GPU.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandQueue.WaitIdle">
            <summary>
            Wait for all command buffers are executed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CommandQueue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.CommandQueueType">
            <summary>
            Specifies the elements type of a CommandQueue.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandQueueType.Graphics">
            <summary>
            Specifies a command buffer that the GPU can execute. A direct command list doesn't inherit any GPU state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandQueueType.Compute">
            <summary>
            Specifies a command buffer for computing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CommandQueueType.Copy">
            <summary>
            Specifies a command buffer for copying (drawing).
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ComparisonFunction">
            <summary>
            Comparison options.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComparisonFunction.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.CompilationMode">
            <summary>
            An enum.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationMode.None">
            <summary>
            Shaders are compiled without special parameters.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationMode.Debug">
            <summary>
            Shaders are compiled with debug information.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationMode.Release">
            <summary>
            Shaders are compiled with optimizations.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.CompilationResult">
            <summary>
            This struct represent the result of a compilation process in a shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationResult.ByteCode">
            <summary>
            The byte code before compile a shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationResult.HasErrors">
            <summary>
            True if the compilation was wrong.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationResult.ErrorLine">
            <summary>
            The error line number.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilationResult.Message">
            <summary>
            Error message if hasErrors is true.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CompilationResult.#ctor(System.Byte[],System.Boolean,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.CompilationResult"/> struct.
            </summary>
            <param name="bytecode">The compile byte code.</param>
            <param name="hasErrors">Whether the compilation was success or not.</param>
            <param name="errorLine">The error line number if hasError is true.</param>
            <param name="message">The error message if hasErrors is true.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.CompilerParameters">
            <summary>
            This struct represent the parameters used by the shader compiler.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilerParameters.Profile">
            <summary>
            The available device capabilities, <see cref="T:Evergine.Common.Graphics.GraphicsProfile"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CompilerParameters.CompilationMode">
            <summary>
            The compiler mode, <see cref="F:Evergine.Common.Graphics.CompilerParameters.CompilationMode"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.CompilerParameters.Default">
            <summary>
            Gets default values for CompilerParameters.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CompilerParameters.SetDefault">
            <summary>
            Default CompilerParameters values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.CompilerParameters.Read(System.IO.BinaryReader)">
            <summary>
            Read compiler parameters from binary file.
            </summary>
            <param name="reader">Binary reader.</param>
            <returns>The readed compiler parameters.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.CompilerParameters.Write(System.IO.BinaryWriter)">
            <summary>
            Write compiler parameters on binary file.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ComputePipelineDescription">
            <summary>
            Contains properties that describe the characteristics of a new pipeline state object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineDescription.ResourceLayouts">
            <summary>
            Describes the resources layout input.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineDescription.shaderDescription">
            <summary>
            Gets or sets the compute shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineDescription.ThreadGroupSizeX">
            <summary>
            The X dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineDescription.ThreadGroupSizeY">
            <summary>
            The Y dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineDescription.ThreadGroupSizeZ">
            <summary>
            The Z dimension of the thread group size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.#ctor(Evergine.Common.Graphics.ResourceLayout[],Evergine.Common.Graphics.ComputeShaderStateDescription,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ComputePipelineDescription"/> struct.
            </summary>
            <param name="resourceLayouts">The resources layout description.</param>
            <param name="shaderDescription">The compute shader.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.Equals(Evergine.Common.Graphics.ComputePipelineDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.op_Equality(Evergine.Common.Graphics.ComputePipelineDescription,Evergine.Common.Graphics.ComputePipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineDescription.op_Inequality(Evergine.Common.Graphics.ComputePipelineDescription,Evergine.Common.Graphics.ComputePipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ComputePipelineState">
            <summary>
            This class represent the GPU graphics pipeline.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputePipelineState.Description">
            <summary>
            Gets the compute pipelinestate description.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ComputePipelineState.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputePipelineState.#ctor(Evergine.Common.Graphics.ComputePipelineDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ComputePipelineState"/> class.
            </summary>
            <param name="description">The pipelineState description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ComputeShaderStateDescription">
            <summary>
            This struct contains all the shader stages.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ComputeShaderStateDescription.ComputeShader">
            <summary>
            Gets or sets the compute shader program.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputeShaderStateDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputeShaderStateDescription.Equals(Evergine.Common.Graphics.ComputeShaderStateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.ComputeShaderStateDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.CullMode">
            <summary>
            Specifies polygon culling mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CullMode.None">
            <summary>
            Always draw all triangles.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CullMode.Front">
            <summary>
            Do not draw triangles that are front-facing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.CullMode.Back">
            <summary>
            Do not draw triangles that are back-facing.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DataBox">
            <summary>
            Provides access to data organized in 3D.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DataBox.pinnedHandle">
            <summary>
            Handle to .NET GCHandle.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DataBox.DataPointer">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DataBox.RowPitch">
            <summary>
            Gets the number of bytes per row.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DataBox.SlicePitch">
            <summary>
            Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image).
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.DataBox.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Evergine.Common.Graphics.DataBox.#ctor(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.DataBox"/> struct from a IntPtr.
            </summary>
            <param name="datapointer">The datapointer.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="slicePitch">The slice pitch.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.DataBox.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.DataBox"/> struct from a byte array.
            </summary>
            <param name="data">The data as byte array.</param>
            <param name="rowPitch">The row pitch.</param>
            <param name="slicePitch">The slice pitch.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.DataBox.Dispose">
            <summary>
            Dispose databox.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthBias">
            <summary>
            Specifies polygon depth boas.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthBias.Zero">
            <summary>
            Zero depth bias
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthBias.Positive">
            <summary>
            Positive depth bias
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthBias.Negative">
            <summary>
            Negative depth bias
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthMode">
            <summary>
            Specifies depth reading/writing mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthMode.Read">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthMode.Write">
            <summary>
            Read and write.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthMode.None">
            <summary>
            No depth mode.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthStencilOperationDescription">
            <summary>
            Stencil operations that can be performed based on the results of stencil test.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilOperationDescription.StencilFailOperation">
            <summary>
            The stencil operation to perform when stencil testing fails.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilOperationDescription.StencilDepthFailOperation">
            <summary>
            The stencil operation to perform when stencil testing passes and depth testing fails.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilOperationDescription.StencilPassOperation">
            <summary>
            The stencil operation to perform when stencil testing and depth testing both pass.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilOperationDescription.StencilFunction">
            <summary>
            A function that compares stencil data against existing stencil data.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilOperationDescription.Equals(Evergine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Determines whether the specified parameter is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilOperationDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilOperationDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilOperationDescription.op_Equality(Evergine.Common.Graphics.DepthStencilOperationDescription,Evergine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilOperationDescription.op_Inequality(Evergine.Common.Graphics.DepthStencilOperationDescription,Evergine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthStencilStateDescription">
            <summary>
            Describes depth-stencil state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.DepthEnable">
            <summary>
            Enable depth testing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.DepthWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer that can be modified by depth data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.DepthFunction">
            <summary>
            A function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.StencilEnable">
            <summary>
            Enable stencil testing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.StencilReadMask">
            <summary>
            Identify a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.FrontFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateDescription.BackFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.DepthStencilStateDescription.Default">
            <summary>
            Gets default values for DephtStencilStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.SetDefault">
            <summary>
            Default DephtStencilStateDescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.Equals(Evergine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.op_Equality(Evergine.Common.Graphics.DepthStencilStateDescription,Evergine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStateDescription.op_Inequality(Evergine.Common.Graphics.DepthStencilStateDescription,Evergine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthStencilStateEnum">
            <summary>
            The depth stencil state default values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateEnum.None">
            <summary>
            Depth disable
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateEnum.ReadAndWrite">
            <summary>
            Depth enable and writemask enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateEnum.Read">
            <summary>
            Depth enable but writemask zero.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DepthStencilStates">
            <summary>
            Default known values for <see cref="T:Evergine.Common.Graphics.DepthStencilStateDescription"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStates.None">
            <summary>
            Depth disable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStates.ReadWrite">
            <summary>
            Depth enable and writemask enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DepthStencilStates.Read">
            <summary>
            Depth enable but writemask zero.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.DepthStencilStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.DepthStencilStates"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.DirectionalLightStruct">
            <summary>
            Struct with aligned data for sending a directional light to the shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DirectionalLightStruct.Direction">
            <summary>
            Light direction.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.DirectionalLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ElementDescription">
            <summary>
            Describes an individual component of a vertex.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementDescription.AppendAligned">
            <summary>
            Use secuential offset.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementDescription.Semantic">
            <summary>
            Gets the type of the element.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementDescription.SemanticIndex">
            <summary>
            Gets the semantic index of this element.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementDescription.Format">
            <summary>
            Gets the format of the element.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementDescription.Offset">
            <summary>
            Gets the offset of the element.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.#ctor(Evergine.Common.Graphics.ElementFormat,Evergine.Common.Graphics.ElementSemanticType,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ElementDescription"/> struct.
            </summary>
            <param name="format">The element format, <see cref="T:Evergine.Common.Graphics.ElementFormat"/>.</param>
            <param name="semanticType">The element semantic, <see cref="T:Evergine.Common.Graphics.ElementSemanticType"/>.</param>
            <param name="semanticIndex">The semantic index for this element.</param>
            <param name="offset">The element offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.Equals(Evergine.Common.Graphics.ElementDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.op_Equality(Evergine.Common.Graphics.ElementDescription,Evergine.Common.Graphics.ElementDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.op_Inequality(Evergine.Common.Graphics.ElementDescription,Evergine.Common.Graphics.ElementDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.Read(System.IO.BinaryReader)">
            <summary>
            Read ElementDescription from binary file.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The readed ElementDescription.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ElementDescription.Write(System.IO.BinaryWriter)">
            <summary>
            Write ElementDescription into binary file.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ElementFormat">
            <summary>
            Vertex element format.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte">
            <summary>
            One unsigned 8-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte2">
            <summary>
            Two unsigned 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte3">
            <summary>
            Three unsigned 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte4">
            <summary>
            Four unsigned 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte">
            <summary>
            One signed 8-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte2">
            <summary>
            Two signed 8-bits values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte3">
            <summary>
            Three signed 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte4">
            <summary>
            Four signed 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByteNormalized">
            <summary>
            One unsigned normalized 8-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte2Normalized">
            <summary>
            Two unsigned normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte3Normalized">
            <summary>
            Three unsigned normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UByte4Normalized">
            <summary>
            Four unsigned normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.ByteNormalized">
            <summary>
            One signed normalized 8-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte2Normalized">
            <summary>
            Two signed normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte3Normalized">
            <summary>
            Three signed normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Byte4Normalized">
            <summary>
            Four signed normalized 8-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort">
            <summary>
            One unsigned 16-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort2">
            <summary>
            Two unsigned 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort3">
            <summary>
            Three unsigned 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort4">
            <summary>
            Four unsigned 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short">
            <summary>
            One signed 16-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short2">
            <summary>
            Two signed 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short3">
            <summary>
            Three signed 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short4">
            <summary>
            Four signed 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShortNormalized">
            <summary>
            One unsigned normalized 16-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort2Normalized">
            <summary>
            Two unsigned normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort3Normalized">
            <summary>
            Three unsigned normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UShort4Normalized">
            <summary>
            Four unsigned normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.ShortNormalized">
            <summary>
            One signed normalized 16-bit value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short2Normalized">
            <summary>
            Two signed normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short3Normalized">
            <summary>
            Three signed normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Short4Normalized">
            <summary>
            Four signed normalized 16-bit values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Half">
            <summary>
            One half-precision floating-point value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Half2">
            <summary>
            Two half-precision floating-point value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Half3">
            <summary>
            Three half-precision floating-point value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Half4">
            <summary>
            Four half-precision floating-point value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Float2">
            <summary>
            A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Float3">
            <summary>
            A three-component, 96-bit floating-point format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Float4">
            <summary>
            A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UInt">
            <summary>
            One unsigned 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UInt2">
            <summary>
            Two unsigned 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UInt3">
            <summary>
            Three unsigned 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.UInt4">
            <summary>
            Four unsigned 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Int">
            <summary>
            One signed 32-bit integer value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Int2">
            <summary>
            Two signed 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Int3">
            <summary>
            Three signed 32-bit integer values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementFormat.Int4">
            <summary>
            Four signed 32-bit integer values.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ElementSemanticType">
            <summary>
            The semantic meaning of a vertex element.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Position">
            <summary>
            Describes a position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.TexCoord">
            <summary>
            Describes a texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Normal">
            <summary>
            Describes a normal vector.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Tangent">
            <summary>
            Describes a tangent vector.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Binormal">
            <summary>
            Describe a binormal vector.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Color">
            <summary>
            Describe a color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.BlendIndices">
            <summary>
            Blend indices
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.BlendWeight">
            <summary>
            Blend weights
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ElementSemanticType.Count">
            <summary>
            Auxiliar value to count all semantics
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ErrorMessage">
            <summary>
            Class that contains an error message.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ErrorMessage.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ExtensionMethods">
            <summary>
            Extension Methods.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ExtensionMethods.IsGammaColorSpaceFormat(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Indicates if this format is in Gamma Color Scapce.
            </summary>
            <param name="format">Pixel format.</param>
            <returns>Is in gamma space.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ExtensionMethods.GetSizeInBits(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Get Format size in bits (8 bits = byte).
            </summary>
            <param name="format">Pixel format.</param>
            <returns>Size in bits.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.FillMode">
            <summary>
            Primitive fill mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FillMode.Wireframe">
            <summary>
            Draw lines connecting the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FillMode.Solid">
            <summary>
            Fill the triangles formed by the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.FlipMode">
            <summary>
            Indicates the flip mode of a sprite, billboard, etc...
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FlipMode.None">
            <summary>
            No flip.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FlipMode.FlipHorizontally">
            <summary>
            Horizontal flip.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FlipMode.FlipVertically">
            <summary>
            Vertical flip.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.FrameBuffer">
            <summary>
            This class represent which color texture and depth texture are rendered to present.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.Id">
            <summary>
            Gets or sets the asset Id.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.FrameBuffer.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.Dependencies">
            <inheritdoc/>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBuffer.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBuffer.requireFlipProjection">
            <summary>
            Inticates if this FrameBuffer requires the projection matrix to be flipped.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.Width">
            <summary>
            Gets or sets the width in pixels of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.Height">
            <summary>
            Gets or sets the height in pixels of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.ArraySize">
            <summary>
            Gets or sets the array size of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.SampleCount">
            <summary>
            Gets or sets the sample count of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.RequireFlipProjection">
            <summary>
            Gets or sets a value indicating whether this FrameBuffer requires the projection matrix to be flipped.
            By default they will indicate the default flip behavior, but the user can change it.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.ColorTargets">
            <summary>
            Gets or sets the collection of colors targets textures associated with this <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.DepthStencilTarget">
            <summary>
            Gets or sets the depth targets texture associated with this <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.OutputDescription">
            <summary>
            Gets or sets an <see cref="P:Evergine.Common.Graphics.FrameBuffer.OutputDescription"/> which describes the number and formats of the depth and colors targets.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBuffer.IntermediateBufferAssociated">
            <summary>
            Gets or sets a value indicating whether the framebuffer is associates to a swapchain.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBuffer.disposeAttachments">
            <summary>
            A value indicating whether we need to dispose attachment textures when this framebuffer is disposed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.#ctor(System.Nullable{Evergine.Common.Graphics.FrameBufferAttachment},Evergine.Common.Graphics.FrameBufferAttachment[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> class.
            </summary>
            <param name="depthTarget">The depth texture which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.DepthStencil"/> flag.</param>
            <param name="colorTargets">The array of color textures, all of which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.RenderTarget"/> flags.</param>
            <param name="disposeAttachments">When this framebuffer is disposed, dispose the attachment textures too.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.Invalidate(Evergine.Common.ILoadable)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBuffer.ReleaseUnusedMemory">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.FrameBufferAttachment">
            <summary>
            Contains properties that describe a framebuffer texture attachment description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.SliceCount">
            <summary>
            The number of slices to attach.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.MipSlice">
            <summary>
            The selected MipLevel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.AttachmentTexture">
            <summary>
            The attachment texture. This is the texture used by the framebuffer as attachment.
            </summary>
            <remarks>
            If this texture has MSAA enabled, you could set the ResolvedTexture field with a non MSAA texture. After the EndRenderPass, this texture will be resolved into this.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.AttachedFirstSlice">
            <summary>
            The selected array slice.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.ResolvedTexture">
            <summary>
            The resolved texture. If the source texture has MSAA enabled, in the EndRenderPass this texture is resolved into this texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.FrameBufferAttachment.ResolvedFirstSlice">
            <summary>
            The selected array slice.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBufferAttachment.Texture">
            <summary>
            Gets the texture used as a shader resource.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.FrameBufferAttachment.FirstSlice">
            <summary>
            Gets the selected array slice of the texture used as a shader resource.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.#ctor(Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> struct.
            </summary>
            <param name="attachedTexture">The attachment texture.</param>
            <param name="arrayIndex">The array index to compute the specify slide inside the texture.</param>
            <param name="faceIndex">The face index to compute the specify slide inside the texture.</param>
            <param name="sliceCount">The slice count.</param>
            <param name="mipLevel">The selected mipLevel.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.#ctor(Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> struct.
            </summary>
            <param name="attachedTexture">The attachment texture.</param>
            <param name="firstSlice">the first slice.</param>
            <param name="sliceCount">The slice count.</param>
            <param name="mipLevel">The selected mipLevel.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.#ctor(Evergine.Common.Graphics.Texture,Evergine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> struct.
            </summary>
            <param name="attachedTexture">The attachment texture.</param>
            <param name="resolvedTexture">The resolved texture.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.#ctor(Evergine.Common.Graphics.Texture,System.UInt32,Evergine.Common.Graphics.Texture,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> struct.
            </summary>
            <param name="attachedTexture">The attachment texture.</param>
            <param name="attachedFirstSlice">the first slice.</param>
            <param name="resolvedTexture">The resolved texture.</param>
            <param name="resolvedFirstSlice">the first slice on the resolved texture.</param>
            <param name="sliceCount">The slice count on the resolved texture.</param>
            <param name="mipLevel">The selected mipLevel on the resolved texture.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.Equals(Evergine.Common.Graphics.FrameBufferAttachment)">
            <summary>
            Determines whether the specified parameter is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.op_Equality(Evergine.Common.Graphics.FrameBufferAttachment,Evergine.Common.Graphics.FrameBufferAttachment)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.FrameBufferAttachment.op_Inequality(Evergine.Common.Graphics.FrameBufferAttachment,Evergine.Common.Graphics.FrameBufferAttachment)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.GammaColor">
            <summary>
            Represents a 32-bit color in Gamma space.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.R">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Common.Graphics.GammaColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.G">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Common.Graphics.GammaColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.B">
            <summary>
            The z coordinate of this <see cref="T:Evergine.Common.Graphics.GammaColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.A">
            <summary>
            The w coordinate of this <see cref="T:Evergine.Common.Graphics.GammaColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.AsVector4">
            <summary>
            The linear color converted to <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GammaColor.AsVector3">
            <summary>
            The linear color converted to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GammaColor"/> struct.
            </summary>
            <param name="r">The r color component in linear space.</param>
            <param name="g">The g color component in linear space.</param>
            <param name="b">The b color component in linear space.</param>
            <param name="a">The a color component in linear space.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.#ctor(Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GammaColor"/> struct.
            </summary>
            <param name="vector">Vector3 with the color data.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.#ctor(Evergine.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GammaColor"/> struct.
            </summary>
            <param name="vector">Vector4 with the color data.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.#ctor(Evergine.Common.Graphics.Color@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GammaColor"/> struct.
            </summary>
            <param name="color">The <see cref="T:Evergine.Common.Graphics.Color"/> instance in sRGB space.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.Equals(Evergine.Common.Graphics.GammaColor)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.Equals(Evergine.Common.Graphics.GammaColor@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Common.Graphics.GammaColor"/> are equal.
            </summary>
            <param name="other">The vector to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.ToLinear(Evergine.Common.Graphics.LinearColor@)">
            <summary>
            Convert to Linear color space.
            </summary>
            <param name="linearColor">The converted linear color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GammaColor.ToSRGB(Evergine.Common.Graphics.GammaColor@)">
            <summary>
            Convert to sRGB color space.
            </summary>
            <param name="sRGBColor">The converted sRGB color.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsBackend">
            <summary>
            The specify graphics low level API used by the <see cref="T:Evergine.Common.Graphics.GraphicsContext"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.DirectX11">
            <summary>
            DirectX 11
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.DirectX12">
            <summary>
            DirectX 12
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.OpenGL">
            <summary>
            OpenGL 4
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.OpenGLES">
            <summary>
             OpenGL ES 3.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.Metal">
            <summary>
            Metal 2.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.Vulkan">
            <summary>
            Vulkan 1.1
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.WebGL1">
            <summary>
            WebGL 1.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.WebGL2">
            <summary>
            WebGL 2.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsBackend.WebGPU">
            <summary>
            WebGPU 1.0
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsContext">
            <summary>
            Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsContext.TimestampFrequency">
            <summary>
            the rate at which the GPU timestamp counter increments.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.DefaultSampler">
            <summary>
            Gets the default Sampler state used when there is a missing sampler in a resource set.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.ValidationLayer">
            <summary>
            Gets the graphics validation layer pointer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.IsValidationLayerEnabled">
            <summary>
            Gets a value indicating whether validationlayer is enable or disable.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.Factory">
            <summary>
            Gets or sets the resource factory.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.NativeDevicePointer">
            <summary>
            Gets the native device pointer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.BackendType">
            <summary>
            Gets the backend type (DirectX, OpenGL ...)
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.Capabilities">
            <summary>
            Gets the capabilities of this graphics context.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.AvailablePointerKeys">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.DefaultTextureUploaderSize">
            <summary>
            Gets or sets a value indicating the size in bytes of the texture uploader.
            </summary>
            <remarks>
            To upload buffers and Texture efficiently to dedicate GPU memory first a big buffer is created on shared GPU memory,
            before to use this buffers and texture, a parallel copyqueue execute all the copy command at once.
            The initial size of this uploaders is defined by this property, The Default value is (256 * 1024 * 1024).
            </remarks>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContext.DefaultBufferUploaderSize">
            <summary>
            Gets or sets a value indicating the size in bytes of the buffer uploader.
            </summary>
            <remarks>
            To upload buffers and Texture efficiently to dedicate GPU memory first a big buffer is created on shared GPU memory,
            before to use this buffers and texture, a parallel copyqueue execute all the copy command at once.
            The initial size of this uploaders is defined by this property, The Default value is (256 * 1024 * 1024).
            </remarks>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.CreateDevice(Evergine.Common.Graphics.ValidationLayer)">
            <summary>
            Initialize the graphics context to be used in a compute shader.
            </summary>
            <param name="validationLayer">Whether the validation layer is active or not.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.CreateDeviceInternal">
            <summary>
            Initialize the graphics context to be used in a compute shader.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.CreateSwapChain(Evergine.Common.Graphics.SwapChainDescription)">
            <summary>
            Initialize the swapchain.
            </summary>
            <param name="description">The swapchain descriptor.</param>
            <returns>Created Swapchain.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0[],System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0[],System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="count">The number of elements.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateBufferData``1(Evergine.Common.Graphics.Buffer,``0@,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="buffer">Buffer instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateBufferData(Evergine.Common.Graphics.Buffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer from a pointer.
            </summary>
            <param name="buffer">Buffer instance.</param>
            <param name="source">The data pointer.</param>
            <param name="sourceSizeInBytes">The size in bytes.</param>
            <param name="destinationOffsetInBytes">The offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.InternalUpdateBufferData(Evergine.Common.Graphics.Buffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer from a pointer.
            </summary>
            <param name="buffer">Buffer instance.</param>
            <param name="source">The data pointer.</param>
            <param name="sourceSizeInBytes">The size in bytes.</param>
            <param name="destinationOffsetInBytes">The offset in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateTextureData``1(Evergine.Common.Graphics.Texture,``0[],System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="texture">Texture instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateTextureData``1(Evergine.Common.Graphics.Texture,``0[],System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="texture">Texture instance.</param>
            <param name="data">The data array.</param>
            <param name="count">The number of elements.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateTextureData``1(Evergine.Common.Graphics.Texture,``0@,System.UInt32)">
            <summary>
            Fill the buffer with a data array.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="texture">Texture instance.</param>
            <param name="data">The data array.</param>
            <param name="destinationOffsetInBytes">The destination offset.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UpdateTextureData(Evergine.Common.Graphics.Texture,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Fill the buffer from a pointer.
            </summary>
            <param name="texture">Texture instance.</param>
            <param name="source">The data pointer.</param>
            <param name="sourceSizeInBytes">The size in bytes.</param>
            <param name="subResource">The subResource index.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.MapMemory(Evergine.Common.Graphics.GraphicsResource,Evergine.Common.Graphics.MapMode,System.UInt32)">
            <summary>
            Maps a <see cref="T:Evergine.Common.Graphics.Buffer"/> or <see cref="T:Evergine.Common.Graphics.Texture"/> into a CPU-accessible data region.
            </summary>
            <param name="resource">The graphics resource to map.</param>
            <param name="mode">The <see cref="T:Evergine.Common.Graphics.MapMode"/> used to map the resource.</param>
            <param name="subResource">The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures.</param>
            <returns>A <see cref="T:Evergine.Common.Graphics.MappedResource"/> structure describing the mapped data region.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.UnmapMemory(Evergine.Common.Graphics.GraphicsResource,System.UInt32)">
            <summary>
            Invalidates a previously-mapped data region for the given <see cref="T:Evergine.Common.Graphics.Buffer"/> or <see cref="T:Evergine.Common.Graphics.Texture"/>.
            </summary>
            <param name="resource">The graphics resource to map.</param>
            <param name="subResource">The subresource to map. Subresources are indexed first by mip slice and then by array layer. Only for Textures.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.ShaderCompile(System.String,System.String,Evergine.Common.Graphics.ShaderStages)">
            <summary>
            Converts the shader source into bytecode.
            </summary>
            <param name="shaderSource">The shader source text.</param>
            <param name="entryPoint">The entrypoint function name.</param>
            <param name="stage">The shader stage, <see cref="T:Evergine.Common.Graphics.ShaderStages"/>.</param>
            <returns>The shader bytecodes.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.ShaderCompile(System.String,System.String,Evergine.Common.Graphics.ShaderStages,Evergine.Common.Graphics.CompilerParameters)">
            <summary>
            Converts the shader source into bytecode.
            </summary>
            <param name="shaderSource">The shader source text.</param>
            <param name="entryPoint">The entrypoint function name.</param>
            <param name="stage">The shader stage, <see cref="T:Evergine.Common.Graphics.ShaderStages"/>.</param>
            <param name="parameters">The compiler parameters.</param>
            <returns>The shader bytecodes.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.GenerateTextureMipmapping(Evergine.Common.Graphics.Texture)">
            <summary>
            Generate mipmapping texture levels.
            </summary>
            <param name="texture">The texture to generate mipmapping.</param>
            <returns>True if the mipmapping has been generated.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.GetNativePointer(System.String,System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.SyncUpcopyQueue">
            <summary>
            Sync the current buffer data in the copyQueue. Internal function used in the uploadbuffer strategy.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsContext.CreateDefaultSampler">
            <summary>
            Create the default sampler.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.MatrixMajorness">
            <summary>
            Indicates the majorness of the matrix in this backend.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MatrixMajorness.RowMajor">
            <summary>
            Row major order.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MatrixMajorness.ColumnMajor">
            <summary>
            Column major order.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.MultiviewStrategy">
            <summary>
            Indicates the strategy supported to render multiple views.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MultiviewStrategy.Unsupported">
            <summary>
            Multiview is not supported in this device.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MultiviewStrategy.RenderTargetIndex">
            <summary>
            Multiview is specified by output vertex RenderTargetIndex semantic, in combination with DrawInstancing.
            </summary>
            <remarks>
            Currently only supported on DX11
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.MultiviewStrategy.ViewIndex">
            <summary>
            Multiview is specified using a vertex shader input ViewID. Additionally, you need to specify how many views do you want to render in the Framebuffer.
            </summary>
            <remarks>
            Supported on OpenGLES 3.0 or greater, WebGL2, Vulkan and DX12 in SM6.1.
            </remarks>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsContextCapabilities">
            <summary>
            Abstract class that offers the capabilities of the graphics context.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.IsComputeShaderSupported">
            <summary>
            Gets a value indicating whether this graphics context support compute shaders.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.FlipProjectionRequired">
            <summary>
            Gets a value indicating whether we need to flip projection matrix on Render Target.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.MatrixMajorness">
            <summary>
            Gets a value indicating whether this graphics context uses row major matrices by default.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.IsMRTSupported">
            <summary>
            Gets a value indicating whether this graphics context supports Multi Render Target (MRT).
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.IsShadowMapSupported">
            <summary>
            Gets a value indicating whether this graphics context supports Shadow Maps.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.ClipDepth">
            <summary>
            Gets the depth range in clip space.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.MultiviewStrategy">
            <summary>
            Gets the multiview strategy supported by this graphic context.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsContextCapabilities.IsRaytracingSupported">
            <summary>
            Gets a value indicating whether this graphics context supports Raytracing.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsPipelineDescription">
            <summary>
            Contains properties that describe the characteristics of a new pipeline state object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.RenderStates">
            <summary>
            The render state description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.Shaders">
            <summary>
            The shader state description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.InputLayouts">
            <summary>
            Describes the input vertex buffer data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.ResourceLayouts">
            <summary>
            Describes the resource layouts input array.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.PrimitiveTopology">
            <summary>
            Define how vertices are interpreted and rendered by the pipeline.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineDescription.Outputs">
            <summary>
            A description of the output attachments used by the <see cref="T:Evergine.Common.Graphics.GraphicsPipelineState"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.#ctor(Evergine.Common.Graphics.PrimitiveTopology,Evergine.Common.Graphics.InputLayouts,Evergine.Common.Graphics.ResourceLayout[],Evergine.Common.Graphics.GraphicsShaderStateDescription,Evergine.Common.Graphics.RenderStateDescription,Evergine.Common.Graphics.OutputDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GraphicsPipelineDescription"/> struct.
            </summary>
            <param name="primitiveTopology">Define how vertices are interpreted and rendered by the pipeline.</param>
            <param name="inputLayouts">Describes the input vertex buffer data.</param>
            <param name="resourceLayouts">The resource layouts array.</param>
            <param name="shaders">The shader state description.</param>
            <param name="renderStates">The render state description.</param>
            <param name="outputs">Description of the output attachments.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.Equals(Evergine.Common.Graphics.GraphicsPipelineDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.op_Equality(Evergine.Common.Graphics.GraphicsPipelineDescription,Evergine.Common.Graphics.GraphicsPipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineDescription.op_Inequality(Evergine.Common.Graphics.GraphicsPipelineDescription,Evergine.Common.Graphics.GraphicsPipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsPipelineState">
            <summary>
            This class represent the GPU graphics pipeline.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineState.Description">
            <summary>
            Gets the graphics pipelinestate description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsPipelineState.InvalidatedViewport">
            <summary>
            Invalidates the current viewport.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsPipelineState.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsPipelineState.#ctor(Evergine.Common.Graphics.GraphicsPipelineDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GraphicsPipelineState"/> class.
            </summary>
            <param name="description">The pipelineState description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsProfile">
            <summary>
            Identifies the set of device capabilities.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_9_1">
            <summary>
            DirectX 9.1 HLSL 3.0 | OpenGL ES 2.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_9_2">
            <summary>
            DirectX 9.2 HLSL 3.0 | OpenGL ES 2.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_9_3">
            <summary>
            DirectX 9.3 HLSL 3.0 | OpenGL ES 2.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_10_0">
            <summary>
            DirectX 10 HLSL 4.0 | OpenGL ES 3.0
            (Default)
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_10_1">
            <summary>
            DirectX 10.1 HLSL 4.1 | OpenGL ES 3.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_11_0">
            <summary>
            DirectX 11 HLSL 5.0 | OpenGL ES 3.1 | OpenGL 4.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_11_1">
            <summary>
            DirectX 11 HLSL 5.0 | OpenGL ES 3.1 | OpenGL 4.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_12_0">
            <summary>
            DirectX 12 HLSL 6.0 | OpenGL 4.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_12_1">
            <summary>
            DirectX 12 HLSL 6.1 | OpenGL 4.0
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsProfile.Level_12_3">
            <summary>
            DirectX12 HLSL 6.3 (Raytracing)
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsResource">
            <summary>
            A resource interface provides common actions on all resources.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsResource.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsResource.Context">
            <summary>
            The device context reference.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsResource.NativePointer">
            <summary>
            Gets the native pointer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.GraphicsResource.Disposed">
            <summary>
            Gets a value indicating whether the graphic resource has been disposed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsResource.#ctor(Evergine.Common.Graphics.GraphicsContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.GraphicsResource"/> class.
            </summary>
            <param name="context">The device context.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsResource.Dispose">
            <summary>
            Dispose this instance.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.GraphicsShaderStateDescription">
            <summary>
            This struct contains all the shader stages.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.VertexShader">
            <summary>
            Gets or sets the vertex shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.HullShader">
            <summary>
            Gets or sets the hull shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.DomainShader">
            <summary>
            Gets or sets the domain shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.GeometryShader">
            <summary>
            Gets or sets the geometry shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.PixelShader">
            <summary>
            Gets or sets the pixel shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.GraphicsShaderStateDescription.ShaderInputLayout">
            <summary>
            Represent a relationship between semantics and shader locations.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsShaderStateDescription.Equals(Evergine.Common.Graphics.GraphicsShaderStateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsShaderStateDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.GraphicsShaderStateDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.Helpers">
            <summary>
            Miscellaneous helpers for graphic operations.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.AlignUp(System.UInt32)">
            <summary>
            Align the size in bytes to nearest multiple of 256.
            </summary>
            <param name="sizeInBytes">The size in bytes.</param>
            <returns>The aligned size.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.AlignUp(System.UInt32,System.UInt32)">
            <summary>
            Align the size in bytes to nearest multiple of alignment value specified by parameter.
            </summary>
            <param name="alignment">The alignment size.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <returns>The aligned size.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.AlignUp(System.UInt32,System.UInt64)">
            <summary>
            Align the size in bytes to nearest multiple of alignment value specified by parameter.
            </summary>
            <param name="alignment">The alignment size.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <returns>The aligned size.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.EnsureArraySize``1(``0[]@,System.Int32)">
            <summary>
            Ensures the size of the array.
            </summary>
            <typeparam name="T">The type of the array items.</typeparam>
            <param name="array">The array.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.CheckArrayCapacity``1(``0[]@,System.Int32)">
            <summary>
            Ensures the size of the array.
            </summary>
            <typeparam name="T">The type of the array items.</typeparam>
            <param name="array">The array.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetSizeInBytes(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the size in byte of a PixelFormat.
            </summary>
            <param name="format">The PixelFormat.</param>
            <returns>The size in bytes of the format.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetBlockSizeInBytes(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the size in bytes of a block.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.IsCompressedFormat(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Returns a value indicating if the PixelFormat is a compressed one.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>True if the pixel format represents a compressed one. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.IsStencilFormat(Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets a value indicating if the PixelFormat can be used as stencil pixel format.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>True if the format can be used as stencil. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetRowPitch(System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the size of a row with a specified size and format.
            </summary>
            <param name="width">The row size.</param>
            <param name="format">The row PixelFormat.</param>
            <returns>The row pitch.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetNumRows(System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the number of rows, depending of the height and the pixel format.
            </summary>
            <param name="height">The height.</param>
            <param name="format">The pixel format.</param>
            <returns>The number of rows.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetSlicePitch(System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the slice pitch.
            </summary>
            <param name="rowPitch">The row pitch.</param>
            <param name="height">The height.</param>
            <param name="format">The pixel format.</param>
            <returns>The slice pitch.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetDimension(System.UInt32,System.UInt32)">
            <summary>
            Gets the dimension size of a specified mip level.
            </summary>
            <param name="largestLevelDimension">The largest level dimension.</param>
            <param name="mipLevel">The mip level.</param>
            <returns>The dimension of the current mip level.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetSubResourceInfo(Evergine.Common.Graphics.TextureDescription,System.UInt32)">
            <summary>
            Gets the sub resource info of a Texture.
            </summary>
            <param name="description">The texture info.</param>
            <param name="subResource">The subResource id.</param>
            <returns>The SubResource Info.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.ComputeSubResourceOffset(Evergine.Common.Graphics.TextureDescription,System.UInt32)">
            <summary>
            Calculates the SubResource offset of a Texture.
            </summary>
            <param name="description">The Texture description.</param>
            <param name="subResource">The SubResource index.</param>
            <returns>The SubResource offset.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.ComputeMipOffset(Evergine.Common.Graphics.TextureDescription,System.UInt32)">
            <summary>
            Computes the MipMap offset.
            </summary>
            <param name="description">The TextureDescription.</param>
            <param name="mipLevel">The MipMap Level.</param>
            <returns>The mip offset.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.ComputeLayerOffset(Evergine.Common.Graphics.TextureDescription,System.UInt32)">
            <summary>
            Computes the Layer offset.
            </summary>
            <param name="description">The TextureDescription.</param>
            <param name="arrayLayer">The array layer.</param>
            <returns>The Layer offset.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.ComputeTextureSize(Evergine.Common.Graphics.TextureDescription)">
            <summary>
            Computes the Texture Size in bytes of a Texture Description.
            </summary>
            <param name="description">The Texture Description.</param>
            <returns>The size in bytes of the texture.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetRegionSize(System.UInt32,System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Gets the block size in bytes of a texture.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="depth">The texture depth.</param>
            <param name="format">The texture pixel format.</param>
            <returns>The size in bytes of the block region.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.CalculateSubResource(Evergine.Common.Graphics.TextureDescription,System.UInt32,System.UInt32)">
            <summary>
            Calculates the sub resource index.
            </summary>
            <param name="description">The texture description.</param>
            <param name="mipLevel">The mipmap level.</param>
            <param name="arrayLayer">The array layer index.</param>
            <returns>The id of the sub resource.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetMipLevelAndArrayLayer(Evergine.Common.Graphics.TextureDescription,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the Mip Level and the Array Layer of a texture sub resource.
            </summary>
            <param name="description">The Texture Description.</param>
            <param name="subResource">The sub resource of the texture.</param>
            <param name="mipLevel">The Mip Level.</param>
            <param name="arrayLayer">The Array Layer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetMipDimensions(Evergine.Common.Graphics.TextureDescription,System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the mip level dimensions.
            </summary>
            <param name="description">The texture description.</param>
            <param name="mipLevel">The texture mip Level.</param>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="depth">The texture depth.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.GetMipLevels(System.UInt32,System.UInt32)">
            <summary>
            Gets the mip level dimensions.
            </summary>
            <param name="width">Texture Width.</param>
            <param name="height">Texture Height.</param>
            <returns>Mip levels.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Helpers.ApplyAddressMode(System.Single@,Evergine.Common.Graphics.TextureAddressMode)">
            <summary>
            Transform the given value to conform to an specified <see cref="T:Evergine.Common.Graphics.TextureAddressMode"/>.
            </summary>
            <param name="value">The value to transform.</param>
            <param name="addressMode">The address mode.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.IndexFormat">
            <summary>
            The index data format.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndexFormat.UInt16">
            <summary>
            Unsigned 16 bits integer format.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndexFormat.UInt32">
            <summary>
            Unsigned 32 bits integer format.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.IndirectDispatchArgs">
            <summary>
            Struct representing an indirect dispatch of a Command Buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDispatchArgs.ThreadGroupCountX">
            <summary>
            The thread group X size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDispatchArgs.ThreadGroupCountY">
            <summary>
            The thread group Y size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDispatchArgs.ThreadGroupCountZ">
            <summary>
            The thread group Z size.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.IndirectDispatchArgs.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.IndirectDispatchArgs"/> struct.
            </summary>
            <param name="threadGroupCountX">The thread group X size.</param>
            <param name="threadGroupCountY">The thread group Y size.</param>
            <param name="threadGroupCountZ">The thread group Z size.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced">
            <summary>
            Struct containing the info of an indirect indexed and instanced draw call.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.IndexCountPerInstance">
            <summary>
            The index count per instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.InstanceCount">
            <summary>
            The instance count.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.StartIndexLocation">
            <summary>
            The start index location.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.BaseVertexLocation">
            <summary>
            The base vertex location.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.StartInstanceLocation">
            <summary>
            The start instance location.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.IndirectDrawArgsIndexedInstanced"/> struct.
            </summary>
            <param name="indexCountPerInstance"> The index count per instance.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="startIndexLocation">The start index location.</param>
            <param name="baseVertexLocation">The base vertex location.</param>
            <param name="startInstanceLocation">The start instance location.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.IndirectDrawArgsInstanced">
            <summary>
            The arguments of an instanced indirect draw call.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsInstanced.VertexCountPerInstance">
            <summary>
            The vertex count per instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsInstanced.InstanceCount">
            <summary>
            The instance count.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsInstanced.StartVertexLocation">
            <summary>
            The start vertex location.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.IndirectDrawArgsInstanced.StartInstanceLocation">
            <summary>
            The start instance location.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.IndirectDrawArgsInstanced.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.IndirectDrawArgsInstanced"/> struct.
            </summary>
            <param name="vertexCountPerInstance"> The vertex count per instance.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="startVertexLocation">The start vertex location.</param>
            <param name="startInstanceLocation">The start instance location.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.InputLayouts">
            <summary>
            This class represent contains the descriptions of vertex input layout.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.InputLayouts.LayoutElements">
            <summary>
            The vertex inputs elements.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.InputLayouts"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.TryGetSlot(Evergine.Common.Graphics.ElementSemanticType,System.UInt32,System.UInt32@)">
            <summary>
            Try get the attribute slot by semantic and semantic index.
            </summary>
            <param name="semantic">Attribute semantic type.</param>
            <param name="semanticIndex">Attribute semantic index.</param>
            <param name="slot">Attribute slot.</param>
            <returns>True whether found the attribute and False in otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.FindLayoutElementByUsage(Evergine.Common.Graphics.ElementSemanticType,System.Int32,Evergine.Common.Graphics.ElementDescription@,System.Int32@)">
            <summary>
            Finds an layout element description. by its usage semantic.
            </summary>
            <param name="semantic">The element semantic.</param>
            <param name="semanticIndex">The semantic index.</param>
            <param name="elementDescription">The element description.</param>
            <param name="vertexBufferIndex">The vertex buffer index.</param>
            <returns>True if the input layout contains an element with the specified semantic and index. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Add(Evergine.Common.Graphics.LayoutDescription)">
            <summary>
            Adds a new layout.
            </summary>
            <param name="layout">Layout description.</param>
            <returns>My own instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.IsAssignable(Evergine.Common.Graphics.InputLayouts)">
            <summary>
            If the current layout is assignable to the parameter input layout.
            </summary>
            <param name="inputLayouts">The input layouts.</param>
            <returns>If the specified layout is compatible.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Clean">
            <summary>
            Clean object.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Equals(Evergine.Common.Graphics.InputLayouts)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.op_Equality(Evergine.Common.Graphics.InputLayouts,Evergine.Common.Graphics.InputLayouts)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.op_Inequality(Evergine.Common.Graphics.InputLayouts,Evergine.Common.Graphics.InputLayouts)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Read(System.IO.BinaryReader)">
            <summary>
            Read InputLayouts from binary file.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The readed inputLayouts.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.InputLayouts.Write(System.IO.BinaryWriter)">
            <summary>
            Write InputLayouts in a binary file.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.LayoutDescription">
            <summary>
            A generic description of vertex inputs to the device's input assembler stage.
            This object describes the inputs from a single vertex buffer.
            </summary>
            <remarks>Shaders may use inputs from multiple vertex buffers.</remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutDescription.Elements">
            <summary>
            The collection of individual vertex elements comprising a single vertex.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutDescription.StepFunction">
            <summary>
            The frequency with which the vertex function fetches attributes data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutDescription.StepRate">
            <summary>
            A value controlling how often data for instances is advanced for this layout. For per-vertex elements, this value
            should be 0.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutDescription.Stride">
            <summary>
            The total size of an individual vertex in bytes.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.#ctor(Evergine.Common.Graphics.VertexStepFunction,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LayoutDescription"/> class.
            </summary>
            <param name="stepFunction">The frequency with which the vertex function fetches attributes data.</param>
            <param name="stepRate">The number of instances to draw using the same per-instance data before advancing in
            the buffer by one element. This value must be 0 for an element that contains per-vertex data.
            </param>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.Add(Evergine.Common.Graphics.ElementDescription)">
            <summary>
            Adds a new ElementDescription to layout.
            </summary>
            <param name="element">Element description.</param>
            <returns>My own instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.GetFormatSizeInBytes(Evergine.Common.Graphics.ElementFormat)">
            <summary>
            Get the size in byte of a specific vertex element format.
            </summary>
            <param name="format">The vertex element formant.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.Equals(Evergine.Common.Graphics.LayoutDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.op_Equality(Evergine.Common.Graphics.LayoutDescription,Evergine.Common.Graphics.LayoutDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.op_Inequality(Evergine.Common.Graphics.LayoutDescription,Evergine.Common.Graphics.LayoutDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.Read(System.IO.BinaryReader)">
            <summary>
            Read LayoutDescription from Binary file.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The readed layoutDescription.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutDescription.Write(System.IO.BinaryWriter)">
            <summary>
            Write LayoutDescription into binary file.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.LayoutElementDescription">
            <summary>
            This class represent a shader resource binding;.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutElementDescription.Slot">
            <summary>
            Gets the resource slot.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutElementDescription.Type">
            <summary>
            Gets the shader resource type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutElementDescription.Stages">
            <summary>
            Gets the resource shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutElementDescription.AllowDynamicOffset">
            <summary>
            Gets a value indicating whether this resource allow dynamic offset. Its used in some graphics backend to allow specifying dynamic offset.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LayoutElementDescription.Range">
            <summary>
            If it is greater than 0, it overrides the size of this resource (in bytes). Only valid on Constant Buffers.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.#ctor(System.UInt32,Evergine.Common.Graphics.ResourceType,Evergine.Common.Graphics.ShaderStages,System.Boolean,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LayoutElementDescription"/> struct.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="type">The resource type.</param>
            <param name="stages">The stages where this resource will be available.</param>
            <param name="allowDynamicOffset">Allow specifying dynamic offset. Only valid on Constant Buffers.</param>
            <param name="size">If it is greater than 0, it overrides the size of this resource (in bytes). Only valid on Constant Buffers.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.Equals(Evergine.Common.Graphics.LayoutElementDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.op_Equality(Evergine.Common.Graphics.LayoutElementDescription,Evergine.Common.Graphics.LayoutElementDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LayoutElementDescription.op_Inequality(Evergine.Common.Graphics.LayoutElementDescription,Evergine.Common.Graphics.LayoutElementDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.LightStruct">
            <summary>
            Struct with aligned data for sending a light to the shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.ConeAngle">
            <summary>
            The cone angle.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.LightRange">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.Direction">
            <summary>
            The direction.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.Intensity">
            <summary>
            Sport exponent.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LightStruct.World">
            <summary>
            The world instance.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.LinearColor">
            <summary>
            Represents a 32-bit color in Linear Space.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.R">
            <summary>
            The x coordinate of this <see cref="T:Evergine.Common.Graphics.LinearColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.G">
            <summary>
            The y coordinate of this <see cref="T:Evergine.Common.Graphics.LinearColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.B">
            <summary>
            The z coordinate of this <see cref="T:Evergine.Common.Graphics.LinearColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.A">
            <summary>
            The w coordinate of this <see cref="T:Evergine.Common.Graphics.LinearColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.AsVector4">
            <summary>
            The linear color converted to <see cref="T:Evergine.Mathematics.Vector4"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.LinearColor.AsVector3">
            <summary>
            The linear color converted to <see cref="T:Evergine.Mathematics.Vector3"/>.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="r">The r color component in linear space.</param>
            <param name="g">The g color component in linear space.</param>
            <param name="b">The b color component in linear space.</param>
            <param name="a">The a color component in linear space.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="hex">hexadecimal color code.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="vector">Vector3 with the color data.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(Evergine.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="vector">Vector4 with the color data.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(Evergine.Common.Graphics.Color@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="gammaColor">The <see cref="T:Evergine.Common.Graphics.Color"/> instance in Gamma space.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.LinearColor"/> struct.
            </summary>
            <param name="k">The color temperature in Kelvin.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.Equals(Evergine.Common.Graphics.LinearColor)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.Equals(Evergine.Common.Graphics.LinearColor@)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Evergine.Common.Graphics.LinearColor"/> are equal.
            </summary>
            <param name="other">The vector to compare with the current instance.</param>
            <returns>
            <c>true</c> if other and this instance are the same type and represent the same value;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToLinear(Evergine.Common.Graphics.LinearColor@)">
            <summary>
            Convert to Linear color space.
            </summary>
            <param name="linearColor">The converted linear color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToLinear">
            <summary>
            Convert to Linear color space.
            </summary>
            <returns>The converted linear color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToGamma(Evergine.Common.Graphics.GammaColor@)">
            <summary>
            Convert to Gamma color space.
            </summary>
            <param name="gammaColor">The converted Gamma color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToGamma">
            <summary>
            Convert to Gamma color space.
            </summary>
            <returns>The converted Gamma color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToColor(Evergine.Common.Graphics.Color@)">
            <summary>
            Convert to Color (in Gamma space).
            </summary>
            <param name="color">The output color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.ToColor">
            <summary>
            Convert to Color (in Gamma space).
            </summary>
            <returns>The output color.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.op_Multiply(Evergine.Common.Graphics.LinearColor,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First LinearColor.</param>
            <param name="b">Second LinearColor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.op_Multiply(System.Single,Evergine.Common.Graphics.LinearColor)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="b">First LinearColor.</param>
            <param name="a">Second LinearColor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.op_Division(Evergine.Common.Graphics.LinearColor,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">First LinearColor.</param>
            <param name="b">Second LinearColor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.op_Equality(Evergine.Common.Graphics.LinearColor,Evergine.Common.Graphics.LinearColor)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.LinearColor.op_Inequality(Evergine.Common.Graphics.LinearColor,Evergine.Common.Graphics.LinearColor)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.MapMode">
            <summary>
            Identifies how a graphics resource will be mapped into CPU address space.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MapMode.Read">
            <summary>
            A read-only resource mapping. The mapped data region is not writable, and cannot be used to transfer data into the graphics resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MapMode.Write">
            <summary>
            A write-only resource mapping. The mapped data region is writable, and will be transferred into the graphics resource
            when <see cref="M:Evergine.Common.Graphics.GraphicsContext.UnmapMemory(Evergine.Common.Graphics.GraphicsResource,System.UInt32)"/>  is called.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MapMode.ReadWrite">
            <summary>
            A read-write resource mapping. The mapped data region is both readable and writable.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.MappedResource">
            <summary>
            The resource which has been mapped.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.Resource">
            <summary>
            The resource which has been mapped.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.Mode">
            <summary>
            Identifies the <see cref="T:Evergine.Common.Graphics.MapMode"/> that was used to map the resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.Data">
            <summary>
             A pointer to the start of the mapped data region.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.SizeInBytes">
            <summary>
            The total size in bytes, of the mapped data region.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.SubresourceIndex">
            <summary>
            For <see cref="T:Evergine.Common.Graphics.Texture"/> resources, this is the subresource which is mapped.
            For <see cref="T:Evergine.Common.Graphics.Buffer"/> resources, this field has no meaning.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.RowPitch">
            <summary>
            For <see cref="T:Evergine.Common.Graphics.Texture"/> resources, this is the number of bytes between each row of texels.
            For <see cref="T:Evergine.Common.Graphics.Buffer"/> resources, this field has no meaning.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.MappedResource.SlicePitch">
            <summary>
            For <see cref="T:Evergine.Common.Graphics.Texture"/> resources, this is the number of bytes between each slice of a 3D texture.
            For <see cref="T:Evergine.Common.Graphics.Buffer"/> resources, this field has no meaning.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.MappedResource.#ctor(Evergine.Common.Graphics.GraphicsResource,Evergine.Common.Graphics.MapMode,System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource which has been mapped.</param>
            <param name="mode">The mapMode used to map the resource.</param>
            <param name="data">A pointer to the start of the mapped data region.</param>
            <param name="sizeInBytes">The total size in bytes, of the mapped data region.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.MappedResource.#ctor(Evergine.Common.Graphics.GraphicsResource,Evergine.Common.Graphics.MapMode,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource which has been mapped.</param>
            <param name="mode">The mapMode used to map the resource.</param>
            <param name="data">A pointer to the start of the mapped data region.</param>
            <param name="sizeInBytes">The total size in bytes, of the mapped data region.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="rowPitch">The number of bytes per row.</param>
            <param name="slicePitch">The number of bytes per slice.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.OutputAttachmentDescription">
            <summary>
            Contains properties that describe the characteristics of a new pipeline state object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputAttachmentDescription.Format">
            <summary>
            The pixel format.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputAttachmentDescription.ResolveMSAA">
            <summary>
            Indicates if the <see cref="T:Evergine.Common.Graphics.Texture"/> with MSAA attachment need to be resolved.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.#ctor(Evergine.Common.Graphics.PixelFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.OutputAttachmentDescription"/> struct.
            </summary>
            <param name="format">The format of the <see cref="T:Evergine.Common.Graphics.Texture"/> attachment.</param>
            <param name="resolveMSAA">Indicates if the <see cref="T:Evergine.Common.Graphics.Texture"/> with MSAA attachment need to be resolved.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.Equals(Evergine.Common.Graphics.OutputAttachmentDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.op_Equality(Evergine.Common.Graphics.OutputAttachmentDescription,Evergine.Common.Graphics.OutputAttachmentDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputAttachmentDescription.op_Inequality(Evergine.Common.Graphics.OutputAttachmentDescription,Evergine.Common.Graphics.OutputAttachmentDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.OutputDescription">
            <summary>
            Contains properties that describe the characteristics of a new pipeline state object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputDescription.DepthAttachment">
            <summary>
            A description of the depth attachment, or null if none exists.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputDescription.ColorAttachments">
            <summary>
            An array of attachment descriptions, one for each color attachment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputDescription.ArraySliceCount">
            <summary>
            Gets the number of view counts.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputDescription.SampleCount">
            <summary>
            The number of samples in each target attachment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.OutputDescription.CachedHashCode">
            <summary>
            Precomputed outputDescription hash. Used to speed up the comparison between output descriptions.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.#ctor(System.Nullable{Evergine.Common.Graphics.OutputAttachmentDescription},Evergine.Common.Graphics.OutputAttachmentDescription[],Evergine.Common.Graphics.TextureSampleCount,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.OutputDescription"/> struct.
            </summary>
            <param name="depth">A description of the depth attachment.</param>
            <param name="colors">An array of descriptions of each color attachment.</param>
            <param name="sampleCount">The number of samples in each target attachment.</param>
            <param name="arraySliceCount">The number of views rendered.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.CreateFromFrameBuffer(Evergine.Common.Graphics.FrameBuffer)">
            <summary>
            Create a new instance of <see cref="T:Evergine.Common.Graphics.OutputDescription"/> from a <see cref="T:Evergine.Common.Graphics.FrameBuffer"/>.
            </summary>
            <param name="frameBuffer">The framebuffer to extract the attachment description.</param>
            <returns>A new instance of OutputDescription.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.Equals(Evergine.Common.Graphics.OutputDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.op_Equality(Evergine.Common.Graphics.OutputDescription,Evergine.Common.Graphics.OutputDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.OutputDescription.op_Inequality(Evergine.Common.Graphics.OutputDescription,Evergine.Common.Graphics.OutputDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.PipelineState">
            <summary>
            This class represent the GPU graphics pipeline.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.PipelineState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.PixelFormat">
            <summary>
            Pixel format type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Unknown">
            <summary>
                The format is not known.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32A32_Typeless">
            <summary>
                A four-component, 128-bit typeless format that supports 32 bits per channel including
                alpha. 1
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32A32_Float">
            <summary>
                A four-component, 128-bit floating-point format that supports 32 bits per channel
                including alpha. 1
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32A32_UInt">
            <summary>
               A four-component, 128-bit unsigned-integer format that supports 32 bits per channel
                including alpha. 1
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32A32_SInt">
            <summary>
                A four-component, 128-bit signed-integer format that supports 32 bits per channel
                including alpha. 1
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32_Typeless">
            <summary>
                A three-component, 96-bit typeless format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32_Float">
            <summary>
                A three-component, 96-bit floating-point format that supports 32 bits per color
                channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32_UInt">
            <summary>
                A three-component, 96-bit unsigned-integer format that supports 32 bits per color
                channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32B32_SInt">
            <summary>
                A three-component, 96-bit signed-integer format that supports 32 bits per color
                channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_Typeless">
            <summary>
                A four-component, 64-bit typeless format that supports 16 bits per channel including
                alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_Float">
            <summary>
                A four-component, 64-bit floating-point format that supports 16 bits per channel
                including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_UNorm">
            <summary>
                A four-component, 64-bit unsigned-normalized-integer format that supports 16
                bits per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_UInt">
            <summary>
                A four-component, 64-bit unsigned-integer format that supports 16 bits per channel
                including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_SNorm">
            <summary>
                A four-component, 64-bit signed-normalized-integer format that supports 16 bits
                per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16B16A16_SInt">
            <summary>
                A four-component, 64-bit signed-integer format that supports 16 bits per channel
                including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32_Typeless">
            <summary>
                A two-component, 64-bit typeless format that supports 32 bits for the red channel
                and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32_Float">
            <summary>
                A two-component, 64-bit floating-point format that supports 32 bits for the red
                channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32_UInt">
            <summary>
                A two-component, 64-bit unsigned-integer format that supports 32 bits for the
                red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G32_SInt">
            <summary>
                A two-component, 64-bit signed-integer format that supports 32 bits for the red
                channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32G8X24_Typeless">
            <summary>
                A two-component, 64-bit typeless format that supports 32 bits for the red channel,
                8 bits for the green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.D32_Float_S8X24_UInt">
            <summary>
                A 32-bit floating-point component, and two unsigned-integer components (with
                an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and
                24 bits are unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32_Float_X8X24_Typeless">
            <summary>
                A 32-bit floating-point component, and two typeless components (with an additional
                32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24
                bits are unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.X32_Typeless_G8X24_UInt">
            <summary>
                A 32-bit typeless component, and two unsigned-integer components (with an additional
                32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits
                are unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R10G10B10A2_Typeless">
            <summary>
                A four-component, 32-bit typeless format that supports 10 bits for each color
                and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R10G10B10A2_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format that supports 10
                bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R10G10B10A2_UInt">
            <summary>
                A four-component, 32-bit unsigned-integer format that supports 10 bits for each
                color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R11G11B10_Float">
            <summary>
                Three partial-precision floating-point numbers encoded into a single 32-bit value
                (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15)
                exponent). There are no sign bits, and there is a 5-bit biased (15) exponent
                for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B, as
                shown in the following illustration.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_Typeless">
            <summary>
                A four-component, 32-bit typeless format that supports 8 bits per channel including
                alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits
                per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_UNorm_SRgb">
            <summary>
                A four-component, 32-bit unsigned-normalized integer sRGB format that supports
                8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_UInt">
            <summary>
                A four-component, 32-bit unsigned-integer format that supports 8 bits per channel
                including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_SNorm">
            <summary>
                A four-component, 32-bit signed-normalized-integer format that supports 8 bits
                per channel including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8B8A8_SInt">
            <summary>
                A four-component, 32-bit signed-integer format that supports 8 bits per channel
                including alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_Typeless">
            <summary>
                A two-component, 32-bit typeless format that supports 16 bits for the red channel
                and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_Float">
            <summary>
                A two-component, 32-bit floating-point format that supports 16 bits for the red
                channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_UNorm">
            <summary>
                A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits
                each for the green and red channels.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_UInt">
            <summary>
                A two-component, 32-bit unsigned-integer format that supports 16 bits for the
                red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_SNorm">
            <summary>
                A two-component, 32-bit signed-normalized-integer format that supports 16 bits
                for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16G16_SInt">
            <summary>
                A two-component, 32-bit signed-integer format that supports 16 bits for the red
                channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32_Typeless">
            <summary>
                A single-component, 32-bit typeless format that supports 32 bits for the red
                channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.D32_Float">
            <summary>
                A single-component, 32-bit floating-point format that supports 32 bits for depth.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32_Float">
            <summary>
                A single-component, 32-bit floating-point format that supports 32 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32_UInt">
            <summary>
                A single-component, 32-bit unsigned-integer format that supports 32 bits for
                the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R32_SInt">
            <summary>
                A single-component, 32-bit signed-integer format that supports 32 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R24G8_Typeless">
            <summary>
                A two-component, 32-bit typeless format that supports 24 bits for the red channel
                and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.D24_UNorm_S8_UInt">
            <summary>
                A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R24_UNorm_X8_Typeless">
            <summary>
                A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized
                integer, with an additional typeless 8 bits. This format has 24 bits red channel
                and 8 bits unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.X24_Typeless_G8_UInt">
            <summary>
                A 32-bit format, that contains a 24 bit, single-component, typeless format, with
                an additional 8 bit unsigned integer component. This format has 24 bits unused
                and 8 bits green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_Typeless">
            <summary>
                A two-component, 16-bit typeless format that supports 8 bits for the red channel
                and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_UNorm">
            <summary>
                A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits
                for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_UInt">
            <summary>
                A two-component, 16-bit unsigned-integer format that supports 8 bits for the
                red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_SNorm">
            <summary>
                A two-component, 16-bit signed-normalized-integer format that supports 8 bits
                for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_SInt">
            <summary>
                A two-component, 16-bit signed-integer format that supports 8 bits for the red
                channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_Typeless">
            <summary>
                A single-component, 16-bit typeless format that supports 16 bits for the red
                channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_Float">
            <summary>
                A single-component, 16-bit floating-point format that supports 16 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.D16_UNorm">
            <summary>
                A single-component, 16-bit unsigned-normalized-integer format that supports 16
                bits for depth.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_UNorm">
            <summary>
                A single-component, 16-bit unsigned-normalized-integer format that supports 16
                bits for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_UInt">
            <summary>
                A single-component, 16-bit unsigned-integer format that supports 16 bits for
                the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_SNorm">
            <summary>
                A single-component, 16-bit signed-normalized-integer format that supports 16
                bits for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R16_SInt">
            <summary>
                A single-component, 16-bit signed-integer format that supports 16 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8_Typeless">
            <summary>
                A single-component, 8-bit typeless format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8_UNorm">
            <summary>
                A single-component, 8-bit unsigned-normalized-integer format that supports 8
                bits for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8_UInt">
            <summary>
                A single-component, 8-bit unsigned-integer format that supports 8 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8_SNorm">
            <summary>
                A single-component, 8-bit signed-normalized-integer format that supports 8 bits
                for the red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8_SInt">
            <summary>
                A single-component, 8-bit signed-integer format that supports 8 bits for the
                red channel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.A8_UNorm">
            <summary>
                A single-component, 8-bit unsigned-normalized-integer format for alpha only.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R1_UNorm">
            <summary>
                A single-component, 1-bit unsigned-normalized integer format that supports 1
                bit for the red channel. 2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R9G9B9E5_Sharedexp">
            <summary>
                Three partial-precision floating-point numbers encoded into a single 32-bit value
                all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit
                mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is
                a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as
                shown in the following illustration. 2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R8G8_B8G8_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format. This packed RGB
                format is analogous to the UYVY format. Each 32-bit block describes a pair of
                pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and
                the G8 values are unique to each pixel. 3 Width must be even.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.G8R8_G8B8_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format. This packed RGB
                format is analogous to the YUY2 format. Each 32-bit block describes a pair of
                pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and
                the G8 values are unique to each pixel. 3 Width must be even.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC1_Typeless">
            <summary>
            DXT1 typeless
                Four-component typeless block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC1_UNorm">
            <summary>
             DXT 1
                Four-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC1_UNorm_SRgb">
            <summary>
                Four-component block-compression format for sRGB data. For information about
                block-compression formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC2_Typeless">
            <summary>
                Four-component typeless block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC2_UNorm">
            <summary>
                Four-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC2_UNorm_SRgb">
            <summary>
                Four-component block-compression format for sRGB data. For information about
                block-compression formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC3_Typeless">
            <summary>
                Four-component typeless block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC3_UNorm">
            <summary>
            DXT 5
               Four-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC3_UNorm_SRgb">
            <summary>
                Four-component block-compression format for sRGB data. For information about
                block-compression formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC4_Typeless">
            <summary>
                One-component typeless block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC4_UNorm">
            <summary>
                One-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC4_SNorm">
            <summary>
                One-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC5_Typeless">
            <summary>
                Two-component typeless block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC5_UNorm">
            <summary>
                Two-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC5_SNorm">
            <summary>
                Two-component block-compression format. For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B5G6R5_UNorm">
            <summary>
                A three-component, 16-bit unsigned-normalized-integer format that supports 5
                bits for blue, 6 bits for green, and 5 bits for red. Direct3D 10 through Direct3D
                11:??This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices
                do not support this format. Direct3D 11.1:??This value is not supported until
                Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B5G5R5A1_UNorm">
            <summary>
                A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits
                for each color channel and 1-bit alpha. Direct3D 10 through Direct3D 11:??This
                value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support
                this format. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8A8_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits
                for each color channel and 8-bit alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8X8_UNorm">
            <summary>
                A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits
                for each color channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>
                A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits
                for each color channel and 2-bit alpha.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8A8_Typeless">
            <summary>
                A four-component, 32-bit typeless format that supports 8 bits for each channel
                including alpha. 4
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8A8_UNorm_SRgb">
            <summary>
                A four-component, 32-bit unsigned-normalized standard RGB format that supports
                8 bits for each channel including alpha. 4
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8X8_Typeless">
            <summary>
                A four-component, 32-bit typeless format that supports 8 bits for each color
                channel, and 8 bits are unused. 4
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B8G8R8X8_UNorm_SRgb">
            <summary>
                A four-component, 32-bit unsigned-normalized standard RGB format that supports
                8 bits for each color channel, and 8 bits are unused. 4
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC6H_Typeless">
            <summary>
                A typeless block-compression format. 4 For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC6H_Uf16">
            <summary>
                A block-compression format. 4 For information about block-compression formats,
                see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC6H_Sf16">
            <summary>
                A block-compression format. 4 For information about block-compression formats,
                see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC7_Typeless">
            <summary>
                A typeless block-compression format. 4 For information about block-compression
                formats, see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC7_UNorm">
            <summary>
                A block-compression format. 4 For information about block-compression formats,
                see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.BC7_UNorm_SRgb">
            <summary>
                A block-compression format. 4 For information about block-compression formats,
                see Texture Block Compression in Direct3D 11.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.AYUV">
            <summary>
                Most common YUV 4:4:4 video resource format. Valid view formats for this video
                resource format are R8G8B8A8_UNorm and R8G8B8A8_UInt.
                For UAVs, an additional valid view format is R32_UInt. By
                using R32_UInt for UAVs, you can both read and write as opposed
                to just write for R8G8B8A8_UNorm and R8G8B8A8_UInt.
                Supported view types are SRV, RTV, and UAV. One view provides a straightforward
                mapping of the entire surface. The mapping to the view channel is V->R8, U->G8,
                Y->B8, and A->A8. For more info about YUV formats for video rendering, see Recommended
                8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported
                until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Y410">
            <summary>
                10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats
                for this video resource format are R10G10B10A2_UNorm and
                R10G10B10A2_UInt. For UAVs, an additional valid view format
                is R32_UInt. By using R32_UInt for UAVs,
                you can both read and write as opposed to just write for R10G10B10A2_UNorm
                and R10G10B10A2_UInt. Supported view types are SRV and UAV.
                One view provides a straightforward mapping of the entire surface. The mapping
                to the view channel is U->R10, Y->G10, V->B10, and A->A2. For more info about
                YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video
                Rendering. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Y416">
            <summary>
                16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats
                for this video resource format are R16G16B16A16_UNorm and
                R16G16B16A16_UInt. Supported view types are SRV and UAV.
                One view provides a straightforward mapping of the entire surface. The mapping
                to the view channel is U->R16, Y->G16, V->B16, and A->A16. For more info about
                YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video
                Rendering. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.NV12">
            <summary>
                Most common YUV 4:2:0 video resource format. Valid luminance data view formats
                for this video resource format are R8_UNorm and R8_UInt.
                Valid chrominance data view formats (width and height are each 1/2 of luminance
                view) for this video resource format are R8G8_UNorm and R8G8_UInt.
                Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping
                to the view channel is Y->R8. For chrominance data view, the mapping to the view
                channel is U->R8 and V->G8. For more info about YUV formats for video rendering,
                see Recommended 8-Bit YUV Formats for Video Rendering. Width and height must
                be even. Direct3D 11 staging resources and initData parameters for this format
                use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch * height)
                bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes are the
                UV plane. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.P010">
            <summary>
                10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data
                view formats for this video resource format are R16_UNorm
                and R16_UInt. The runtime does not enforce whether the lowest
                6 bits are 0 (given that this video resource format is a 10-bit format that uses
                16 bits). If required, application shader code would have to enforce this manually.
                From the runtime's point of view, P010 is no different than
                P016. Valid chrominance data view formats (width and height
                are each 1/2 of luminance view) for this video resource format are R16G16_UNorm
                and R16G16_UInt. For UAVs, an additional valid chrominance
                data view format is R32_UInt. By using R32_UInt
                for UAVs, you can both read and write as opposed to just write for R16G16_UNorm
                and R16G16_UInt. Supported view types are SRV, RTV, and UAV.
                For luminance data view, the mapping to the view channel is Y->R16. For chrominance
                data view, the mapping to the view channel is U->R16 and V->G16. For more info
                about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for
                Video Rendering. Width and height must be even. Direct3D 11 staging resources
                and initData parameters for this format use (rowPitch * (height + (height / 2)))
                bytes. The first (SysMemPitch * height) bytes are the Y plane, the remaining
                (SysMemPitch * (height / 2)) bytes are the UV plane. Direct3D 11.1:??This value
                is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.P016">
            <summary>
                16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data
                view formats for this video resource format are R16_UNorm
                and R16_UInt. Valid chrominance data view formats (width
                and height are each 1/2 of luminance view) for this video resource format are
                R16G16_UNorm and R16G16_UInt. For UAVs,
                an additional valid chrominance data view format is R32_UInt.
                By using R32_UInt for UAVs, you can both read and write as
                opposed to just write for R16G16_UNorm and R16G16_UInt.
                Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping
                to the view channel is Y->R16. For chrominance data view, the mapping to the
                view channel is U->R16 and V->G16. For more info about YUV formats for video
                rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Width and height
                must be even. Direct3D 11 staging resources and initData parameters for this
                format use (rowPitch * (height + (height / 2))) bytes. The first (SysMemPitch
                * height) bytes are the Y plane, the remaining (SysMemPitch * (height / 2)) bytes
                are the UV plane. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Opaque420">
            <summary>
                8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled
                where each pixel has its own Y value, but each 2x2 pixel block shares a single
                U and V value. The runtime requires that the width and height of all resources
                that are created with this format are multiples of 2. The runtime also requires
                that the left, right, top, and bottom members of any RECT
                that are used for this format are multiples of 2. This format differs from NV12
                in that the layout of the data within the resource is completely opaque to applications.
                Applications cannot use the CPU to map the resource and then access the data
                within the resource. You cannot use shaders with this format. Because of this
                behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example,
                YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation
                better than NV12 can be used when the application does not need the data to be
                in a standard layout. For more info about YUV formats for video rendering, see
                Recommended 8-Bit YUV Formats for Video Rendering. Width and height must be even.
                Direct3D 11 staging resources and initData parameters for this format use (rowPitch
                * (height + (height / 2))) bytes. Direct3D 11.1:??This value is not supported
                until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.YUY2">
            <summary>
                Most common YUV 4:2:2 video resource format. Valid view formats for this video
                resource format are R8G8B8A8_UNorm and R8G8B8A8_UInt.
                For UAVs, an additional valid view format is R32_UInt. By
                using R32_UInt for UAVs, you can both read and write as opposed
                to just write for R8G8B8A8_UNorm and R8G8B8A8_UInt.
                Supported view types are SRV and UAV. One view provides a straightforward mapping
                of the entire surface. The mapping to the view channel is Y0->R8, U0->G8, Y1->B8,
                and V0->A8. A unique valid view format for this video resource format is R8G8_B8G8_UNorm.
                With this view format, the width of the view appears to be twice what the R8G8B8A8_UNorm
                or R8G8B8A8_UInt view would be when hardware reconstructs
                RGBA automatically on read and before filtering. This Direct3D hardware behavior
                is legacy and is likely not useful any more. With this view format, the mapping
                to the view channel is Y0->R8, U0-> G8[0], Y1->B8, and V0-> G8[1]. For more info
                about YUV formats for video rendering, see Recommended 8-Bit YUV Formats for
                Video Rendering. Width must be even. Direct3D 11.1:??This value is not supported
                until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Y210">
            <summary>
                10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats
                for this video resource format are R16G16B16A16_UNorm and
                R16G16B16A16_UInt. The runtime does not enforce whether the
                lowest 6 bits are 0 (given that this video resource format is a 10-bit format
                that uses 16 bits). If required, application shader code would have to enforce
                this manually. From the runtime's point of view, Y210 is
                no different than Y216. Supported view types are SRV and
                UAV. One view provides a straightforward mapping of the entire surface. The mapping
                to the view channel is Y0->R16, U->G16, Y1->B16, and V->A16. For more info about
                YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video
                Rendering. Width must be even. Direct3D 11.1:??This value is not supported until
                Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.Y216">
            <summary>
                16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats
                for this video resource format are R16G16B16A16_UNorm and
                R16G16B16A16_UInt. Supported view types are SRV and UAV.
                One view provides a straightforward mapping of the entire surface. The mapping
                to the view channel is Y0->R16, U->G16, Y1->B16, and V->A16. For more info about
                YUV formats for video rendering, see Recommended 8-Bit YUV Formats for Video
                Rendering. Width must be even. Direct3D 11.1:??This value is not supported until
                Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.NV11">
            <summary>
                Most common planar YUV 4:1:1 video resource format. Valid luminance data view
                formats for this video resource format are R8_UNorm and R8_UInt.
                Valid chrominance data view formats (width and height are each 1/4 of luminance
                view) for this video resource format are R8G8_UNorm and R8G8_UInt.
                Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping
                to the view channel is Y->R8. For chrominance data view, the mapping to the view
                channel is U->R8 and V->G8. For more info about YUV formats for video rendering,
                see Recommended 8-Bit YUV Formats for Video Rendering. Width must be a multiple
                of 4. Direct3D11 staging resources and initData parameters for this format use
                (rowPitch * height * 2) bytes. The first (SysMemPitch * height) bytes are the
                Y plane, the next ((SysMemPitch / 2) * height) bytes are the UV plane, and the
                remainder is padding. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.AI44">
            <summary>
                4-bit palletized YUV format that is commonly used for DVD subpicture. For more
                info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats
                for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.IA44">
            <summary>
                4-bit palletized YUV format that is commonly used for DVD subpicture. For more
                info about YUV formats for video rendering, see Recommended 8-Bit YUV Formats
                for Video Rendering. Direct3D 11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.P8">
            <summary>
                8-bit palletized format that is used for palletized RGB data when the processor
                processes ISDB-T data and for palletized YUV data when the processor processes
                BluRay data. For more info about YUV formats for video rendering, see Recommended
                8-Bit YUV Formats for Video Rendering. Direct3D 11.1:??This value is not supported
                until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.A8P8">
            <summary>
                8-bit palletized format with 8 bits of alpha that is used for palletized YUV
                data when the processor processes BluRay data. For more info about YUV formats
                for video rendering, see Recommended 8-Bit YUV Formats for Video Rendering. Direct3D
                11.1:??This value is not supported until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.B4G4R4A4_UNorm">
            <summary>
                A four-component, 16-bit unsigned-normalized integer format that supports 4 bits
                for each channel including alpha. Direct3D 11.1:??This value is not supported
                until Windows?8.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.P208">
            <summary>
                Forces this enumeration to compile to 32 bits in size. Without this value, some
                compilers would allow this enumeration to compile to a size other than 32 bits.
                This value is not used.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.V208">
            <summary>
                No documentation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.V408">
            <summary>
                No documentation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.R4G4B4A4">
            <summary>
            16-bit RGBA.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_2BPP_RGB">
            <summary>
            PVRTC 2bpp rgb.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_4BPP_RGB">
            <summary>
            PVRTC 4bpp rgb.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_2BPP_RGBA">
            <summary>
            PVRTC 2bpp rgba.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_4BPP_RGBA">
            <summary>
            PVRTC 4bpp rgba.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_2BPP_RGB_SRGB">
            <summary>
            PVRTC 2bpp srgb.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_4BPP_RGB_SRGB">
            <summary>
            PVRTC 4bpp srgb.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_2BPP_RGBA_SRGBA">
            <summary>
            PVRTC 2bpp srgba.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.PVRTC_4BPP_RGBA_SRGBA">
            <summary>
            PVRTC 4bpp srgba.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.ETC1_RGB8">
            <summary>
            ETC1.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.ETC2_RGBA">
            <summary>
            ETC2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PixelFormat.ETC2_RGBA_SRGB">
            <summary>
            ETC2 sRgb.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.PointLightStruct">
            <summary>
            Struct with aligned data for sending a point light to the shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PointLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PointLightStruct.Attenuation">
            <summary>
            Light Attenuation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PointLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PointLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.PrimitiveTopology">
            <summary>
            How the pipeline interprets vertex data that is bound to the input-assembler stage.
            These primitive topology values determine how the vertex data is rendered on screen.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.Undefined">
            <summary>
            The IA stage has not been initialized with a primitive topology.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.PointList">
            <summary>
            Interpret the vertex data as a list of points.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.LineList">
            <summary>
            Interpret the vertex data as a list of lines.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.LineStrip">
            <summary>
            Interpret the vertex data as a line strip.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.TriangleList">
            <summary>
            Interpret the vertex data as a list of triangles.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.TriangleStrip">
            <summary>
            Interpret the vertex data as a triangle strip.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.LineListWithAdjacency">
            <summary>
            Interpret the vertex data as a list of lines with adjacency data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.LineStripWithAdjacency">
            <summary>
            Interpret the vertex data as a line strip with adjacency data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.TriangleListWithAdjacency">
            <summary>
            Interpret the vertex data as a list of triangles with adjacency data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.TriangleStripWithAdjacency">
            <summary>
            Interpret the vertex data as a triangle strip with adjacency data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.PrimitiveTopology.Patch_List">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.PrimitiveTopologyExtensions">
            <summary>
            Primitive topology extensions.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.PrimitiveTopologyExtensions.ControlPoints(Evergine.Common.Graphics.PrimitiveTopology,System.Int32)">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
            <param name="topology">The primitive topology.</param>
            <param name="points">Number of control points. Valid range 1 - 32.</param>
            <returns>The result primitive topology.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.QueryHeap">
            <summary>
            This class represent a queryheap resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryHeap.Description">
            <summary>
            Gets the queryheap description.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeap.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.QueryHeapDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.QueryHeap"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="description">The queryheap description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeap.ReadData(System.UInt32,System.UInt32,System.UInt64[])">
            <summary>
            Extract data from one or more queries.
            </summary>
            <param name="startIndex">Specifies the index of the fist query to read.</param>
            <param name="count">Specifies the number of queries to read.</param>
            <param name="results">ulong buffer with the extracted queries data.</param>
            <returns>Return true if all queries to read are available and false if not.</returns>
            <remarks>If the result is false, the results will conttains the latest available results.</remarks>
        </member>
        <member name="T:Evergine.Common.Graphics.QueryHeapDescription">
            <summary>
            Contains properties that describe the characteristics of a new queryheap object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryHeapDescription.Type">
            <summary>
            Specifies the queryheap type, <see cref="T:Evergine.Common.Graphics.QueryType"/> structure.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryHeapDescription.QueryCount">
            <summary>
            Specifies the queryheap capacity.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeapDescription.Equals(Evergine.Common.Graphics.QueryHeapDescription)">
            <summary>
            Determines whether the specified parameter is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeapDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeapDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeapDescription.op_Equality(Evergine.Common.Graphics.QueryHeapDescription,Evergine.Common.Graphics.QueryHeapDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.QueryHeapDescription.op_Inequality(Evergine.Common.Graphics.QueryHeapDescription,Evergine.Common.Graphics.QueryHeapDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.QueryType">
            <summary>
            Specifies the type of query.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryType.Timestamp">
            <summary>
            Indicates the query is for high definition GPU and CPU timestamps.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryType.Occlusion">
            <summary>
            Indicates the query is for depth/stencil occlusion counts.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.QueryType.BinaryOcclusion">
            <summary>
            Indicates the query is for a binary depth/stencil occlusion statistics.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.RasterizerStateDescription">
            <summary>
            Describes a rasterizer state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.FillMode">
            <summary>
            Determines the fill mode to use when rendering.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.FrontCounterClockwise">
            <summary>
            Determines if a triangle is front- or back-facing. If this parameter is TRUE, a triangle will be considered front-facing
            if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise.
            If this parameter is FALSE, the opposite is true.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.DepthBias">
            <summary>
            Depth value added to a given pixel. For info about depth bias.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.DepthBiasClamp">
            <summary>
            Maximum depth bias of a pixel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.SlopeScaledDepthBias">
            <summary>
            Scalar on a given pixel's slope.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.DepthClipEnable">
            <summary>
            Enable clipping based on distance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.ScissorEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStateDescription.AntialiasedLineEnable">
            <summary>
            Specifies whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is FALSE.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.RasterizerStateDescription.Default">
            <summary>
            Gets default values for RasterizerStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.SetDefault">
            <summary>
            Default rasterizerstatedescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.Equals(Evergine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.op_Equality(Evergine.Common.Graphics.RasterizerStateDescription,Evergine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStateDescription.op_Inequality(Evergine.Common.Graphics.RasterizerStateDescription,Evergine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.RasterizeStateEnum">
            <summary>
            Enum of the rasterizer states.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.CullFront">
            <summary>
            Cull primitives with clockwise winding order,
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.CullBack">
            <summary>
            Cull primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.None">
            <summary>
            Not cull primitives.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.WireframeCullFront">
            <summary>
            Cull primitives with clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.WireframeCullBack">
            <summary>
            Cull primitives with counter-clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.WireframeCullNone">
            <summary>
            Not cull primitives and wireframe enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizeStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.RasterizerStates">
            <summary>
            Default known values for <see cref="T:Evergine.Common.Graphics.RasterizerStateDescription"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.CullFront">
            <summary>
            Cull primitives with clockwise winding order;.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.CullBack">
            <summary>
            Cull primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.None">
            <summary>
            Not cull primitives.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.WireframeCullFront">
            <summary>
            Cull primitives with clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.WireframeCullBack">
            <summary>
            Cull primitives with counter-clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RasterizerStates.WireframeCullNone">
            <summary>
            Not cull primitives and wireframe enable.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RasterizerStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.RasterizerStates"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs">
            <summary>
            Acceleration Structure AABB Geometry.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.Count">
            <summary>
            Number of AABB in buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.AABBs">
            <summary>
            Buffer with AABB data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.Stride">
            <summary>
            AABB stride size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureAABBs.Offset">
            <summary>
            AABB offset.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags">
            <summary>
            Flags specifying additional parameters for acceleration structure builds.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.None">
            <summary>
            No options specified for the acceleration structure build.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.AllowUpdate">
            <summary>
            Build the acceleration structure such that it supports future updates instead of the app having to entirely rebuild the structure.
            </summary>
            <remarks>
            This option may result in increased memory consumption, build times, and lower raytracing performance. Future updates, however,
            should be faster than building the equivalent acceleration structure from scratch.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.AllowCompactation">
            <summary>
            Enables the option to compact the acceleration structure.
            </summary>
            <remarks>
            This option may result in increased memory consumption and build times. After future compaction, however, the resulting acceleration structure
            should consume a smaller memory footprint than building the acceleration structure from scratch.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.PreferFastTrace">
            <summary>
            Construct a high quality acceleration structure that maximizes raytracing performance at the expense of additional build time.
            </summary>
            <remarks>
            Typically, the implementation will take 2-3 times the build time than the default setting in order to get better tracing performance.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.PreferFastBuild">
            <summary>
            Construct a lower quality acceleration structure, trading raytracing performance for build speed.
            </summary>
            <remarks>
            Typically, the implementation will take 1/2 to 1/3 the build time than default setting, with a sacrifice in tracing performance.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.MinimizeMemory">
            <summary>
            Minimize the amount of scratch memory used during the acceleration structure build as well as the size of the result.
            </summary>
            <remarks>
            This option may result in increased build times and/or raytracing times.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureFlags.PerformUpdate">
            <summary>
            Perform an acceleration structure update, as opposed to building from scratch.
            </summary>
            <remarks>
            This is faster than a full build, but can negatively impact raytracing performance, especially if the positions of the underlying
            objects have changed significantly from the original build of the acceleration structure before updates.
            </remarks>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometry">
            <summary>
            This struct represent a basic raytracing geometry.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometry.Flags">
            <summary>
            The geometry flags.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags">
            <summary>
            Flags specifying additional parameters for acceleration structure builds.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags.Opaque">
            <summary>
            When rays encounter this geometry, the geometry acts as if no any hit shader is present.
            It is recommended to use this flag liberally, as it can enable important ray processing optimizations.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureGeometryFlags.NoDuplicateAnyhitInverseOcation">
            <summary>
            By default, the system is free to trigger an any hit shader more than once for a given ray-primitive intersection.
            This flexibility helps improve the traversal efficiency of acceleration structures in certain cases
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance">
            <summary>
            This data structure is used in GPU memory during acceleration structure build.
            This struct definition is useful if generating instance data on the CPU first then uploading to the GPU.
            But apps are also free to generate instance descriptions directly into GPU memory from compute shaders for instance, following the same layout.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.Flags">
            <summary>
            Flags from <see cref="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags"/> to apply to the instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.Transform4x4">
            <summary>
            A 4x4 transform matrix in row major layout representing the instance-to-world transformation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.InstanceID">
            <summary>
            An arbitrary 24-bit value that can be accessed via InstanceID() in shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.InstanceMask">
            <summary>
            An 8-bit mask assigned to the instance, which can be used to include/reject groups of instances on a per-ray basis.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.InstanceContributionToHitGroupIndex">
            <summary>
            Per-instance contribution to add into shader table indexing to select the hit group to use.
            It is the offset of the instance inside the sahder-binding-table.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstance.BottonLevel">
            <summary>
            the bottom-level acceleration structure that is being instanced.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags">
            <summary>
            Raytracing instance flags.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.TriangleCullDisable">
            <summary>
            Disables front/back face culling for this instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.TriangleFrontCounterclockwise">
            <summary>
            This flag reverses front and back facings.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.ForceOpaque">
            <summary>
            Applied to all the geometries in the bottom-level acceleration structure referenced by the instance
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureInstanceFlags.ForceNonOpaque">
            <summary>
            Applied to any of the geometries in the bottom-level acceleration structure referenced by the instance
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles">
            <summary>
            Acceleration Structure Triangle geometry.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.IndexBuffer">
            <summary>
            Array of vertex indices. If NULL, triangles are non-indexed. Just as with graphics, the address must be aligned to the size
            of IndexFormat.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.IndexFormat">
            <summary>
            Format of the indices in the IndexBuffer. Must be one of the following:
            DXGI_FORMAT_UNKNOWN - when IndexBuffer is NULL
            DXGI_FORMAT_R32_UINT
            DXGI_FORMAT_R16_UINT.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.IndexCount">
            <summary>
            Number of indices in IndexBuffer. Must be 0 if IndexBuffer is NULL.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.IndexOffset">
            <summary>
            Index offset in bytes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.VertexBuffer">
            <summary>
            Array of vertices including a stride. The alignment on the address and stride must be a multiple of the component size,
            so 4 bytes for formats with 32bit components and 2 bytes for formats with 16bit components. Unlike graphics, there is no
            constraint on the stride, other than that the bottom 32bits of the value are all that are used – the field is UINT64 purely
            to make neighboring fields align cleanly/obviously everywhere. Each vertex position is expected to be at the start address
            of the stride range and any excess space is ignored by acceleration structure builds. This excess space might contain other
            app data such as vertex attributes, which the app is responsible for manually fetching in shaders, whether it is interleaved
            in vertex buffers or elsewhere.
            The memory pointed to must be in state D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE.Note that if an app wants to share vertex
            buffer inputs between graphics input assembler and raytracing acceleration structure build input, it can always put a resource
            into a combination of read states simultaneously,
            e.g.D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER | D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.VertexFormat">
            <summary>
            Format of the vertices in VertexBuffer. Must be one of the following:
            DXGI_FORMAT_R32G32_FLOAT - third component is assumed 0
            DXGI_FORMAT_R32G32B32_FLOAT
            DXGI_FORMAT_R16G16_FLOAT - third component is assumed 0
            DXGI_FORMAT_R16G16B16A16_FLOAT - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes.
            DXGI_FORMAT_R16G16_SNORM - third component is assumed 0
            DXGI_FORMAT_R16G16B16A16_SNORM - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.VertexStride">
            <summary>
            The vertex stride.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.VertexCount">
            <summary>
            Number of vertices in VertexBuffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.AccelerationStructureTriangles.VertexOffset">
            <summary>
            Vertex Offset in bytes.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.BottomLevelAS">
            <summary>
            Bottom Level Acceleration Structure.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.BottomLevelAS.Description">
            <summary>
            Get the Acceleration Structure description.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.BottomLevelAS.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.Raytracing.BottomLevelASDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Raytracing.BottomLevelAS"/> class.
            </summary>
            <param name="context">The device context.</param>
            <param name="description">The Bottom Level Acceleration Structure description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.BottomLevelASDescription">
            <summary>
            The acceleration structure bottom level description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.BottomLevelASDescription.Geometries">
            <summary>
            Array of geometries.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.DispatchRaysDescription">
            <summary>
            Describes the properties of a ray dispatch operation initiated with a call to DispatchRays.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.DispatchRaysDescription.Width">
            <summary>
            The width of the generation shader thread grid.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.DispatchRaysDescription.Height">
            <summary>
            The height of the generation shader thread grid.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.DispatchRaysDescription.Depth">
            <summary>
            The depth of the generation shader thread grid.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.HitGroupDescription">
            <summary>
            Describes a raytracing hit group state subobject that can be included in a state object.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType">
            <summary>
            Hit Group Type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType.General">
            <summary>
            The hit group indicates a shader group with a single
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType.Triangles">
            <summary>
            The hit group uses a list of triangles to calculate ray hits. Hit groups that use triangles can’t contain an intersection
            shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.HitGroupType.Procedural">
            <summary>
            The hit group uses a procedural primitive within a bounding box to calculate ray hits. Hit groups that use procedural primitives
            must contain an intersection shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.Type">
            <summary>
            A value from the HitGroupType enumeration specifying the type of the hit group.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.Name">
            <summary>
            The name of the hit group.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.GeneralEntryPoint">
            <summary>
            Optional name of the general shader associated with the hit group. This field can be used with all hit group types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.ClosestHitEntryPoint">
            <summary>
            Optional name of the closest-hit shader associated with the hit group. This field can be used with all hit group types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.AnyHitEntryPoint">
            <summary>
            Optional name of the any-hit shader associated with the hit group. This field can be used with all hit group types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.HitGroupDescription.IntersectionEntryPoint">
            <summary>
            Optional name of the intersection shader associated with the hit group. This field can only be used with hit groups of
            type procedural primitive.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription">
            <summary>
            Contains properties that describe the characteristics of a new pipeline state object.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.ResourceLayouts">
            <summary>
            Describes the resources layout input.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.Shaders">
            <summary>
            Gets or sets the raytracing shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.HitGroups">
            <summary>
            Gets or sets the raytracing hit groups.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.MaxTraceRecursionDepth">
            <summary>
            Limit on ray recursion for the raytracing pipeline. It must be in the range of 0 to 31. Below the maximum
            recursion depth, shader invocations such as closest hit or miss shaders can call TraceRay any number of times.
            At the maximum recursion depth, TraceRay calls result in the device going into removed state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.MaxPayloadSizeInBytes">
            <summary>
            The maximum storage for scalars (counted as 4 bytes each) in ray payloads in raytracing pipelines that
            contain this program. Callable shader payloads are not part of this limit. This field is ignored for
            payloads that use payload access qualifiers.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.MaxAttributeSizeInBytes">
            <summary>
            The maximum number of scalars (counted as 4 bytes each) that can be used for attributes in pipelines
            that contain this shader. The value cannot exceed D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES constant
            (https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html#constants).
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.#ctor(Evergine.Common.Graphics.ResourceLayout[],Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription,Evergine.Common.Graphics.Raytracing.HitGroupDescription[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription"/> struct.
            </summary>
            <param name="resourceLayouts">The resources layout description.</param>
            <param name="shaderDescription">The raytracing shader.</param>
            <param name="hitGroupDescriptions">The hit group descriptions.</param>
            <param name="maxRecursionDepth">Max Recursion Depth.</param>
            <param name="maxPayloadSize">Max Payload Size.</param>
            <param name="maxAttributeSize">Max Attribute Size.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.Equals(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.op_Equality(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription,Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription.op_Inequality(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription,Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState">
            <summary>
            This class represent the GPU raytracing pipeline.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState.disposed">
            <summary>
            Whether the instance is disposed or not.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState.Description">
            <summary>
            Gets the raytracing pipelinestate description.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState.#ctor(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState"/> class.
            </summary>
            <param name="description">The pipelineState description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription">
            <summary>
            This class contains all the raytracing shader stages.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.RayGenerationShader">
            <summary>
            Gets or sets the Raygeneration shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.ClosestHitShader">
            <summary>
            Gets or sets the closestHit shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.MissShader">
            <summary>
            Gets or sets the Miss shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.AnyHitShader">
            <summary>
            Gets or sets the AnyHit shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.IntersectionShader">
            <summary>
            Gets or sets the Intersection shader program.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.Equals(Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.RaytracingShaderStateDescription.GetEntryPointByStage(Evergine.Common.Graphics.ShaderStages)">
            <summary>
            Gets the entrypoint name from Shader stage index.
            </summary>
            <param name="stage">Shader Stage.</param>
            <returns>Entry point name.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.TopLevelAS">
            <summary>
            Top Level Acceleration Structure.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.TopLevelAS.Description">
            <summary>
            Get the Acceleration Structure description.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Raytracing.TopLevelAS.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.Raytracing.TopLevelASDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Raytracing.TopLevelAS"/> class.
            </summary>
            <param name="context">The device context.</param>
            <param name="description">The Top Level Acceleration Structure description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.Raytracing.TopLevelASDescription">
            <summary>
            The top level acceleration structure description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.TopLevelASDescription.Flags">
            <summary>
            The update flags.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.TopLevelASDescription.Offset">
            <summary>
            The instance buffer offset.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Raytracing.TopLevelASDescription.Instances">
            <summary>
            The array of Instance descriptions.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.RenderLayerDescription">
            <summary>
            The render layer description class.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.RenderLayerDescription.RenderLayerStateChanged">
            <summary>
            Event when any render state parameter changed
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.RenderLayerDescription.Id">
            <summary>
            Gets or sets the asset Id.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.RenderLayerDescription.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.RenderLayerDescription.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.RenderLayerDescription.Dependencies">
            <inheritdoc/>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderLayerDescription.Order">
            <summary>
            The layer order.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderLayerDescription.SortMode">
            <summary>
            The sorting mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderLayerDescription.renderState">
            <summary>
            Render State.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.RenderLayerDescription.RenderState">
            <summary>
            Gets or sets gets the render state of the layer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderLayerDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.RenderLayerDescription"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderLayerDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderLayerDescription.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderLayerDescription.Invalidate(Evergine.Common.ILoadable)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderLayerDescription.ReleaseUnusedMemory">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.RenderPassDescription">
            <summary>
            Structure specifying render pass begin info.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderPassDescription.FrameBuffer">
            <summary>
            The frameBuffer containing the attachments that are used with the renderpass.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderPassDescription.ClearValue">
            <summary>
            Array that contains clear values for each attachment.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderPassDescription.#ctor(Evergine.Common.Graphics.FrameBuffer,Evergine.Common.Graphics.ClearValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.RenderPassDescription"/> struct.
            </summary>
            <param name="frameBuffer">The frameBuffer containing the attachments that are used with the renderpass.</param>
            <param name="clearValue">That contains clear values for each attachment.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.RenderStateDescription">
            <summary>
            This struct represent all the parameters in the render states.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.RasterizerState">
            <summary>
            Gets or sets the Rasterizer State.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.DepthStencilState">
            <summary>
            Gets or sets the DepthStencil state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.BlendState">
            <summary>
            Gets or sets the BlendState state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.StencilReference">
            <summary>
            The reference value to use when doing a stencil test.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.BlendFactor">
            <summary>
            Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both.
            If you created the blend-state object with D3D11_BLEND_BLEND_FACTOR or D3D11_BLEND_INV_BLEND_FACTOR, the blending stage uses the non-NULL array of blend factors.
            If you didn't create the blend-state object with D3D11_BLEND_BLEND_FACTOR or D3D11_BLEND_INV_BLEND_FACTOR, the blending stage does not
            use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call ID3D11DeviceContext::OMGetBlendState to retrieve the blend factors.
            If you pass NULL, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.RenderStateDescription.SampleMask">
            <summary>
            32-bit sample coverage. The default value is 0xFFFFFF. See remarks.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.RenderStateDescription.Default">
            <summary>
            Gets default values for RenderStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.SetDefault">
            <summary>
            Default RenderStateDescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.Equals(Evergine.Common.Graphics.RenderStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.op_Equality(Evergine.Common.Graphics.RenderStateDescription,Evergine.Common.Graphics.RenderStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.RenderStateDescription.op_Inequality(Evergine.Common.Graphics.RenderStateDescription,Evergine.Common.Graphics.RenderStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceCpuAccess">
            <summary>
            Specifies the types of CPU access allowed for a resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceCpuAccess.None">
            <summary>
            None (default value).
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceCpuAccess.Write">
            <summary>
            The CPU can be write this resource.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceCpuAccess.Read">
            <summary>
            the CPU can be read this resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceFactory">
            <summary>
            This Factory allow create GPU device resources.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ResourceFactory.GraphicsContext">
            <summary>
            Gets the generic graphicsContext.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateCommandQueue(Evergine.Common.Graphics.CommandQueueType)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.CommandQueue"/> instance.
            </summary>
            <param name="queueType">The commandQueue type, <see cref="T:Evergine.Common.Graphics.CommandQueueType"/>.</param>
            <returns>The new commandQueue.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateCommandQueueInternal(Evergine.Common.Graphics.CommandQueueType)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.CommandQueue"/> instance.
            </summary>
            <param name="queueType">The commandQueue type, <see cref="T:Evergine.Common.Graphics.CommandQueueType"/>.</param>
            <returns>The new commandQueue.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateGraphicsPipeline(Evergine.Common.Graphics.GraphicsPipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.GraphicsPipelineState"/> instance.
            </summary>
            <param name="description">The graphics pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateGraphicsPipelineInternal(Evergine.Common.Graphics.GraphicsPipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.GraphicsPipelineState"/> instance.
            </summary>
            <param name="description">The graphics pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateComputePipeline(Evergine.Common.Graphics.ComputePipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.ComputePipelineState"/> instance.
            </summary>
            <param name="description">The compute pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateComputePipelineInternal(Evergine.Common.Graphics.ComputePipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.ComputePipelineState"/> instance.
            </summary>
            <param name="description">The compute pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateRaytracingPipeline(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState"/> instance.
            </summary>
            <param name="description">The raytracing pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateRaytracingPipelineInternal(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Raytracing.RaytracingPipelineState"/> instance.
            </summary>
            <param name="description">The raytracing pipelinestate description.</param>
            <returns>The new pipelinestate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateTexture(Evergine.Common.Graphics.TextureDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Texture"/> instance.
            </summary>
            <param name="description">The texture description.</param>
            <param name="debugName">The texture name (Debug purposes).</param>
            <returns>The new texture.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.GetTextureFromNativePointer(System.IntPtr,Evergine.Common.Graphics.TextureDescription@)">
            <summary>
            Gets a <see cref="T:Evergine.Common.Graphics.Texture"/> instance from an existing texture using the specified native pointer.
            </summary>
            <param name="texturePointer">The pointer of the texture.</param>
            <param name="textureDescription">The texture description of the already created texture.</param>
            <returns>The texture instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.GetTextureFromNativePointerInternal(System.IntPtr,Evergine.Common.Graphics.TextureDescription@)">
            <summary>
            Gets a <see cref="T:Evergine.Common.Graphics.Texture"/> instance from an existing texture using the specified native pointer.
            </summary>
            <param name="texturePointer">The pointer of the texture.</param>
            <param name="textureDescription">The texture description of the already created texture.</param>
            <returns>The texture instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateTexture(Evergine.Common.Graphics.DataBox[],Evergine.Common.Graphics.TextureDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Texture"/> instance.
            </summary>
            <param name="data">The texture data.</param>
            <param name="description">The texture description.</param>
            <param name="debugName">The texture name (Debug purposes).</param>
            <returns>The new texture1D.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateTexture(Evergine.Common.Graphics.DataBox[],Evergine.Common.Graphics.TextureDescription@,Evergine.Common.Graphics.SamplerStateDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Texture"/> instance.
            </summary>
            <param name="data">The texture data.</param>
            <param name="description">The texture description.</param>
            <param name="samplerState">The sampler state description <see cref="T:Evergine.Common.Graphics.SamplerStateDescription"/> struct.</param>
            <param name="debugName">The texture name (Debug pruposes).</param>
            <returns>The new texture.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateTextureInternal(Evergine.Common.Graphics.DataBox[],Evergine.Common.Graphics.TextureDescription@,Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Texture"/> instance.
            </summary>
            <param name="data">The texture data.</param>
            <param name="description">The texture description.</param>
            <param name="samplerState">The sampler state description <see cref="T:Evergine.Common.Graphics.SamplerStateDescription"/> struct.</param>
            <returns>The new texture.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateBuffer(Evergine.Common.Graphics.BufferDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Buffer"/> instance.
            </summary>
            <param name="description">The index buffer description.</param>
            <param name="debugName">The buffer name (Debug purposes).</param>
            <returns>The new buffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateBuffer``1(``0[],Evergine.Common.Graphics.BufferDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="data">The data array.</param>
            <param name="description">The index buffer description.</param>
            <param name="debugName">The buffer name (Debug purposes).</param>
            <returns>The new buffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateBuffer``1(``0@,Evergine.Common.Graphics.BufferDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="data">The data reference.</param>
            <param name="description">The index buffer description.</param>
            <param name="debugName">The buffer name (Debug purposes).</param>
            <returns>The new buffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateBuffer(System.IntPtr,Evergine.Common.Graphics.BufferDescription@,System.String)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Buffer"/> instance.
            </summary>
            <param name="data">Data pointer.</param>
            <param name="description">The index buffer description.</param>
            <param name="debugName">The buffer name (Debug purposes).</param>
            <returns>The new buffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateBufferInternal(System.IntPtr,Evergine.Common.Graphics.BufferDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.Buffer"/> instance.
            </summary>
            <param name="data">Data pointer.</param>
            <param name="description">The index buffer description.</param>
            <returns>The new buffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateQueryHeap(Evergine.Common.Graphics.QueryHeapDescription@)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.QueryHeap"/> instance.
            </summary>
            <param name="description">The queryheap description.</param>
            <returns>The new queryheap.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateShader(Evergine.Common.Graphics.ShaderDescription@)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.Shader"/> instance.
            </summary>
            <param name="description">The shader description.</param>
            <returns>The new shader.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateShaderInternal(Evergine.Common.Graphics.ShaderDescription@)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.Shader"/> instance.
            </summary>
            <param name="description">The shader description.</param>
            <returns>The new shader.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateSamplerState(Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.SamplerState"/> instance.
            </summary>
            <param name="description">The sampler state description.</param>
            <returns>The new samplerstate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateSamplerStateInternal(Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Creates a <see cref="T:Evergine.Common.Graphics.SamplerState"/> instance.
            </summary>
            <param name="description">The sampler state description.</param>
            <returns>The new samplerstate.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateFrameBuffer(System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat,Evergine.Common.Graphics.PixelFormat,System.String)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> instance.
            </summary>
            <param name="width">The with of the underlying textures.</param>
            <param name="height">The height of the underlying textures.</param>
            <param name="colorTargetPixelFormat">The pixel format of the color target.</param>
            <param name="depthTargetPixelFormat">The pixel format of the depth target.</param>
            <param name="debugName">The framebuffer textures names (Debug purposes).</param>
            <returns>The new framebuffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateFrameBuffer(System.Nullable{Evergine.Common.Graphics.FrameBufferAttachment},Evergine.Common.Graphics.FrameBufferAttachment[],System.Boolean)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> instance.
            </summary>
            <param name="depthTarget">The depth <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.DepthStencil"/> flag.</param>
            <param name="colorTargets">The array of color <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> , all of which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.RenderTarget"/> flags.</param>
            <param name="disposeAttachments">When this framebuffer is disposed, dispose the attachment textures too.</param>
            <returns>The new framebuffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateFrameBufferInternal(System.Nullable{Evergine.Common.Graphics.FrameBufferAttachment},Evergine.Common.Graphics.FrameBufferAttachment[],System.Boolean)">
            <summary>
            Create a <see cref="T:Evergine.Common.Graphics.FrameBuffer"/> instance.
            </summary>
            <param name="depthTarget">The depth <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.DepthStencil"/> flag.</param>
            <param name="colorTargets">The array of color <see cref="T:Evergine.Common.Graphics.FrameBufferAttachment"/> , all of which must have been created with <see cref="F:Evergine.Common.Graphics.TextureFlags.RenderTarget"/> flags.</param>
            <param name="disposeAttachments">When this framebuffer is disposed, dispose the attachment textures too.</param>
            <returns>The new framebuffer.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateResourceLayout(Evergine.Common.Graphics.ResourceLayoutDescription@)">
            <summary>
            Create a new <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
            <param name="description">The descriptions for all elements in this new resourceLayout.</param>
            <returns>A new resourceLayout object.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateResourceLayoutInternal(Evergine.Common.Graphics.ResourceLayoutDescription@)">
            <summary>
            Create a new <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
            <param name="description">The descriptions for all elements in this new resourceLayout.</param>
            <returns>A new resourceLayout object.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateResourceSet(Evergine.Common.Graphics.ResourceSetDescription@)">
            <summary>
            Create a new <see cref="T:Evergine.Common.Graphics.ResourceSet"/>.
            </summary>
            <param name="description">The descriptions for all elements in this new resourceSet.</param>
            <returns>A new resourceSet object.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceFactory.CreateResourceSetInternal(Evergine.Common.Graphics.ResourceSetDescription@)">
            <summary>
            Create a new <see cref="T:Evergine.Common.Graphics.ResourceSet"/>.
            </summary>
            <param name="description">The descriptions for all elements in this new resourceSet.</param>
            <returns>A new resourceSet object.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceLayout">
            <summary>
            This class represent a set of bindable resources.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceLayout.Description">
            <summary>
            The resource layout description.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceLayout.Dispose">
            <summary>
            Frees managed and unmanaged resources.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ResourceLayout.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceLayout.#ctor(Evergine.Common.Graphics.ResourceLayoutDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ResourceLayout"/> class.
            </summary>
            <param name="description">The resource layout description.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceLayoutDescription">
            <summary>
            This class describes the elements inside a <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceLayoutDescription.Elements">
            <summary>
            The Layout elements.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceLayoutDescription.DynamicConstantBufferCount">
            <summary>
            The number of dynamic constant buffers.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceLayoutDescription.#ctor(Evergine.Common.Graphics.LayoutElementDescription[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ResourceLayoutDescription"/> struct.
            </summary>
            <param name="elements">The elements descriptions.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceSet">
            <summary>
            This class describes the elements inside a <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceSet.Description">
            <summary>
            The resourceSet description <see cref="T:Evergine.Common.Graphics.ResourceSetDescription"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.ResourceSet.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceSet.#ctor(Evergine.Common.Graphics.ResourceSetDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ResourceSet"/> class.
            </summary>
            <param name="description">The resourceSet description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceSet.Dispose">
            <summary>
            /// Frees managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceSetDescription">
            <summary>
            This class describes the elements inside a <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceSetDescription.Layout">
            <summary>
            The resourceLayout object <see cref="T:Evergine.Common.Graphics.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceSetDescription.Resources">
            <summary>
            An array of <see cref="T:Evergine.Common.Graphics.GraphicsResource"/> elements as Textures, ConstantBuffers, Samples.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ResourceSetDescription.#ctor(Evergine.Common.Graphics.ResourceLayout,Evergine.Common.Graphics.GraphicsResource[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ResourceSetDescription"/> struct.
            </summary>
            <param name="layout">The resourceLayout object.</param>
            <param name="resources">The list of resources.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceType">
            <summary>
            The shader resource type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.ConstantBuffer">
            <summary>
            A <see cref="T:Evergine.Common.Graphics.Buffer"/> accessed as a uniform buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.StructuredBuffer">
            <summary>
             A <see cref="T:Evergine.Common.Graphics.Buffer"/> accessed as a read-only storage buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.StructuredBufferReadWrite">
            <summary>
            A <see cref="T:Evergine.Common.Graphics.Buffer"/>accessed as a read-write storage buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.Texture">
            <summary>
            A read-only <see cref="T:Evergine.Common.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.TextureReadWrite">
            <summary>
            A read-write <see cref="T:Evergine.Common.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.Sampler">
            <summary>
            A <see cref="T:Evergine.Common.Graphics.SamplerState"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceType.AccelerationStructure">
            <summary>
            A raytracing acceleration structure.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ResourceUsage">
            <summary>
            Identifies expected texture use during rendering.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceUsage.Default">
            <summary>
            A resource that requires read and write access by the GPU, Default value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceUsage.Immutable">
            <summary>
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU.
            This type of resource must be initialized when it is created, since it cannot be changed after creation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceUsage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only).
            A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ResourceUsage.Staging">
            <summary>
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SamplerBorderColor">
            <summary>
            Comparison options.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerBorderColor.TransparentBlack">
            <summary>
            Transparent Black (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerBorderColor.OpaqueBlack">
            <summary>
            Opaque Black (0, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerBorderColor.OpaqueWhite">
            <summary>
            Opaque White (1, 1, 1, 1)
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SamplerState">
            <summary>
            This class represent a sampler state.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SamplerState.Id">
            <summary>
            Gets or sets the asset Id.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SamplerState.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.SamplerState.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.SamplerState.Dependencies">
            <inheritdoc/>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerState.Description">
            <summary>
            The sampler state description.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SamplerState.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerState.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.SamplerState"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="description">The sampler state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerState.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerState.Invalidate(Evergine.Common.ILoadable)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerState.ReleaseUnusedMemory">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.SamplerStateDescription">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.Filter">
            <summary>
            Filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.AddressU">
            <summary>
            Method to use for resolving a u texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.AddressV">
            <summary>
            Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.AddressW">
            <summary>
            Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.MipLODBias">
            <summary>
            Offset from the calculated mipmap level. For example, if Direct3D calculates that a
            texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.MaxAnisotropy">
            <summary>
            Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is
            specified in Filter. Valid values are between 1 and 16.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.ComparisonFunc">
            <summary>
            A function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.BorderColor">
            <summary>
            Border color <see cref="T:Evergine.Common.Graphics.SamplerBorderColor"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.MinLOD">
            <summary>
            Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level
            and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateDescription.MaxLOD">
            <summary>
            Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level
            higher than that is less detailed. This value must be greater than or equal to MinLOD.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SamplerStateDescription.Default">
            <summary>
            Gets default values for SamplerStateDescription.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.SetDefault">
            <summary>
            Default SamplerStateDescription values.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.Equals(Evergine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.op_Equality(Evergine.Common.Graphics.SamplerStateDescription,Evergine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStateDescription.op_Inequality(Evergine.Common.Graphics.SamplerStateDescription,Evergine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.SamplerStateEnum">
            <summary>
            The sampler state default values.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.PointClamp">
            <summary>
            SamplerState description using point filter (bilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.PointWrap">
            <summary>
            SamplerState description using point filter (bilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.PointMirror">
            <summary>
            SamplerState description using point filter (bilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.LinearClamp">
            <summary>
            SamplerState description using linear filter (trilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.LinearWrap">
            <summary>
            SamplerState description using linear filter (trilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.LinearMirror">
            <summary>
            SamplerState description using linear filter (trilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.AnisotropicClamp">
            <summary>
            SamplerState description using anisotropic filter and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.AnisotropicWrap">
            <summary>
            SamplerState description using anisotropic filter and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.AnisotropicMirror">
            <summary>
            SamplerState description using anisotropic filter and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SamplerStates">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.PointClamp">
            <summary>
            SamplerState description using point filter (bilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.PointWrap">
            <summary>
            SamplerState description using point filter (bilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.PointMirror">
            <summary>
            SamplerState description using point filter (bilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.LinearClamp">
            <summary>
            SamplerState description using linear filter (trilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.LinearWrap">
            <summary>
            SamplerState description using linear filter (trilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.LinearMirror">
            <summary>
            SamplerState description using linear filter (trilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.AnisotropicClamp">
            <summary>
            SamplerState description using anisotropic filter and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.AnisotropicWrap">
            <summary>
            SamplerState description using anisotropic filter and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SamplerStates.AnisotropicMirror">
            <summary>
            SamplerState description using anisotropic filter and mirror address mode for UVW.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SamplerStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.SamplerStates"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Shader">
            <summary>
            This class represent a single shader program.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Shader.Description">
            <summary>
            Gets the shader description.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Shader.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Shader.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.ShaderDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Shader"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="description">The shader description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Shader.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ShaderDescription">
            <summary>
            This struct represent all parameters requiered to create a new shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderDescription.EntryPoint">
            <summary>
            Gets the name of the entry point function.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderDescription.ShaderBytes">
            <summary>
            Gets the raw shader code.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderDescription.Stage">
            <summary>
            Gets the shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderDescription.shaderArrayHashCode">
            <summary>
            Byte array hastCode cached.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.#ctor(Evergine.Common.Graphics.ShaderStages,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ShaderDescription"/> struct.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="entryPoint">The entry point function.</param>
            <param name="shaderBytes">The shader code in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.Equals(Evergine.Common.Graphics.ShaderDescription)">
            <summary>
            Determines whether the specified parameter is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.op_Equality(Evergine.Common.Graphics.ShaderDescription,Evergine.Common.Graphics.ShaderDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderDescription.op_Inequality(Evergine.Common.Graphics.ShaderDescription,Evergine.Common.Graphics.ShaderDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ShaderMatrices">
            <summary>
            Stores all the matrices needed by a shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderMatrices.WorldViewProj">
            <summary>
            World * View * Projection matrix.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderMatrices.World">
            <summary>
            World matrix.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderMatrices.WorldInverseTranspose">
            <summary>
            World inverse transpose matrix.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ShaderStages">
            <summary>
            Specifies the usage of a resource in shaders.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Undefined">
            <summary>
            No stages.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Vertex">
            <summary>
            The vertex shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Hull">
            <summary>
            The hull shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Domain">
            <summary>
            The domain shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Geometry">
            <summary>
            The geometry shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Pixel">
            <summary>
            The pixel shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Compute">
            <summary>
            The compute shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.RayGeneration">
            <summary>
            The Raytracing raygeneration shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Miss">
            <summary>
            The Raytracing miss shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.ClosestHit">
            <summary>
            The Raytracing closestHit shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.AnyHit">
            <summary>
            The Raytracing anyHit shader stage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStages.Intersection">
            <summary>
            The Raytracing intersection shader stage.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ShaderStagesHelpers">
            <summary>
            Helpers for ShaderStages Enum.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStagesHelpers.ShaderStagesArray">
            <summary>
            Gets the shader stages as array.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStagesHelpers.ShaderStagesCount">
            <summary>
            Gets the shaderstages count.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStagesHelpers.RasterizationShaderStagesCount">
            <summary>
            Gets the rasterization stages (Vertex, Hull, Domain, Geometry, Pixel and Compute).
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStagesHelpers.IndexOf(Evergine.Common.Graphics.ShaderStages)">
            <summary>
            Gets the shaderStage index.
            </summary>
            <param name="stages">The shaderstage.</param>
            <returns>The stage index.</returns>
        </member>
        <member name="T:Evergine.Common.Graphics.ShaderStateDescription">
            <summary>
            Shader State Description.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStateDescription.constantBuffersBindings">
            <summary>
            ConstantBuffers bindings.
            Used in OpenGL 410 or minor and OpenGLES 300 or minor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStateDescription.texturesBindings">
            <summary>
            Textures bindings.
            Used in OpenGL 410 or minor and OpenGLES 300 or minor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ShaderStateDescription.bufferParametersBinding">
            <summary>
            Uniform parameters bindings.
            Used in WebGL1 and OpenGL ES 2.0.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStateDescription.Equals(Evergine.Common.Graphics.ShaderStateDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStateDescription.op_Equality(Evergine.Common.Graphics.ShaderStateDescription,Evergine.Common.Graphics.ShaderStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStateDescription.op_Inequality(Evergine.Common.Graphics.ShaderStateDescription,Evergine.Common.Graphics.ShaderStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.ShaderStateDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.SortMode">
            <summary>
            Specify the sort order.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SortMode.None">
            <summary>
            No sorting.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SortMode.FrontToBack">
            <summary>
            Front to back sorting.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SortMode.BackToFront">
            <summary>
            Back to Front sorting.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SpotLightStruct">
            <summary>
            Struct with aligned data for sending a spot light to the shader.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpotLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpotLightStruct.ConeAngle">
            <summary>
            The cone angle.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpotLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpotLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpotLightStruct.Direction">
            <summary>
            The direction.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SpriteDrawMode">
            <summary>
            Specifies texture addressing mode.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpriteDrawMode.Simple">
            <summary>
            Displays the full sprite.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SpriteDrawMode.Sliced">
            <summary>
            The SpriteRenderer will render the sprite as a nine patch image where the corners will remain constant and the other sections will scale.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.StencilOperation">
            <summary>
            The stencil operations that can be performed during depth-stencil testing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Keep">
            <summary>
            Keep the existing stencil data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Zero">
            <summary>
            Set the stencil data to 0.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Replace">
            <summary>
            Set the stencil data to the reference value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            Increment the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            Decrement the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Invert">
            <summary>
            Invert the stencil data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Increment">
            <summary>
            Increment the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.StencilOperation.Decrement">
            <summary>
            Decrement the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SubResourceInfo">
            <summary>
            Struct containing the sub resource info.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.SizeInBytes">
            <summary>
            The size in bytes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.Offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.RowPitch">
            <summary>
            The row pitch.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.SlicePitch">
            <summary>
            The slice pitch.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.MipWidth">
            <summary>
            The mip width.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.MipHeight">
            <summary>
            The mip height.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.MipDepth">
            <summary>
            The mip depth.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.MipLevel">
            <summary>
            The mip level.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SubResourceInfo.ArrayLayer">
            <summary>
            The array layer.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Surface">
            <summary>
            Represent a control/widget on a WindowSystem.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Surface.SurfaceInfo">
            <summary>
            Surface information.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Surface.Width">
            <summary>
            Surface Width.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Surface.Height">
            <summary>
            Surface Height.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Surface.DPIDensity">
            <summary>
            Gets or sets the surface DPI density.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Surface.KeyboardDispatcher">
            <summary>
            Gets the keyboard events dispatcher associated to this surface.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Surface.MouseDispatcher">
            <summary>
            Gets the mouse events dispatcher associated to this surface.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Surface.TouchDispatcher">
            <summary>
            Gets the touch events dispatcher associated to this surface.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Surface.OnScreenSizeChanged">
            <summary>
            Occurs when surface size is changed.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Surface.OnSurfaceInfoChanged">
            <summary>
            Occurs when surface info is changed.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Surface.Closing">
            <summary>
            Occurs when surface is closing
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Surface.GotFocus">
            <summary>
            Occurs when surface get focus
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Surface.LostFocus">
            <summary>
            Occurs when surface lost focus
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Surface"/> class.
            </summary>
            <param name="width">surface width.</param>
            <param name="height">surface height.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.Destroy">
            <summary>
            Remove managed resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.OnClosing">
            <summary>
            Raise base window closing event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.OnGotFocus">
            <summary>
            Raise base got focus event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.OnLostFocus">
            <summary>
            Raise base lost focus event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.OnSizeChanged">
            <summary>
            Raise base size changed event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Surface.OnInfoChanged">
            <summary>
            Raise surface info changed.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SurfaceInfo">
            <summary>
            Surface info struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes">
            <summary>
            Surface tecnologies.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.Forms">
            <summary>
             Window forms
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.WPF">
            <summary>
            Windows Presentation Foundation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.Wayland">
            <summary>
            Wayland window system
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.SDL">
            <summary>
            Simple DirectMedia Layter
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.Android">
            <summary>
            Android System
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.IOS">
            <summary>
            IOS System
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.UWP">
            <summary>
            UWP System
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.WinUI">
            <summary>
            WinUI system.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.Web">
            <summary>
            Web System.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes.MixedReality">
            <summary>
            Mixed Reality.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.Type">
            <summary>
            Surface type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SurfaceInfo.Handles">
            <summary>
            Surface native handles.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SurfaceInfo.#ctor(System.IntPtr,Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.SurfaceInfo"/> struct.
            </summary>
            <param name="handle">Surface native handle.</param>
            <param name="type">Surface type.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.SurfaceInfo.#ctor(System.IntPtr[],Evergine.Common.Graphics.SurfaceInfo.SurfaceTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.SurfaceInfo"/> struct.
            </summary>
            <param name="handles">Surface native handle.</param>
            <param name="type">Surface type.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.SurfaceInfo.Equals(Evergine.Common.Graphics.SurfaceInfo)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SurfaceInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.SwapChain">
            <summary>
            SwapChain instance.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChain.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChain.GraphicsContext">
            <summary>
            The device context refenrece.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SwapChain.NativeSwapChainPointer">
            <summary>
            Gets the native SwapChain pointer. Default value is returned if the platform does not support it.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SwapChain.SwapChainDescription">
            <summary>
            Gets or sets the SwapChain description.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SwapChain.FrameBuffer">
            <summary>
            Gets or sets the swapchain Framebuffer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SwapChain.VerticalSync">
            <summary>
            Gets or sets a value indicating whether vertical synchronization is enable or not.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.SwapChain.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChain.RefreshSurfaceInfo(Evergine.Common.Graphics.SurfaceInfo)">
            <summary>
            The swapchain surface info has changed.
            </summary>
            <param name="surfaceInfo">The surface info.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChain.ResizeSwapChain(System.UInt32,System.UInt32)">
            <summary>
            Resize SwapChain.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChain.GetCurrentFramebufferTexture">
            <summary>
            Gets the current Framebuffer Texture.
            </summary>
            <returns>Framebuffer texture.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChain.Present">
            <summary>
            Presents a rendered image to the user.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChain.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.SwapChainDescription">
            <summary>
            Represents the requiered information to create a new swapchain depending of the platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.SurfaceInfo">
            <summary>
            Surface information.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.Width">
            <summary>
            The swapchain buffers width.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.Height">
            <summary>
            The swapchain buffers height.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.RefreshRate">
            <summary>
            The refresh rate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.ColorTargetFormat">
            <summary>
            The pixel format of the color target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.ColorTargetFlags">
            <summary>
            The color texture flags for binding to pipeline stages. The flags ca be combined by a logical OR.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.DepthStencilTargetFormat">
            <summary>
            The pixel format of the depthstencil target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.DepthStencilTargetFlags">
            <summary>
            The depth texture flags for binding to pipeline stages. The flags ca be combined by a logical OR.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.SampleCount">
            <summary>
            The sampler count of this swapchain.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.SwapChainDescription.IsWindowed">
            <summary>
            Whether the output is in windowed mode.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChainDescription.Equals(Evergine.Common.Graphics.SwapChainDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChainDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChainDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChainDescription.op_Equality(Evergine.Common.Graphics.SwapChainDescription,Evergine.Common.Graphics.SwapChainDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.SwapChainDescription.op_Inequality(Evergine.Common.Graphics.SwapChainDescription,Evergine.Common.Graphics.SwapChainDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.Texture">
            <summary>
            This class represent a Texture graphics resource.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.Id">
            <summary>
            Gets or sets the asset Id.
            </summary>
            <value>
            The texture Id.
            </value>
        </member>
        <member name="F:Evergine.Common.Graphics.Texture.Description">
            <summary>
            Gets or sets the <see cref="T:Evergine.Common.Graphics.TextureDescription"/> struct.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.Texture.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.Dependencies">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.Sampler">
            <summary>
            Gets or sets texture associate sampler state.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.Name">
            <summary>
            Gets or sets a string identifying this instance. Can be used in graphics debuggers tools.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Texture.CouldBeAttachedToFramebuffer">
            <summary>
            Gets a value indicating whether this texture could be attached to a framebuffer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Texture.#ctor(Evergine.Common.Graphics.GraphicsContext,Evergine.Common.Graphics.TextureDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Texture"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="description">The texture description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Texture.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.Texture.Invalidate(Evergine.Common.ILoadable)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Graphics.Texture.ReleaseUnusedMemory">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureAddressMode">
            <summary>
            Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureAddressMode.Wrap">
            <summary>
            Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureAddressMode.Mirror">
            <summary>
            Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally;
            between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureAddressMode.Clamp">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureAddressMode.Border">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in SamplerStateDescription or HLSL code.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureAddressMode.Mirror_One">
            <summary>
            Similar to D3D11_TEXTURE_ADDRESS_MIRROR and D3D11_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate
            (thus, mirroring around 0), and then clamps to the maximum value.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureDescription">
            <summary>
            Describes a 2D texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Type">
            <summary>
            Texture type <see cref="T:Evergine.Common.Graphics.TextureType"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Format">
            <summary>
            Texture format <see cref="T:Evergine.Common.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Depth">
            <summary>
            Texture Depth (in texels).
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.ArraySize">
            <summary>
            Number of textures in the texture array.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Faces">
            <summary>
            Number of texture faces useful in TextureCube and TextureCubeArray.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Flags">
            <summary>
            The texture flags  <see cref="T:Evergine.Common.Graphics.TextureFlags"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.Usage">
            <summary>
            Value that identifies how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.SampleCount">
            <summary>
            The number of samples in this texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureDescription.CpuAccess">
            <summary>
            Flags <see cref="T:Evergine.Common.Graphics.ResourceCpuAccess"/> to specify the type of CPU access allowed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.CreateTexture1DDescription(System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Create a Texture 1D description.
            </summary>
            <param name="width">The texture width.</param>
            <param name="format">The texture format.</param>
            <returns>The new texture 1D description.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.CreateTexture2DDescription(System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Create a Texture 2D description.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="format">The texture format.</param>
            <returns>The new texture 2D description.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.CreateTexture3DDescription(System.UInt32,System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Create a Texture 3D description.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="depth">The texture depth.</param>
            <param name="format">The texture format.</param>
            <returns>The new texture 3D description.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.CreateTextureCubeDescription(System.UInt32,System.UInt32,Evergine.Common.Graphics.PixelFormat)">
            <summary>
            Create a Texture cube description.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="format">The texture format.</param>
            <returns>The new texture cube description.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.Equals(Evergine.Common.Graphics.TextureDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.op_Equality(Evergine.Common.Graphics.TextureDescription,Evergine.Common.Graphics.TextureDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.TextureDescription.op_Inequality(Evergine.Common.Graphics.TextureDescription,Evergine.Common.Graphics.TextureDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureFilter">
            <summary>
            Filtering options during texture sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinPoint_MagPoint_MipPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinPoint_MagPoint_MipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinPoint_MagLinear_MipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinPoint_MagLinear_MipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinLinear_MagPoint_MipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinLinear_MagPoint_MipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinLinear_MagLinear_MipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.MinLinear_MagLinear_MipLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFilter.Anisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureFlags">
            <summary>
            Identifies how to bing a texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.ShaderResource">
            <summary>
            A texture usable as a ShaderResourceView.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.RenderTarget">
            <summary>
            A texture usable as render target.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.UnorderedAccess">
            <summary>
            A texture usable as an unordered access buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.DepthStencil">
            <summary>
            A texture usable as a depth stencil buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureFlags.GenerateMipmaps">
            <summary>
            Enables MIP map generation by GPU
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureOptionFlags">
            <summary>
            Identifies expected texture use during rendering.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureOptionFlags.None">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureOptionFlags.TextureCube">
            <summary>
            Specifies a textureCube access.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureSampleCount">
            <summary>
            Describes the number of samples to use in a <see cref="T:Evergine.Common.Graphics.Texture"/>.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.None">
            <summary>
            No multisample.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.Count2">
            <summary>
            Multisample count of 2 pixels.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.Count4">
            <summary>
            Multisample count of 4 pixels.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.Count8">
            <summary>
            Multisample count of 8 pixels.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.Count16">
            <summary>
            Multisample count of 16 pixels.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureSampleCount.Count32">
            <summary>
            Multisample count of 32 pixels.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.TextureType">
            <summary>
            Texture type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.Texture2D">
            <summary>
            Represent a 2D texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.Texture2DArray">
            <summary>
            Represent a 2D texture array
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.Texture1D">
            <summary>
            Represent a 1D texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.Texture1DArray">
            <summary>
            Represent a 1D texture array.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.TextureCube">
            <summary>
            Represent a Cubemap texture.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.TextureCubeArray">
            <summary>
            Represent a TextureCube array
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.TextureType.Texture3D">
            <summary>
            Represent a 3D texture.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.UploadBuffer">
            <summary>
            This abstract class represent and strategy to fast upload buffers to GPU.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.DataBegin">
            <summary>
            Pointer to the begin of the buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.DataCurrent">
            <summary>
            Pointer to the current buffer position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.DataEnd">
            <summary>
            Pointer to the end of the buffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.Count">
            <summary>
            Number of batched buffers.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.Align">
            <summary>
            The buffer alignment.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.TotalSize">
            <summary>
            The total size in bytes of the uploadbuffer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.UploadBuffer.context">
            <summary>
            The graphics context instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.#ctor(Evergine.Common.Graphics.GraphicsContext,System.UInt64,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.UploadBuffer"/> class.
            </summary>
            <param name="context">The graphics context.</param>
            <param name="size">The uploadBuffer size.</param>
            <param name="align">The uploadBuffer align if it is needed.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.RefreshBuffer(System.UInt64)">
            <summary>
            Refresh the native buffer used by the uploadbuffer with the new size.
            </summary>
            <param name="size">The new size of the buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.Allocate(System.UInt64)">
            <summary>
            Allocate the new data in the uploadbuffer.
            </summary>
            <param name="dataSize">The new data size.</param>
            <returns>The destination address to copy.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.Clear">
            <summary>
            Reset all pointers of the uploadbuffer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.CalculateOffset(System.UInt64)">
            <summary>
            Gets the native address data offset.
            </summary>
            <param name="address">The address of data.</param>
            <returns>The address data offset.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.UploadBuffer.Dispose">
            <summary>
            Dispose all resource of this instance.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ValidationLayer">
            <summary>
            The graphics validation layer.
            </summary>
        </member>
        <member name="E:Evergine.Common.Graphics.ValidationLayer.Error">
            <summary>
            Event that allow to obtains the error messages if NofityMethod is set to Events.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ValidationLayer.NotifyAction">
            <summary>
            The Notify delegate function.
            </summary>
            <param name="owner">The owner of this error message.</param>
            <param name="message">The error message content.</param>
            <param name="severity">The severity associated with the message.</param>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.Notify">
            <summary>
            Pointer to Notify function.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ValidationLayer.NotifyMethod">
            <summary>
            The supported notify methods.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.NotifyMethod.Exceptions">
            <summary>
            Validation layer throws exceptions.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.NotifyMethod.Trace">
            <summary>
            Validation layer trace info.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.NotifyMethod.Events">
            <summary>
            Validation layer fires events.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.ValidationLayer.Severity">
            <summary>
            Severity enumerate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.Severity.Error">
            <summary>
            Error severity.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.Severity.Warning">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.ValidationLayer.Severity.Information">
            <summary>
            The information severity.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.#ctor(Evergine.Common.Graphics.ValidationLayer.NotifyMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ValidationLayer"/> class.
            </summary>
            <param name="method">The notify method <see cref="T:Evergine.Common.Graphics.ValidationLayer.NotifyMethod"/>, exception by default.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.#ctor(Evergine.Common.Graphics.ValidationLayer.NotifyAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.ValidationLayer"/> class.
            </summary>
            <param name="function">The callback function called for every error detection.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateCommandQueueValidation(Evergine.Common.Graphics.CommandQueueType)">
            <summary>
            Creates a command queue validation layer.
            </summary>
            <param name="queueType">The queue type.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateGraphicsPipelineValidation(Evergine.Common.Graphics.GraphicsPipelineDescription@)">
            <summary>
            Creates a graphic pipeline validation.
            </summary>
            <param name="description">The graphic pipeline description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateComputePipelineValidation(Evergine.Common.Graphics.ComputePipelineDescription@)">
            <summary>
            Creates a compute pipeline validation layer.
            </summary>
            <param name="description">The compute pipeline description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateRaytracingPipelineValidation(Evergine.Common.Graphics.Raytracing.RaytracingPipelineDescription@)">
            <summary>
            Creates a raytracing pipeline validatino layer.
            </summary>
            <param name="description">The raytracing pipeline description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateTextureValidation(Evergine.Common.Graphics.DataBox[],Evergine.Common.Graphics.TextureDescription@,Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Creates a texture validation layer.
            </summary>
            <param name="data">The texture data.</param>
            <param name="description">The texture description.</param>
            <param name="samplerState">The texture sampler state.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateBufferValidation(System.IntPtr,Evergine.Common.Graphics.BufferDescription@)">
            <summary>
            Creates the buffer validation layer.
            </summary>
            <param name="data">The buffer data.</param>
            <param name="description">The buffer description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateShaderValidation(Evergine.Common.Graphics.ShaderDescription@)">
            <summary>
            Creates a shader validation layer.
            </summary>
            <param name="description">The shader description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateSamplerStateValidation(Evergine.Common.Graphics.SamplerStateDescription@)">
            <summary>
            Creates the sampler state validation layer.
            </summary>
            <param name="description">The sampler state description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateFrameBufferValidation(System.Nullable{Evergine.Common.Graphics.FrameBufferAttachment},Evergine.Common.Graphics.FrameBufferAttachment[],System.Boolean)">
            <summary>
            Creates a frame buffer validation.
            </summary>
            <param name="depthTarget">The depth frame buffer.</param>
            <param name="colorTargets">The color frame buffers.</param>
            <param name="disposeAttachments">If the attachments should be disposed.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateResourceLayoutValidation(Evergine.Common.Graphics.ResourceLayoutDescription@)">
            <summary>
            Creates the resource layout validation.
            </summary>
            <param name="description">The resource layout description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CreateResourceSetValidation(Evergine.Common.Graphics.ResourceSetDescription@)">
            <summary>
            Creates the resource set validation.
            </summary>
            <param name="description">The resource set description.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.UpdateBufferData(System.Boolean,System.UInt32)">
            <summary>
            Updates the buffer data.
            </summary>
            <param name="inRenderPass">IF the operation is made inside a render pass.</param>
            <param name="sourceSizeInBytes">The source buffer size in bytes.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CopyBufferDataTo(System.Boolean,System.UInt32)">
            <summary>
            Validation of the copy buffer operation.
            </summary>
            <param name="inRenderPass">If the operation is made inside a render pass.</param>
            <param name="sizeInBytes">The size in bytes of the buffer.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.ValidationLayer.CopyTextureDataTo(System.Boolean)">
            <summary>
            Validation of the copy texture data operation.
            </summary>
            <param name="inRenderPass">If the operation is made inside a render pass.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexElementUsage">
            <summary>
            Specifies the vertex element usage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Position">
            <summary>
            Used for position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Color">
            <summary>
            Used for color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Used for texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Normal">
            <summary>
            Used for normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Binormal">
            <summary>
            Used for binormal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Tangent">
            <summary>
            Used for tangent.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.BlendIndices">
            <summary>
            Used for blend indices.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.BlendWeight">
            <summary>
            Used for blend weights.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Depth">
            <summary>
            Used for depth.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Fog">
            <summary>
            Used for fog.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.PointSize">
            <summary>
            Used for point size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.Sample">
            <summary>
            Used for sample.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexElementUsage.TessellateFactor">
            <summary>
            Used for tesellation factor.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPosition">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPosition.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPosition.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPosition.#ctor(Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPosition" /> struct.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPosition.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPosition"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColor">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColor.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColor.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColor.#ctor(Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The texture coordinates.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis">
            <summary>
            Represents a vertex with position, color, texture coordinate and axis size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.AxisSize">
            <summary>
            Vertex axis size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.#ctor(Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The texture coordinate.</param>
            <param name="axisSize">The axis size.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal">
            <summary>
            Represents a vertex with position and normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColor"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord2">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Common.Graphics.Color,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
            /// <param name="color">The color.</param>
            <param name="texCoord">The texcoord.</param>
            <param name="texCoord2">The texcoord2.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="normal">The vertex normal.</param>
            <param name="tangent">The vertex tangent.</param>
            <param name="texCoord">the vertex texCoord.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionNormalTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture">
            <summary>
            Represents a vertex with position and texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.#ctor(Evergine.Mathematics.Vector3,Evergine.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Evergine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.VertexStepFunction">
            <summary>
            The frequency with which the vertex function fetches attributes data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexStepFunction.PerVertexData">
            <summary>
            Input data is per-vertex data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.VertexStepFunction.PerInstanceData">
            <summary>
            Input data is per-instance data.
            </summary>
        </member>
        <member name="T:Evergine.Common.Graphics.Viewport">
            <summary>
            Abstracts a viewport used for defining rendering regions.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.Empty">
            <summary>
            Empty value for an undefined viewport.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.DefaultWidth">
            <summary>
            The default viewport width.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.DefaultHeight">
            <summary>
            The default viewport height.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.X">
            <summary>
            Gets or sets the X origin of the viewport.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.Y">
            <summary>
            Gets or sets the Y origin of the viewport.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.MinDepth">
            <summary>
            Gets or sets the min depth range.
            </summary>
        </member>
        <member name="F:Evergine.Common.Graphics.Viewport.MaxDepth">
            <summary>
            Gets or sets the max depth range.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used of this viewport.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Viewport.Size">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Viewport.Bounds">
            <summary>
            Gets the rectangle of the viewport.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Viewport"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minDepth">The minimun depth range.</param>
            <param name="maxDepth">The maximun depth range.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.#ctor(Evergine.Mathematics.Rectangle,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Viewport"/> struct.
            </summary>
            <param name="rectangle">The viewport rectangle.</param>
            <param name="minDepth">The minimun depth range.</param>
            <param name="maxDepth">The maximun depth range.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.Equals(Evergine.Common.Graphics.Viewport)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.op_Equality(Evergine.Common.Graphics.Viewport,Evergine.Common.Graphics.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Graphics.Viewport.op_Inequality(Evergine.Common.Graphics.Viewport,Evergine.Common.Graphics.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Evergine.Common.Graphics.Window">
            <summary>
            Represent a Window on WindowSystem.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Window.Title">
            <summary>
            Gets or sets window title.
            </summary>
        </member>
        <member name="P:Evergine.Common.Graphics.Window.Visible">
            <summary>
            Gets or sets a value indicating whether the window is visible.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.Window.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Graphics.Window"/> class.
            </summary>
            <param name="title">Window title.</param>
            <param name="width">Window width.</param>
            <param name="height">Window height.</param>
        </member>
        <member name="T:Evergine.Common.Graphics.WindowsSystem">
            <summary>
            Represent a specify windows technology.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.CreateWindow(System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Create a Window.
            </summary>
            <param name="title">Window title.</param>
            <param name="width">Window width.</param>
            <param name="height">Window height.</param>
            <param name="visible">Window visibility.</param>
            <returns>Window instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.CreateSurface(System.UInt32,System.UInt32)">
            <summary>
            Create a surface.
            </summary>
            <param name="width">Surface width.</param>
            <param name="height">Surface height.</param>
            <returns>Surface instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.CreateSurface(System.Object)">
            <summary>
            Create a surface.
            </summary>
            <param name="nativeSurface">The native surface control.</param>
            <returns>Surface instance.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.Run(System.Action,System.Action)">
            <summary>
            Run the windows system.
            </summary>
            <param name="loadAction">Action does in load thread.</param>
            <param name="renderCallback">Action to be executed every render loop.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.CreateLoopThread(System.Action,System.Action)">
            <summary>
            Creates a loop thread.
            </summary>
            <param name="loadAction">The load action.</param>
            <param name="renderCallback">The render callback action.</param>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.Destroy">
            <summary>
            Destroy all resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.WindowsSystem.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Evergine.Common.Graphics.PrimitiveTopologyExtension">
            <summary>
            Helper methods for primitive topology.
            </summary>
        </member>
        <member name="M:Evergine.Common.Graphics.PrimitiveTopologyExtension.ToPrimitiveCount(Evergine.Common.Graphics.PrimitiveTopology,System.Int32)">
            <summary>
            Convert index count to primitive count.
            </summary>
            <param name="primitiveTopology">The primitive topology.</param>
            <param name="elementCount">The index count.</param>
            <returns>The primitive count.</returns>
        </member>
        <member name="M:Evergine.Common.Graphics.PrimitiveTopologyExtension.ToIndexCount(Evergine.Common.Graphics.PrimitiveTopology,System.Int32)">
            <summary>
            Convert primitive count to index count.
            </summary>
            <param name="primitiveTopology">The primitive topology.</param>
            <param name="primitiveCount">The primitive count.</param>
            <returns>The index count.</returns>
        </member>
        <member name="T:Evergine.Common.Shared.Graphics.ModelType">
            <summary>
            The type of the model.
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Custom">
            <summary>
            Custom model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Capsule">
            <summary>
            Capsule model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Cone">
            <summary>
            Cone model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Cube">
            <summary>
            Cube model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Cylinder">
            <summary>
            Cylinder model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Plane">
            <summary>
            Plane model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Pyramid">
            <summary>
            Pyramid model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Sphere">
            <summary>
            Sphere model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Teapot">
            <summary>
            Teapot model
            </summary>
        </member>
        <member name="F:Evergine.Common.Shared.Graphics.ModelType.Torus">
            <summary>
            Torus model
            </summary>
        </member>
        <member name="T:Evergine.Common.IdentifiableObject">
            <summary>
            Abstract class to extend for each class that we need to serialize.
            </summary>
        </member>
        <member name="P:Evergine.Common.IdentifiableObject.Id">
            <summary>
            Gets or sets the Id of this object.
            </summary>
        </member>
        <member name="M:Evergine.Common.IdentifiableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IdentifiableObject"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.IdentifiableObject.IdHasChanged(System.Guid)">
            <summary>
            The Id of the object has been updated.
            </summary>
            <param name="oldId">The old Id value.</param>
        </member>
        <member name="T:Evergine.Common.IDependencyLink">
            <summary>
            Interface that represents a dependency link between two objects.
            </summary>
        </member>
        <member name="P:Evergine.Common.IDependencyLink.Type">
            <summary>
            Gets the dependency link type.
            </summary>
        </member>
        <member name="M:Evergine.Common.IDependencyLink.Register">
            <summary>
            Registers this instance in the dependency list of source and target..
            </summary>
        </member>
        <member name="M:Evergine.Common.IDependencyLink.Unregister(Evergine.Common.IDependencyObject)">
            <summary>
            Unregisters this instance in the dependency list of source and target.
            </summary>
            <param name="caller">The caller.</param>
        </member>
        <member name="T:Evergine.Common.IDependencyObject">
            <summary>
            Interface that represents an object that has dependencies defined.
            </summary>
        </member>
        <member name="P:Evergine.Common.IDependencyObject.Dependencies">
            <summary>
            Gets the dependency list.
            </summary>
        </member>
        <member name="T:Evergine.Common.ILoadable">
            <summary>
            Interface for loadable assets.
            </summary>
        </member>
        <member name="P:Evergine.Common.ILoadable.Id">
            <summary>
            Gets or sets the asset Id.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:Evergine.Common.ILoadable.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="E:Evergine.Common.ILoadable.Invalidated">
            <summary>
            Occurs when this instance has been invalidated and all references must be reloaded.
            </summary>
        </member>
        <member name="M:Evergine.Common.ILoadable.Invalidate(Evergine.Common.ILoadable)">
            <summary>
            Invalidates this instance and raise the <see cref="E:Evergine.Common.ILoadable.Invalidated"/> event with the new <see cref="T:Evergine.Common.ILoadable"/> instance.
            </summary>
            <param name="newInstance">The new <see cref="T:Evergine.Common.ILoadable"/> instance.</param>
        </member>
        <member name="M:Evergine.Common.ILoadable.ReleaseUnusedMemory">
            <summary>
            Release unused memory.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.AccelerometerState">
            <summary>
            Describes the accelerometer state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.AccelerometerState.RawAcceleration">
            <summary>
            Raw acceleration value in G-force.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.AccelerometerState.SmoothAcceleration">
            <summary>
            Smooth acceleration value in G-force.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.AccelerometerState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.Buttons">
            <summary>
            Represent all gamepad buttons.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Up">
            <summary>
            Up button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Down">
            <summary>
            Down button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LefShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftTrigger">
            <summary>
            Left trigger.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightTrigger">
            <summary>
            Right trigger.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftThumbstickDown">
            <summary>
            The left thumbstick down
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftThumbstickLeft">
            <summary>
            The left thumbstick left
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftThumbstickRight">
            <summary>
            The left thumbstick right
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.LeftThumbstickUp">
            <summary>
            The left thumbstick up
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightThumbstickDown">
            <summary>
            The right thumbstick down
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightThumbstickLeft">
            <summary>
            The right thumbstick left
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightThumbstickRight">
            <summary>
            The right thumbstick right
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Buttons.RightThumbstickUp">
            <summary>
            The right thumbstick up
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.ButtonState">
            <summary>
            State of a button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ButtonState.Undefined">
            <summary>
            Undefined state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ButtonState.Released">
            <summary>
            Button is released.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ButtonState.Pressing">
            <summary>
            Button is transitioning from released to pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ButtonState.Pressed">
            <summary>
            Button is pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ButtonState.Releasing">
            <summary>
            Button is transitioning from pressed to released.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.ButtonStateTracker`1">
            <summary>
            Tracks button state changes.
            </summary>
            <typeparam name="TButton">The type of the buttons to be tracked.</typeparam>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.ButtonStateTracker`1"/> class.
            </summary>
            <param name="onReleasing">Action to be invoked for every releasing button.</param>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.ReadButtonState(`0)">
            <summary>
            Gets the current state of a button.
            </summary>
            <param name="button">The button to be checked.</param>
            <returns>The state of the specified button.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.IsButtonDown(`0)">
            <summary>
            Gets a value indicating whether the current state of a button is <see cref="F:Evergine.Common.Input.ButtonState.Pressing"/> or
            <see cref="F:Evergine.Common.Input.ButtonState.Pressed"/>.
            </summary>
            <param name="button">The button to be checked.</param>
            <returns><c>true</c> if the button is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.ButtonDown(`0)">
            <summary>
            Handles a button down event.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.ButtonUp(`0)">
            <summary>
            Handles a button up event.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:Evergine.Common.Input.ButtonStateTracker`1.Commit">
            <summary>
            Do a commit operation and update the button status.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.CompassChangedArgs">
            <summary>
            Event args for compass change.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.CompassChangedArgs.NewCompassState">
            <summary>
            Gets the new compass state.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.CompassChangedArgs.#ctor(Evergine.Common.Input.CompassState)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.CompassChangedArgs"/> class.
            </summary>
            <param name="compassState">The compass state.</param>
        </member>
        <member name="T:Evergine.Common.Input.CompassState">
            <summary>
            Define a compass state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.SmoothMagneticHeading">
            <summary>
            The heading, in rads per seconds, measured counterclockwise from the Earth’s magnetic north.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.RawMagneticHeading">
            <summary>
            The raw magnetic heading of the device.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.SmoothGeographicHeading">
            <summary>
            The heading, in rads per seconds, measured counter clockwise from the Earth’s geographic north.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.RawGeographicHeading">
            <summary>
            The raw geographical heading of the device.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.Accuracy">
            <summary>
            The accuracy of the measure, in rads per seconds.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.CompassState.TimeStamp">
            <summary>
            A timestamp indicating the time at which the compass reading was taken.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.CompassState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.DisplayOrientation">
            <summary>
            Specifies the display orientation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.DisplayOrientation.Default">
            <summary>
            Default orientation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.DisplayOrientation.LandscapeLeft">
            <summary>
            Landscape left.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.DisplayOrientation.LandscapeRight">
            <summary>
            Landscape right.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.DisplayOrientation.Portrait">
            <summary>
            Portrait up.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.DisplayOrientation.PortraitFlipped">
            <summary>
            Portrait down.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.GamePadButtons">
            <summary>
            Represents the buttons of a game pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.LeftShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadButtons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.GamePadDPad">
            <summary>
            Represents the state of the directional pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadDPad.Up">
            <summary>
            The D-Pad up button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadDPad.Right">
            <summary>
            The D-Pad right button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadDPad.Down">
            <summary>
            The D-Pad down button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadDPad.Left">
            <summary>
            The D-Pad left button.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.GamePadState">
            <summary>
            Represents the game pad state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadState.DPad">
            <summary>
            Direction buttons.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadState.ThumbSticks">
            <summary>
            Thumb sticks.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadState.Buttons">
            <summary>
            Gamepad buttons.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadState.Triggers">
            <summary>
            Gamepad triggers.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.GamePadState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Input.GamePadState.IsButtonPressed(Evergine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button pressed] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button pressed] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.GamePadState.IsButtonReleased(Evergine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button released] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button released] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Evergine.Common.Input.GamePadThumbSticks">
            <summary>
            Represents the game pad sticks.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadThumbSticks.Left">
            <summary>
            Left thumbstick axis values, in the range -1.0f to 1.0f.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadThumbSticks.Right">
            <summary>
            Right thumbstick axis values, in the range -1.0f to 1.0f.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.GamePadTriggers">
            <summary>
            Represents the game pad triggers.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadTriggers.Left">
            <summary>
            Left trigger value, in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GamePadTriggers.Right">
            <summary>
            Right trigger value, in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.GyroscopeState">
            <summary>
            Describes the gyroscope state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GyroscopeState.SmoothRotationRate">
            <summary>
            Gets the smothed rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.GyroscopeState.RawRotationRate">
            <summary>
            Gets the raw rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.GyroscopeState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.IAccelerometer">
            <summary>
            Interface for accelerometer sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IAccelerometer.GetState">
            <summary>
            Gets the Accelerometer state.
            </summary>
            <returns>Accelerometer state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.IAccelerometerListener">
            <summary>
            Accelerometer listener.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IAccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>The state of the accelerometer.</returns>
        </member>
        <member name="T:Evergine.Common.Input.ICompass">
            <summary>
            Interface for compass sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ICompass.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.ICompassListener">
            <summary>
            Compass Listener.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ICompassListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.IController">
            <summary>
            Interface for controllers.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.IController.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.IGyroscope">
            <summary>
            Interface for Gyroscope sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IGyroscope.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.IGyroscopeListener">
            <summary>
            Interface for Gyroscope sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IGyroscopeListener.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.IInput">
            <summary>
            Interface for input devices.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IInput.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>Keyboard state.</returns>
        </member>
        <member name="M:Evergine.Common.Input.IInput.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>Mouse state.</returns>
        </member>
        <member name="M:Evergine.Common.Input.IInput.GamePadGetState(Evergine.Common.Input.PlayerIndex)">
            <summary>
            Get the current state of a gamepad indentify by index.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>Game pad state.</returns>
        </member>
        <member name="M:Evergine.Common.Input.IInput.SetGamePadGetVibration(Evergine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:Evergine.Common.Input.IInput.TouchPanelGetState(Evergine.Common.Input.TouchPanelState@)">
            <summary>
            Touches the state of the panel get.
            </summary>
            <param name="state">Touch panel state.</param>
        </member>
        <member name="T:Evergine.Common.Input.IListener">
            <summary>
            IListener Interface.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.IListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.IMotionSensor">
            <summary>
            Interface for Motion sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IMotionSensor.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.IMotionSensorListener">
            <summary>
            Interface for Motion sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.IMotionSensorListener.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state.</returns>
        </member>
        <member name="T:Evergine.Common.Input.ISensor">
            <summary>
            Sensors interface.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ISensor.Exist">
            <summary>
            Check if the sensor exist.
            </summary>
            <returns>True if sensor exist, false in other case.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ISensor.Start">
            <summary>
            Starts the sensor.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ISensor.Stop">
            <summary>
            Stops the sensor.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.ISensor.Started">
            <summary>
            Gets a value indicating whether Sensor is started.
            </summary>
            <value>
              <c>true</c> if sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.ISensorFactory">
            <summary>
            Sensor Factory interface.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ISensorFactory.GetAccelerometer">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>Accelerometer Sensor.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ISensorFactory.GetCompass">
            <summary>
            Gets the compass.
            </summary>
            <returns>Compass Sensor.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ISensorFactory.GetGyroscope">
            <summary>
            Gets the gyroscope.
            </summary>
            <returns>Gyroscope Sensor.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ISensorFactory.GetMotion">
            <summary>
            Gets the motion sensor.
            </summary>
            <returns>Motion Sensor.</returns>
        </member>
        <member name="T:Evergine.Common.Input.ITouchable">
            <summary>
            Interface for touchables.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.ITouchable.TouchOrderChanged">
            <summary>
            Occurs when [touch order changed].
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.ITouchable.TouchOrder">
            <summary>
            Gets the touch order.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.ITouchable.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Input.ITouchable.Contains(Evergine.Mathematics.Vector2)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if [contains] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.ITouchable.AddTouch(Evergine.Common.Input.TouchLocation,System.Boolean)">
            <summary>
            Adds the touch.
            </summary>
            <param name="touch">The touch.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:Evergine.Common.Input.ITouchable.UpdateTouchOrder">
            <summary>
            Updates the touch order.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.ITouchable.ManualTouchOrder">
            <summary>
            Gets or sets a value indicating whether [manual touch order].
            </summary>
            <value>
              <c>true</c> if [manual touch order]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.KeyboardState">
            <summary>
            Holds the state of the keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Cancel">
            <summary>
            The cancel key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Back">
            <summary>
            The virtual back key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Clear">
            <summary>
            The Clear key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Shift">
            <summary>
            The Shift key. This is the general Shift case, applicable to key layouts with
            only one Shift key or that do not need to differentiate between left Shift and
            right Shift keystrokes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Control">
            <summary>
            The Ctrl key. This is the general Ctrl case, applicable to key layouts with only
            one Ctrl key or that do not need to differentiate between left Ctrl and right
            Ctrl keystrokes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Menu">
            <summary>
            The menu key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Pause">
            <summary>
            The Pause key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.CapitalLock">
            <summary>
            The Caps Lock key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Kana">
            <summary>
            The Kana symbol key-shift button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Junja">
            <summary>
            The Junja symbol key-shift button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Final">
            <summary>
            The Final symbol key-shift button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Kanji">
            <summary>
            The Kanji symbol key-shift button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Escape">
            <summary>
            The Esc key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Convert">
            <summary>
            The convert button or key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NonConvert">
            <summary>
            The nonconvert button or key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Accept">
            <summary>
            The accept button or key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.ModeChange">
            <summary>
            The mode change key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Space">
            <summary>
            The Spacebar key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Select">
            <summary>
            The Select key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Print">
            <summary>
            The Print key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Execute">
            <summary>
            The execute key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Help">
            <summary>
            The Help key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number0">
            <summary>
            The number "0" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number1">
            <summary>
            The number "1" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number2">
            <summary>
            The number "2" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number3">
            <summary>
            The number "3" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number4">
            <summary>
            The number "4" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number5">
            <summary>
            The number "5" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number6">
            <summary>
            The number "6" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number7">
            <summary>
            The number "7" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number8">
            <summary>
            The number "8" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Number9">
            <summary>
            The number "9" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.A">
            <summary>
            The letter "A" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.B">
            <summary>
            The letter "B" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.C">
            <summary>
            The letter "C" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.D">
            <summary>
            The letter "D" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.E">
            <summary>
            The letter "E" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F">
            <summary>
            The letter "F" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.G">
            <summary>
            The letter "G" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.H">
            <summary>
            The letter "H" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.I">
            <summary>
            The letter "I" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.J">
            <summary>
            The letter "J" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.K">
            <summary>
            The letter "K" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.L">
            <summary>
            The letter "L" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.M">
            <summary>
            The letter "M" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.N">
            <summary>
            The letter "N" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.O">
            <summary>
            The letter "O" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.P">
            <summary>
            The letter "P" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Q">
            <summary>
            The letter "Q" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.R">
            <summary>
            The letter "R" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.S">
            <summary>
            The letter "S" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.T">
            <summary>
            The letter "T" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.U">
            <summary>
            The letter "U" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.V">
            <summary>
            The letter "V" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.W">
            <summary>
            The letter "W" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.X">
            <summary>
            The letter "X" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Y">
            <summary>
            The letter "Y" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Z">
            <summary>
            The letter "Z" key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.LeftWindows">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.RightWindows">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Application">
            <summary>
            The application key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Sleep">
            <summary>
            The sleep key or button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad0">
            <summary>
            The number "0" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad1">
            <summary>
            The number "1" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad2">
            <summary>
            The number "2" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad3">
            <summary>
            The number "3" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad4">
            <summary>
            The number "4" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad5">
            <summary>
            The number "5" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad6">
            <summary>
            The number "6" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad7">
            <summary>
            The number "7" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad8">
            <summary>
            The number "8" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberPad9">
            <summary>
            The number "9" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Multiply">
            <summary>
            The multiply (*) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Add">
            <summary>
            The add (+) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Separator">
            <summary>
            The separator key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Subtract">
            <summary>
            The subtract (-) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Decimal">
            <summary>
            The decimal (.) key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Divide">
            <summary>
            The divide (/) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationView">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationMenu">
            <summary>
            The navigation menu button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationUp">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationDown">
            <summary>
            The navigation down button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationLeft">
            <summary>
            The navigation left button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationRight">
            <summary>
            The navigation right button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationAccept">
            <summary>
            The navigation accept button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NavigationCancel">
            <summary>
            The navigation cancel button.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.NumberKeyLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Scroll">
            <summary>
            The Scroll Lock (ScrLk) key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.LeftControl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Grave">
            <summary>
            The grave key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.RightControl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.LeftMenu">
            <summary>
            The left menu key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.RightMenu">
            <summary>
            The right menu key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.GoBack">
            <summary>
            The go back key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.GoForward">
            <summary>
            The go forward key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Refresh">
            <summary>
            The refresh key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Stop">
            <summary>
            The stop key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Search">
            <summary>
            The search key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Favorites">
            <summary>
            The favorites key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.GoHome">
            <summary>
            The go home key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Underline">
            <summary>
            The underline key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.KeyboardState.BackSlash">
            <summary>
            The backslash key.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.KeyboardState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Input.KeyboardState.IsKeyPressed(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Determines whether [is key pressed] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key pressed] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.KeyboardState.IsKeyReleased(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Determines whether [is key released] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key released] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.KeyboardState.GetChar(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Get Char of a pressed key.
            </summary>
            <param name="key">Pressed key.</param>
            <returns>Return the char.</returns>
        </member>
        <member name="T:Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider">
            <summary>
            Interface for software keyboard providers.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.OnKeyboardClosed">
            <summary>
            Event raised when the software keyboard gets closed.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.OnKeyPressed">
            <summary>
            Event raised when the software keyboard gets a key pressed event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.Show">
            <summary>
            Request to show the keyboard.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.ISoftwareKeyboardProvider.Hide">
            <summary>
            Request to hide the keyboard.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Keyboard.KeyboardDispatcher">
            <summary>
            Dispatch keyboard events associated to a <see cref="T:Evergine.Common.Graphics.Surface"/> or a <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Keyboard.KeyboardDispatcher.KeyDown">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Keyboard.KeyboardDispatcher.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Keyboard.KeyboardDispatcher.KeyChar">
            <summary>
            Occurs when a key is pressed and a character is generated.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Keyboard.KeyboardDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.ReadKeyState(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Gets the current state of a keyboard key.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns>The state of the specified key.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.IsKeyDown(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Gets a value indicating whether the current state of a keyboard key is <see cref="F:Evergine.Common.Input.ButtonState.Pressing"/>
            or <see cref="F:Evergine.Common.Input.ButtonState.Pressed"/>.
            </summary>
            <param name="key">The key to be checked.</param>
            <returns><c>true</c> if the key is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.DispatchEvents">
            <summary>
            Dispatch accumulated events.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.HandleKeyDown(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Handle the down event of the given key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.HandleKeyUp(Evergine.Common.Input.Keyboard.Keys)">
            <summary>
            Handle the up event of the given key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.HandleKeyChar(System.Char)">
            <summary>
            Handle the given character event.
            </summary>
            <param name="character">The character.</param>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.HandleKeyChar(System.String)">
            <summary>
            Handle the given characters event.
            </summary>
            <param name="characters">The characters.</param>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyboardDispatcher.ResetKeyboardStatus">
            <summary>
            Resets current keys status for dispatcher.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Keyboard.KeyCharEventArgs">
            <summary>
            Provides data for keyboard char generation related events.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Keyboard.KeyCharEventArgs.Character">
            <summary>
            Gets the generated character by a key press or a combination of them.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyCharEventArgs.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Keyboard.KeyCharEventArgs" /> class.
            </summary>
            <param name="character">The generated character.</param>
        </member>
        <member name="T:Evergine.Common.Input.Keyboard.KeyEventArgs">
            <summary>
            Provides data for keyboard key related events.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Keyboard.KeyEventArgs.Key">
            <summary>
            Gets the key associated with the event.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Keyboard.KeyEventArgs.IsDown">
            <summary>
            Gets a value indicating whether the event was a <see cref="E:Evergine.Common.Input.Keyboard.KeyboardDispatcher.KeyDown"/> or not.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Keyboard.KeyEventArgs.#ctor(Evergine.Common.Input.Keyboard.Keys,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Keyboard.KeyEventArgs" /> class.
            </summary>
            <param name="key">The key associated with the event.</param>
            <param name="isDown">If its a <see cref="E:Evergine.Common.Input.Keyboard.KeyboardDispatcher.KeyDown"/> or not.</param>
        </member>
        <member name="T:Evergine.Common.Input.Keyboard.Keys">
            <summary>
            All keys.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Unknown">
            <summary>
            Unknown key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Back">
            <summary>
            BACKSPACE key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Tab">
            <summary>
            TAB key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Clear">
            <summary>
            CLEAR Key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Enter">
            <summary>
            ENTER key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.CapsLock">
            <summary>
            CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Escape">
            <summary>
            ESC key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Space">
            <summary>
            SPACEBAR key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.PageUp">
            <summary>
            PAGE UP key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.PageDown">
            <summary>
            PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.End">
            <summary>
            END key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Home">
            <summary>
            HOME key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Left">
            <summary>
            LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Up">
            <summary>
            UP ARROW key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Right">
            <summary>
            RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Down">
            <summary>
            DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Select">
            <summary>
            SELECT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Print">
            <summary>
            PRINT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Execute">
            <summary>
            EXECUTE key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.PrintScreen">
            <summary>
            PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Insert">
            <summary>
            INS key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Delete">
            <summary>
            DEL key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Help">
            <summary>
            HELP key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D0">
            <summary>
            Digit zero key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D1">
            <summary>
            Digit one key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D2">
            <summary>
            Digit two key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D3">
            <summary>
            Digit three key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D4">
            <summary>
            Digit four key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D5">
            <summary>
            Digit five key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D6">
            <summary>
            Digit six key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D7">
            <summary>
            Digit seven key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D8">
            <summary>
            Digit eight key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D9">
            <summary>
            Digit nine key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LeftWindows">
            <summary>
            Left Windows key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.RightWindows">
            <summary>
            Right Windows key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Apps">
            <summary>
            Applications key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Sleep">
            <summary>
            Computer Sleep key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad0">
            <summary>
            Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad1">
            <summary>
            Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad2">
            <summary>
            Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad3">
            <summary>
            Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad4">
            <summary>
            Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad5">
            <summary>
            Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad6">
            <summary>
            Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad7">
            <summary>
            Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad8">
            <summary>
            Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumPad9">
            <summary>
            Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Multiply">
            <summary>
            Multiply key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Add">
            <summary>
            Add key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Separator">
            <summary>
            Separator key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Subtract">
            <summary>
            Subtract key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Decimal">
            <summary>
            Decimal key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Divide">
            <summary>
            Divide key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.NumLock">
            <summary>
            NUM LOCK key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Scroll">
            <summary>
            SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LeftShift">
            <summary>
            Left SHIFT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.RightShift">
            <summary>
            Right SHIFT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LeftControl">
            <summary>
            Left CONTROL key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.RightControl">
            <summary>
            Right CONTROL key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LeftAlt">
            <summary>
            Left ALT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.RightAlt">
            <summary>
            Right ALT key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserBack">
            <summary>
            Browser Back key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserForward">
            <summary>
            Browser Forward key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserRefresh">
            <summary>
            Browser Refresh key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserStop">
            <summary>
            Browser Stop key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserSearch">
            <summary>
            Browser Search key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserFavorites">
            <summary>
            Browser Favorites key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.BrowserHome">
            <summary>
            Browser Start and Home key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.VolumeMute">
            <summary>
            Volume Mute key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.VolumeDown">
            <summary>
            Volume Down key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.VolumeUp">
            <summary>
            Volume Up key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.MediaNextTrack">
            <summary>
            Next Track key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.MediaPreviousTrack">
            <summary>
            Previous Track key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.MediaStop">
            <summary>
            Stop Media key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.MediaPlayPause">
            <summary>
            Play/Pause Media key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LaunchMail">
            <summary>
            Start Mail key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.SelectMedia">
            <summary>
            Select Media key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LaunchApplication1">
            <summary>
            Start Application 1 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.LaunchApplication2">
            <summary>
            Start Application 2 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemPlus">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemComma">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemMinus">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemPeriod">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemTilde">
            <summary>
            The OEM tilde key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.ProcessKey">
            <summary>
            IME PROCESS key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Attn">
            <summary>
            Attn key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Crsel">
            <summary>
            CrSel key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Exsel">
            <summary>
            ExSel key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.EraseEof">
            <summary>
            Erase EOF key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Play">
            <summary>
            Play key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Zoom">
            <summary>
            Zoom key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Pa1">
            <summary>
            PA1 key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Pause">
            <summary>
            PAUSE key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.ImeConvert">
            <summary>
            IME Convert key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.ImeNoConvert">
            <summary>
            IME NoConvert key.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Kana">
            <summary>
            Kana key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Keyboard.Keys.Kanji">
            <summary>
            Kanji key on Japanese keyboards.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.ListenerFactory">
            <summary>
            Sensor Factory for IOS.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ListenerFactory.accelerometerListener">
            <summary>
            The accelerometer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ListenerFactory.compassListener">
            <summary>
            The compass listener.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ListenerFactory.giroscopeListener">
            <summary>
            The gyroscope listener.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ListenerFactory.motionSensorListener">
            <summary>
            The motion sensor listener.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.ListenerFactory.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.GetAccelerometerListener">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>
            Accelerometer Sensor.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.GetCompassListener">
            <summary>
            Gets the compass listener.
            </summary>
            <returns>
            Compass Listener.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.GetGyroscopeListener">
            <summary>
            Gets the gyroscope listener.
            </summary>
            <returns>Gyroscope Listener.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.GetMotionSensorListener">
            <summary>
            Gets the motion listener.
            </summary>
            <returns>Motion Listener.</returns>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.ListenerFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Evergine.Common.Input.MotionState">
            <summary>
            Describes the motion state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MotionState.Orientation">
            <summary>
            Gets the global orientation of the device in Quaternion.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MotionState.OrientationEuler">
            <summary>
            Gets the global orientation of the device in Euler Angles.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.MotionState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Evergine.Common.Input.MouseState">
            <summary>
            Describes the mouse state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.LeftButton">
            <summary>
            Left button state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.RightButton">
            <summary>
            Right button state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.MiddleButton">
            <summary>
            Middle button state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.MouseState.Wheel">
            <summary>
            Wheel value.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.MouseState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Input.MouseState.Position">
            <summary>
            Gets the current mouse position as vector2.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.CursorTypes">
            <summary>
            Enums with the cursor types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Unknown">
            <summary>
            Unknown cursor type.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.None">
            <summary>
            Cursor not visible.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Arrow">
            <summary>
            The default arrow cursor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.IBeam">
            <summary>
            The cursor that appears when the mouse is over text editing regions.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Wait">
            <summary>
            The waiting cursor that appears while the application/system is busy.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Crosshair">
            <summary>
            The crosshair ("+") cursor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.WaitArrow">
            <summary>
            The cross between Arrow and Wait cursors.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Sizing">
            <summary>
            The size all cursor which points in all directions.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.No">
            <summary>
            The cursor that points that something is invalid, usually a cross.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.CursorTypes.Hand">
            <summary>
            The hand cursor, usually used for web links.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseButtonEventArgs">
            <summary>
            Provides data for mouse button related events.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseButtonEventArgs.Button">
            <summary>
            Gets the button associated with the event.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseButtonEventArgs.IsPressed">
            <summary>
            Gets a value indicating whether the button was pressed or released.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseButtonEventArgs.#ctor(Evergine.Common.Input.Mouse.MouseButtons,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Mouse.MouseButtonEventArgs" /> class.
            </summary>
            <param name="button">The button associated with the event.</param>
            <param name="isPressed">Indicates if the button was pressed or released.</param>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseButtons">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
            <remarks>
            It can be used as flags in the <see cref="P:Evergine.Common.Input.Mouse.MouseDispatcher.State"/> property.
            </remarks>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseButtons.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseDispatcher">
            <summary>
            Dispatch mouse events associated to a <see cref="T:Evergine.Common.Graphics.Surface"/> or a <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is inside the <see cref="T:Evergine.Common.Graphics.Surface"/> or
            <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.CursorType">
            <summary>
            Gets the active cursor type. It can be changed calling the method <see cref="M:Evergine.Common.Input.Mouse.MouseDispatcher.TrySetCursorType(Evergine.Common.Input.Mouse.CursorTypes)"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.Position">
            <summary>
            Gets the mouse position. Can be changed programmatically calling the method
            <see cref="M:Evergine.Common.Input.Mouse.MouseDispatcher.TrySetCursorPosition(Evergine.Mathematics.Point)"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.PositionDelta">
            <summary>
            Gets the mouse delta position since the last frame.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.ScrollDelta">
            <summary>
            Gets the mouse scroll increment since the last frame.
            </summary>
            <remarks>
            The value of <see cref="F:Evergine.Mathematics.Point.X"/> indicates the horizontal scroll increment. This value is positive if
            the mouse wheel is rotated to the right or negative if the mouse wheel is rotated to the left.
            The value of <see cref="F:Evergine.Mathematics.Point.Y"/> indicates the vertical scroll increment. This value is positive if
            the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is
            rotated in a downward direction (toward the user).
            </remarks>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseDispatcher.State">
            <summary>
            Gets the mouse buttons state.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the <see cref="T:Evergine.Common.Graphics.Surface"/> or <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the <see cref="T:Evergine.Common.Graphics.Surface"/> or <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseButtonDown">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseButtonUp">
            <summary>
            Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the <see cref="T:Evergine.Common.Graphics.Surface"/> or
            <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Mouse.MouseDispatcher.MouseScroll">
            <summary>
            Occurs when the mouse wheel (vertical or horizontal) moves.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Mouse.MouseDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.ReadButtonState(Evergine.Common.Input.Mouse.MouseButtons)">
            <summary>
            Gets the current state of a mouse button.
            </summary>
            <param name="button">The button to be checked.</param>
            <returns>The state of the specified button.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.IsButtonDown(Evergine.Common.Input.Mouse.MouseButtons)">
            <summary>
            Gets a value indicating whether the current state of a mouse button is <see cref="F:Evergine.Common.Input.ButtonState.Pressing"/>
            or <see cref="F:Evergine.Common.Input.ButtonState.Pressed"/>.
            </summary>
            <param name="button">The button to be checked.</param>
            <returns><c>true</c> if the button is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.TrySetCursorPosition(Evergine.Mathematics.Point)">
            <summary>
            Tries to move the mouse cursor to the specified position.
            </summary>
            <param name="position">The new position for the cursor.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.TrySetCursorType(Evergine.Common.Input.Mouse.CursorTypes)">
            <summary>
            Tries to change the mouse cursor type.
            </summary>
            <param name="cursorType">The new cursor type.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.DispatchEvents">
            <inheritdoc />
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.NativeSetCursorPosition(Evergine.Mathematics.Point)">
            <summary>
            Sets natively the cursor position.
            </summary>
            <param name="position">The new position.</param>
            <returns>True if the operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseEnter(Evergine.Mathematics.Point)">
            <summary>
            Handles the mouse enter event.
            </summary>
            <param name="position">The mouse position.</param>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseLeave(Evergine.Mathematics.Point)">
            <summary>
            Handles the mouse leave event.
            </summary>
            <param name="position">The mouse position.</param>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseMove(Evergine.Mathematics.Point)">
            <summary>
            Handles the mouse move event.
            </summary>
            <param name="position">The mouse position.</param>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseButtonDown(Evergine.Common.Input.Mouse.MouseButtons)">
            <summary>
            Handles the mouse button down event.
            </summary>
            <param name="button">The button pressed.</param>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseButtonUp(Evergine.Common.Input.Mouse.MouseButtons)">
            <summary>
            Handles the mouse button up event.
            </summary>
            <param name="button">The button pressed.</param>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseDispatcher.HandleMouseScroll(Evergine.Common.Input.Mouse.MouseScrollDirections)">
            <summary>
            Handles the mouse button scroll event.
            </summary>
            <param name="direction">The scroll direction.</param>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseEventArgs">
            <summary>
            Provides data for various events that report changes of a mouse device.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseEventArgs.Position">
            <summary>
            Gets the mouse position.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseEventArgs.State">
            <summary>
            Gets the mouse buttons state.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseScrollDirections">
            <summary>
            Specifies the direction of a mouse wheel rotation.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseScrollDirections.Up">
            <summary>
            The mouse wheel is rotated in an upward direction (away from the user).
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseScrollDirections.Down">
            <summary>
            The mouse wheel is rotated in an downward direction (toward the user).
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseScrollDirections.Left">
            <summary>
            The mouse wheel is rotated to the left.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.Mouse.MouseScrollDirections.Right">
            <summary>
            The mouse wheel is rotated to the right.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Mouse.MouseScrollEventArgs">
            <summary>
            Provides data for mouse scroll related events.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseScrollEventArgs.Direction">
            <summary>
            Gets the direccion of the scroll movement.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Mouse.MouseScrollEventArgs.Delta">
            <summary>
            Gets the direccion of the scroll movement as a <see cref="T:Evergine.Mathematics.Point"/>.
            </summary>
            <remarks>
            The value of <see cref="F:Evergine.Mathematics.Point.X"/> indicates the horizontal scroll increment. This value is positive if
            the mouse wheel is rotated to the right or negative if the mouse wheel is rotated to the left.
            The value of <see cref="F:Evergine.Mathematics.Point.Y"/> indicates the vertical scroll increment. This value is positive if
            the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is
            rotated in a downward direction (toward the user).
            </remarks>
        </member>
        <member name="M:Evergine.Common.Input.Mouse.MouseScrollEventArgs.#ctor(Evergine.Common.Input.Mouse.MouseScrollDirections)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Mouse.MouseScrollEventArgs" /> class.
            </summary>
            <param name="direction">The direccion of the scroll movement.</param>
        </member>
        <member name="T:Evergine.Common.Input.OrientationChangedArgs">
            <summary>
            Represents the orientation of the compass.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.OrientationChangedArgs.NewOrientation">
            <summary>
            Gets the new orientation.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.OrientationChangedArgs.#ctor(Evergine.Common.Input.DisplayOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.OrientationChangedArgs"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="T:Evergine.Common.Input.PlayerIndex">
            <summary>
            Index of the player.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.PlayerIndex.One">
            <summary>
            First player.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.PlayerIndex.Two">
            <summary>
            Second player.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.PlayerIndex.Three">
            <summary>
            Third player.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.PlayerIndex.Four">
            <summary>
            Fourth player.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.Pointer.PointerDispatcher">
            <summary>
            Dispatch pointer events associated to a <see cref="T:Evergine.Common.Graphics.Surface"/> or a <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerDispatcher.Points">
            <summary>
            Gets the points detected inside the <see cref="T:Evergine.Common.Graphics.Surface"/> or
            <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Pointer.PointerDispatcher.PointerDown">
            <summary>
            Occurs when a new point is detected in the <see cref="T:Evergine.Common.Graphics.Surface"/> or <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Pointer.PointerDispatcher.PointerUp">
            <summary>
            Occurs when an existing point leaves the <see cref="T:Evergine.Common.Graphics.Surface"/> or <see cref="T:Evergine.Common.Graphics.Window"/>.
            </summary>
        </member>
        <member name="E:Evergine.Common.Input.Pointer.PointerDispatcher.PointerMove">
            <summary>
            Occurs when an existing point changes its position.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Pointer.PointerDispatcher" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerDispatcher.DispatchEvents">
            <summary>
            Dispatch accumulated events.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerDispatcher.HandlePointerDown(System.Int64,Evergine.Mathematics.Point)">
            <summary>
            Handles the pointer down event.
            </summary>
            <param name="pointId">The point id.</param>
            <param name="position">The point position.</param>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerDispatcher.HandlePointerUp(System.Int64,Evergine.Mathematics.Point)">
            <summary>
            Handles the pointer up event.
            </summary>
            <param name="pointId">The point id.</param>
            <param name="position">The pointer position.</param>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerDispatcher.HandlePointerMove(System.Int64,Evergine.Mathematics.Point)">
            <summary>
            Handles the pointer move event.
            </summary>
            <param name="pointId">The point id.</param>
            <param name="position">The point position.</param>
        </member>
        <member name="T:Evergine.Common.Input.Pointer.PointerEventArgs">
            <summary>
            Provides data for various events that report changes of a pointer point.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerEventArgs.Id">
            <summary>
            Gets the identifier of the pointer point associated with the event.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerEventArgs.Position">
            <summary>
            Gets the position of the pointer point associated with the event.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerEventArgs.#ctor(System.Int64,Evergine.Mathematics.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Pointer.PointerEventArgs" /> class.
            </summary>
            <param name="id">The identifier of the pointer point associated with the event.</param>
            <param name="position">The position of the pointer point associated with the event.</param>
        </member>
        <member name="T:Evergine.Common.Input.Pointer.PointerPoint">
            <summary>
            Class containing the pointer info.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerPoint.Id">
            <summary>
            Gets the pointer id.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerPoint.Position">
            <summary>
            Gets the pointer position.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.Pointer.PointerPoint.State">
            <summary>
            Gets the pointer state.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.Pointer.PointerPoint.#ctor(System.Int64,Evergine.Mathematics.Point,Evergine.Common.Input.ButtonStateTracker{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.Pointer.PointerPoint"/> class.
            </summary>
            <param name="id">The pointer id.</param>
            <param name="position">The pointer position.</param>
            <param name="stateTracker">The state tracker.</param>
        </member>
        <member name="T:Evergine.Common.Input.SensorNotAvailableException">
            <summary>
            Exception for a sensor that it is not available.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.SensorNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.SensorNotAvailableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Evergine.Common.Input.TouchLocation">
            <summary>
            Represents a touch location.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocation.Id">
            <summary>
            Touch ID.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocation.State">
            <summary>
            Touch state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocation.Position">
            <summary>
            Touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocation.IsNew">
            <summary>
            If the point is new or it previously existing.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.#ctor(System.Int32,Evergine.Common.Input.TouchLocationState,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.TouchLocation" /> struct.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.Equals(Evergine.Common.Input.TouchLocation)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.op_Equality(Evergine.Common.Input.TouchLocation,Evergine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.op_Inequality(Evergine.Common.Input.TouchLocation,Evergine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Evergine.Common.Input.TouchLocationState">
            <summary>
            Status of the touch location.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocationState.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocationState.Release">
            <summary>
            Touch released.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocationState.Pressed">
            <summary>
            Touch pressed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchLocationState.Moved">
            <summary>
            Touch moved.
            </summary>
        </member>
        <member name="T:Evergine.Common.Input.TouchPanelState">
            <summary>
            Represents the state of the touch panel.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch0">
            <summary>
            First touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch1">
            <summary>
            Second touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch2">
            <summary>
            Third touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch3">
            <summary>
            Fourth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch4">
            <summary>
            Fifth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch5">
            <summary>
            Sixth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch6">
            <summary>
            Seventh touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch7">
            <summary>
            Eighth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch8">
            <summary>
            Ninth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch9">
            <summary>
            Tenth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch10">
            <summary>
            Eleventh touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch11">
            <summary>
            Twelfth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch12">
            <summary>
            Thirteenth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch13">
            <summary>
            Fourteenth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch14">
            <summary>
            Fifteenth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touch15">
            <summary>
            Sixteenth touch position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.MaxTouches">
            <summary>
            Maximum number of touches.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.isConnected">
            <summary>
            Touch panel is connected.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.touchCount">
            <summary>
            Number of touches.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Evergine.Common.Input.TouchLocation"/> at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.#ctor(Evergine.Common.Input.TouchLocation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.TouchPanelState"/> struct.
            </summary>
            <param name="touches">The touches.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.AddTouchLocation(System.Int32,Evergine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The touch state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.AddTouchLocation(System.Int32,System.Single,System.Single)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.RemoveTouchLocation(System.Int32)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.TryGetTouch(System.Int32,Evergine.Common.Input.TouchLocation@)">
            <summary>
            Tries the get touch.
            </summary>
            <param name="id">The id.</param>
            <param name="touchLocation">The touch location.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.ModifyTouch(System.Int32,Evergine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Modifies the touch.
            </summary>
            <param name="id">The id.</param>
            <param name="newState">The new state.</param>
            <param name="newX">The new X.</param>
            <param name="newY">The new Y.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#Generic#IEnumerable{Evergine#Common#Input#TouchLocation}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.IndexOf(Evergine.Common.Input.TouchLocation)">
            <summary>
            Indexes the of.
            </summary>
            <param name="touch">The touch.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Update">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Contains(Evergine.Common.Input.TouchLocation)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Contains(System.Int32)">
            <summary>
            Determines whether [contains] [the specified id].
            </summary>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if [contains] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.CopyTo(Evergine.Common.Input.TouchLocation[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{Evergine#Common#Input#TouchLocation}#Add(Evergine.Common.Input.TouchLocation)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{Evergine#Common#Input#TouchLocation}#Remove(Evergine.Common.Input.TouchLocation)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#Generic#IList{Evergine#Common#Input#TouchLocation}#Insert(System.Int32,Evergine.Common.Input.TouchLocation)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.System#Collections#Generic#IList{Evergine#Common#Input#TouchLocation}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:Evergine.Common.Input.TouchPanelState.Enumerator">
            <summary>
            Touch panel enumerator.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.Enumerator.collection">
            <summary>
            Collection of states.
            </summary>
        </member>
        <member name="F:Evergine.Common.Input.TouchPanelState.Enumerator.position">
            <summary>
            Position in the collection.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:Evergine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Enumerator.#ctor(Evergine.Common.Input.TouchPanelState)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Input.TouchPanelState.Enumerator"/> struct.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Evergine.Common.Input.TouchPanelState.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.IO.AssetsDirectoryBase">
            <summary>
            Base class containing method for accessing assets in a directory.
            </summary>
        </member>
        <member name="F:Evergine.Common.IO.AssetsDirectoryBase.DefaultFolderName">
            <summary>
            The default assets folder name.
            </summary>
        </member>
        <member name="P:Evergine.Common.IO.AssetsDirectoryBase.RootPath">
            <summary>
            Gets the root path of the assets directory.
            </summary>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IO.AssetsDirectoryBase" /> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IO.AssetsDirectoryBase" /> class.
            </summary>
            <param name="rootPath">The root path of the assets directory.</param>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.UpdateRootPath(System.String)">
            <summary>
            Updates the root path.
            </summary>
            <param name="rootPath">The new root path.</param>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of subdirectories that match the specified search pattern in the specified
            relative path in the assets directory, and optionally searches subdirectories.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter can contain a combination of
            valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.
            </param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include all subdirectories
            or only the current directory.
            </param>
            <returns>
            An enumerable collection of subdirectories the specified relative path in the assets directory that match
            the specified criteria, or an empty enumerable collection if no directories are found.
            </returns>
            <remarks>
            If an existing directory is empty, it will be discarded in the enumerable collection.
            </remarks>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files that match the specified search pattern in the specified relative path in the
            assets directory, and optionally searches subdirectories.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter can contain a combination of
            valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.
            </param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include all subdirectories
            or only the current directory.
            </param>
            <returns>
            An enumerable collection of names for the files in the specified relative path in the assets directory that
            match the specified criteria, or an empty enumerable collection if no directories are found.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.Exists(System.String)">
            <summary>
            Determines whether the specified asset file exists.
            </summary>
            <param name="path">The asset file path to check.</param>
            <returns>
            <c>true</c> if the assets directory contains the specified file name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.Open(System.String)">
            <summary>
            Opens the specified asset file.
            </summary>
            <param name="path">The relative path to the asset file.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateDirectories(System.String)">
            <summary>
            Returns an enumerable collection of subdirectories the specified relative path in the assets directory.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <returns>
            An enumerable collection of subdirectories the specified relative path in the assets directory, or an empty
            enumerable collection if no directories are found.
            </returns>
            <remarks>
            If an existing directory is empty, it will be discarded in the enumerable collection.
            </remarks>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateDirectories(System.String,System.String)">
            <summary>
            Returns an enumerable collection of subdirectories that match the specified search pattern in the specified
            relative path in the assets directory.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter can contain a combination of
            valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.
            </param>
            <returns>
            An enumerable collection of subdirectories the specified relative path in the assets directory that match
            the specified criteria, or an empty enumerable collection if no directories are found.
            </returns>
            <remarks>
            If an existing directory is empty, it will be discarded in the enumerable collection.
            </remarks>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateFiles(System.String)">
            <summary>
            Returns the names of files in the specified relative path in the assets directory.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <returns>
            An enumerable collection of names for the files in the specified relative path in the assets directory, or
            an empty enumerable collection if no directories are found.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.EnumerateFiles(System.String,System.String)">
            <summary>
            Returns the names of files that match the specified search pattern in the specified relative path in the
            assets directory.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter can contain a combination of
            valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.
            </param>
            <returns>
            An enumerable collection of names for the files in the specified relative path in the assets directory that
            match the specified criteria, or an empty enumerable collection if no directories are found.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.ReadAsStringAsync(System.String)">
            <summary>
            Reads all characters of the specified asset file asynchronously and returns them as one string.
            </summary>
            <param name="path">The relative path to the asset file.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult parameter contains
            a string with the characters of the specified asset file.
            </returns>
        </member>
        <member name="M:Evergine.Common.IO.AssetsDirectoryBase.GetFullPath(System.String)">
            <summary>
            Gets the full file path given a relative one.
            </summary>
            <param name="path">The relative path in the assets directory.</param>
            <returns>The full file path in the assets directory.</returns>
        </member>
        <member name="T:Evergine.Common.IO.AssetStream">
            <summary>
            Stream containing an asset data, and its path.
            </summary>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.Path">
            <summary>
            Gets the asset path.
            </summary>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.TargetPath">
            <summary>
            Gets or sets the environment path.
            </summary>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.IO.AssetStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IO.AssetStream"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="stream">The asset stream.</param>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.#ctor(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IO.AssetStream" /> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="stream">The asset stream.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the AssetStream object is disposed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.#ctor(System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.IO.AssetStream" /> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="targetPath">The target path.</param>
            <param name="stream">The asset stream.</param>
            <param name="leaveOpen"><c>true</c> to leave the stream open after the AssetStream object is disposed; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.IO.AssetStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.IO.IIOManager">
            <summary>
            Interface for I/O managers.
            </summary>
        </member>
        <member name="P:Evergine.Common.IO.IIOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.ExistsContentFile(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.OpenStorageFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.OpenStorageFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels.</param>
            <param name="imageHeight">The height of the image in pixels.</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image.</returns>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Evergine.Common.IO.IIOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="T:Evergine.Common.IO.PathValidator">
            <summary>
            Static class that contains path validation methods.
            </summary>
        </member>
        <member name="M:Evergine.Common.IO.PathValidator.EnsureCorrectFileSystemName(System.String)">
            <summary>
            Ensures the correct file system name.
            </summary>
            <param name="filename">The filename.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <remarks>Throws an exception if <paramref name="filename"/> is not a correct file system path, otherwise no.</remarks>
        </member>
        <member name="M:Evergine.Common.IO.PathValidator.EnsureCorrectFileSystemPath(System.String)">
            <summary>
            Ensures the correct file system path.
            </summary>
            <param name="path">The path to file or directory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <remarks>Throws an exception if <paramref name="path"/> is not a correct file system path, otherwise no.</remarks>
        </member>
        <member name="T:Evergine.Common.IO.ResourceLoader">
            <summary>
            Loads resources embedded in the assembly.
            </summary>
        </member>
        <member name="M:Evergine.Common.IO.ResourceLoader.GetEmbeddedResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource stream.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:Evergine.Common.IO.ResourceLoader.GetEmbeddedResourceData(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource data.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource data.</returns>
        </member>
        <member name="M:Evergine.Common.IO.ResourceLoader.GetEmbeddedTextFile(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded text file.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource string.</returns>
        </member>
        <member name="M:Evergine.Common.IO.ResourceLoader.EmbeddedResourceExists(System.Reflection.Assembly,System.String)">
            <summary>
            Embeddeds the resource exists.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
            <param name="name">The name.</param>
            <returns>
            returns System.Boolean.
            </returns>
        </member>
        <member name="T:Evergine.Common.IO.SerializableMember">
            <summary>
            Marks the item as serializable by the infrastructure.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.CameraCaptureState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.CameraCaptureState.Preview">
            <summary>
            Camera capture is started.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.CameraCaptureState.Recording">
            <summary>
            Camera is recording.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.CameraCaptureState.Stopped">
            <summary>
            Camera capture is stopped.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.CameraCaptureType">
            <summary>
            Camera capture type enumeration.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.CameraCaptureType.Back">
            <summary>
            Back camera
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.CameraCaptureType.Front">
            <summary>
            Front camera
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.ICameraCapture">
            <summary>
            Camera capture support.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.ICameraCapture.PreviewTexture">
            <summary>
            Gets the camera previewtexture.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.ICameraCapture.State">
            <summary>
            Gets a value indicating the camera capture state.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.ICameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.ICameraCapture.Start(Evergine.Common.Media.CameraCaptureType)">
            <summary>
            Starts the camera capture.
            </summary>
            <param name="cameraType">camera type.</param>
        </member>
        <member name="M:Evergine.Common.Media.ICameraCapture.Stop">
            <summary>
            Stops the camera capture.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.ICameraCapture.StartRecording(System.String)">
            <summary>
            Start Video recording.
            </summary>
            <param name="videoFilePath">file path where the video was recorded.</param>
        </member>
        <member name="M:Evergine.Common.Media.ICameraCapture.StopRecording">
            <summary>
            Stop video recording.
            </summary>
            <returns>stored video path.</returns>
        </member>
        <member name="M:Evergine.Common.Media.ICameraCapture.Update(System.TimeSpan)">
            <summary>
            Update camera capture.
            </summary>
            <param name="gameTime">game time interval.</param>
        </member>
        <member name="T:Evergine.Common.Media.IMicrophone">
            <summary>
            Microphone support.
            </summary>
        </member>
        <member name="E:Evergine.Common.Media.IMicrophone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IMicrophone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is recording now.
            </summary>
            <value>
                <c>true</c> if this instance is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.IMicrophone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone available.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IMicrophone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMicrophone.Start">
            <summary>
            Starts the record.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMicrophone.Start(System.IO.Stream)">
            <summary>
            Starts the record in a custom file.
            </summary>
            <param name="fileStream">Stream of the recorded file.</param>
        </member>
        <member name="M:Evergine.Common.Media.IMicrophone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMicrophone.GetRecordedSound">
            <summary>
            Get a soundbase object.
            </summary>
            <returns>The recorded sound.</returns>
        </member>
        <member name="T:Evergine.Common.Media.IMusicPlayer">
            <summary>
            Interface for music player.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IMusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IMusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.IMusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.IMusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.IMusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.Play(Evergine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="music">The music.</param>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IMusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.IVideoInfo">
            <summary>
            Interface for video info.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.IVideoPlayer">
            <summary>
            Interface for video player.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.IVideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether if Video texture is supported on this device.
            </summary>
        </member>
        <member name="E:Evergine.Common.Media.IVideoPlayer.OnComplete">
            <summary>
            Event fired when the video play is completed
            </summary>
        </member>
        <member name="E:Evergine.Common.Media.IVideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="E:Evergine.Common.Media.IVideoPlayer.OnVideoTexture">
            <summary>
            Event fired when the video texture is updated
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.Play(Evergine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.Stop">
            <summary>
            Stops playing a video.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path.
            </summary>
            <param name="path">video path.</param>
            <returns>platform specific video info.</returns>
        </member>
        <member name="M:Evergine.Common.Media.IVideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player.
            </summary>
            <param name="gameTime">game time.</param>
        </member>
        <member name="T:Evergine.Common.Media.MicrophoneDataEventArgs">
            <summary>
            Microphone Data Event args.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.MicrophoneDataEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.MicrophoneDataEventArgs"/> class.
            </summary>
            <param name="buffer">buffer data.</param>
            <param name="bytes">bytes recorded.</param>
        </member>
        <member name="P:Evergine.Common.Media.MicrophoneDataEventArgs.Buffer">
            <summary>
            Gets the audio byte buffer.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.MicrophoneDataEventArgs.BytesRecorded">
            <summary>
            Gets the amount of bytes recorded.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.MusicInfo">
            <summary>
            Represents info about a music track.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicInfo.NumMusic">
            <summary>
            Loaded song count.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicInfo.MusicId">
            <summary>
            Unique ID of the track.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicInfo.Path">
            <summary>
            Path of the song.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.MusicInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.MusicInfo"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:Evergine.Common.Media.MusicState">
            <summary>
            Specifies the music state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicState.Paused">
            <summary>
            Music is paused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicState.Playing">
            <summary>
            Music is playing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.MusicState.Stopped">
            <summary>
            Music is stopped.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.SoundBase">
            <summary>
            Sound basic class.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.SoundBase.SoundHandle">
            <summary>
            Sound handle.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.IsValidSound">
            <summary>
            Gets a value indicating whether this instance is valid sound.
            </summary>
            <value>
                <c>true</c> if this instance is valid sound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.Path">
            <summary>
            Gets or sets the path of the sound asset.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.BitsPerSample">
            <summary>
            Gets or sets the bits per sample.
            </summary>
            <value>
            The bits per sample.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.Channels">
            <summary>
            Gets or sets the channels.
            </summary>
            <value>
            The channels.
            </value>
        </member>
        <member name="P:Evergine.Common.Media.SoundBase.PCMData">
            <summary>
            Gets or sets the PCM data.
            </summary>
            <value>
            The PCM data.
            </value>
        </member>
        <member name="M:Evergine.Common.Media.SoundBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.SoundBase"/> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.SoundEmitter">
            <summary>
            Represent a Sound Emitter, used in 3D audio effects.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.SoundEmitter.WorldTransform">
            <summary>
            The world transform of the sound emitter.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.SoundEmitter.Velocity">
            <summary>
            The sound emitter velocity.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.SoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.SoundEmitter" /> class.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.SoundListener">
            <summary>
            Represent a Sound Listener, used in 3D audio effects.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.SoundListener.WorldTransform">
            <summary>
            The world transform of the sound listener.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.SoundListener.Velocity">
            <summary>
            The sound listener velocity.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.PlayState">
            <summary>
            Specifies the state (playing, paused, or stopped) of a media.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.PlayState.Playing">
            <summary>
            The media is currently being played.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.PlayState.Paused">
            <summary>
            The media is currently paused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.PlayState.Stopped">
            <summary>
            The media is currently stopped.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.VideoInfo">
            <summary>
            Represents info about a video.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.VideoInfo.internalVideoInfo">
            <summary>
            The specific <see cref="T:Evergine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.VideoInfo.disposed">
            <summary>
            If Video Info is disposed.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.VideoInfo.InternalVideoInfo">
            <summary>
            Gets the specific <see cref="T:Evergine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.VideoInfo.Path">
            <summary>
            Gets the path of the video.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.VideoInfo.#ctor(Evergine.Common.Media.IVideoInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.VideoInfo"/> class.
            </summary>
            <param name="internalVideoInfo">platform video info.</param>
        </member>
        <member name="M:Evergine.Common.Media.VideoInfo.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Evergine.Common.Media.VideoInfo"/> object.
            </summary>
            <remarks>Call <see cref="M:Evergine.Common.Media.VideoInfo.Dispose"/> when you are finished using the <see cref="T:Evergine.Common.Media.VideoInfo"/>. The
            <see cref="M:Evergine.Common.Media.VideoInfo.Dispose"/> method leaves the <see cref="T:Evergine.Common.Media.VideoInfo"/> in an unusable state.
            After calling <see cref="M:Evergine.Common.Media.VideoInfo.Dispose"/>, you must release all references to the
            <see cref="T:Evergine.Common.Media.VideoInfo"/> so the garbage collector can reclaim the memory that the
            <see cref="T:Evergine.Common.Media.VideoInfo"/> was occupying.</remarks>
        </member>
        <member name="T:Evergine.Common.Media.VideoState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.VideoState.Paused">
            <summary>
            Video is paused.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.VideoState.Playing">
            <summary>
            Video is playing.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.VideoState.Stopped">
            <summary>
            Video is stopped.
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.WavFileWriter">
            <summary>
            This class writes WAV data to a .wav file on disk.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.EXPORTTYPE">
            <summary>
            Export type of the file.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.EXPORTVERSION">
            <summary>
            Export version of the file.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.outStream">
            <summary>
            Output stream.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.writer">
            <summary>
            Binary writer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.dataSizePos">
            <summary>
            Data size position.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.dataChunkSize">
            <summary>
            Data chunk size.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.format">
            <summary>
            Format of the wave.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.wpkHeaderSize">
            <summary>
            Size of the WPK header.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.fileSizePosition">
            <summary>
            The position of the size holder of the WPK header.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,Evergine.Common.Media.WavFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.WavFileWriter"/> class that actually writes to a stream.
            </summary>
            <param name="outStream">Stream to be written to.</param>
            <param name="format">Wave format to use.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,Evergine.Common.Media.WavFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.WavFileWriter"/> class that actually writes to a stream.
            </summary>
            <param name="outStream">Stream to be written to.</param>
            <param name="format">Wave format to use.</param>
            <param name="writeWPKHeader">If writes wpk header.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteWPKHeader">
            <summary>
            Writes the WPK headers of the file.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteHeaderChunk">
            <summary>
            Writes the WAV header chunk.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteFormatChunk">
            <summary>
            Writes the formatChunk.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteDataChunkHeader">
            <summary>
            Writes the data chunk header.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.Length">
            <summary>
            Gets the Number of bytes of audio in the data chunk.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.WaveFormat">
            <summary>
            Gets the WaveFormat of this wave file.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.CanRead">
            <summary>
            Gets a value indicating whether can read (Returns false: Cannot read from a WaveFileWriter).
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.CanWrite">
            <summary>
            Gets a value indicating whether can write (Returns true: Can write to a WaveFileWriter).
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.CanSeek">
            <summary>
            Gets a value indicating whether returns false: Cannot seek within a WaveFileWriter.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read is not supported for a WaveFileWriter.
            </summary>
            <param name="buffer">Byte read buffer.</param>
            <param name="offset">Offset of the read in the buffer.</param>
            <param name="count">Count of elements of the read operation.</param>
            <returns>Bytes readed.</returns>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek is not supported for a WaveFileWriter.
            </summary>
            <param name="offset">Offset to seek.</param>
            <param name="origin">Origin of the seek.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.SetLength(System.Int64)">
            <summary>
            SetLength is not supported for EvergineFileWriter.
            </summary>
            <param name="value">New length.</param>
        </member>
        <member name="P:Evergine.Common.Media.WavFileWriter.Position">
            <summary>
            Gets or sets gets the Position in the WaveFile (i.e. number of bytes written so far).
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends bytes to the WaveFile (assumes they are already in the correct format).
            </summary>
            <param name="data">the buffer containing the wave data.</param>
            <param name="offset">the offset from which to start writing.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="F:Evergine.Common.Media.WavFileWriter.value24">
            <summary>
            Value of 24 bits.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteSample(System.Single)">
            <summary>
            Writes a single sample to the Wave file.
            </summary>
            <param name="sample">the sample to write (assumed floating point with 1.0f as max value).</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
            Writes 32 bit floating point samples to the Wave file
            They will be converted to the appropriate bit depth depending on the WaveFormat of the WAV file.
            </summary>
            <param name="samples">The buffer containing the floating point samples.</param>
            <param name="offset">The offset from which to start writing.</param>
            <param name="count">The number of floating point samples to write.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file.
            </summary>
            <param name="samples">The buffer containing the 16 bit samples.</param>
            <param name="offset">The offset from which to start writing.</param>
            <param name="count">The number of 16 bit samples to write.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.WriteSamples(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file.
            </summary>
            <param name="samples">The buffer containing the 16 bit samples.</param>
            <param name="offset">The offset from which to start writing.</param>
            <param name="count">The number of 16 bit samples to write.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Flush">
            <summary>
            Ensures data is written to disk.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data.
            </summary>
            <param name="disposing">True if called from <see>Dispose</see>.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header with file size information.
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.UpdateDataChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the data chunk.
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.UpdateRiffChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the riff chunk.
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFileWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Evergine.Common.Media.WavFileWriter"/> class. Should only be called if the user forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="T:Evergine.Common.Media.WavFormat">
            <summary>
            Represents a Wave file format.
            </summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.channels">
            <summary>number of channels.</summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.sampleRate">
            <summary>sample rate.</summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.averageBytesPerSecond">
            <summary>for buffer estimation.</summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.blockAlign">
            <summary>block size of data.</summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.bitsPerSample">
            <summary>number of bits per sample of mono data.</summary>
        </member>
        <member name="F:Evergine.Common.Media.WavFormat.extraSize">
            <summary>number of following bytes.</summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.WavFormat"/> class, a new PCM 44.1Khz stereo 16 bit format.
            </summary>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.WavFormat"/> class, a new 16 bit wave format with the specified sample
            rate and channel count.
            </summary>
            <param name="sampleRate">Sample Rate.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>Size of the wave buffer equivaelent to the latency in milliseconds.</returns>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Media.WavFormat"/> class, a new PCM format with the specified sample rate, bit depth and channels.
            </summary>
            <param name="rate">Sample rate.</param>
            <param name="bits">Audio bits.</param>
            <param name="channels">Audio channels.</param>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.ToString">
            <summary>
            Reports this WaveFormat as a string.
            </summary>
            <returns>String describing the wave format.</returns>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the objects are the same.</returns>
        </member>
        <member name="M:Evergine.Common.Media.WavFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat.
            </summary>
            <returns>A hashcode.</returns>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.Channels">
            <summary>
            Gets the number of channels (1=mono,2=stereo etc).
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.SampleRate">
            <summary>
            Gets the sample rate (samples per second).
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.AverageBytesPerSecond">
            <summary>
            Gets the average number of bytes used per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.BlockAlign">
            <summary>
            Gets the block alignment.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.BitsPerSample">
            <summary>
            Gets the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs.
            </summary>
        </member>
        <member name="P:Evergine.Common.Media.WavFormat.ExtraSize">
            <summary>
            Gets the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header.
            </summary>
        </member>
        <member name="T:Evergine.Common.OperatingSystemHelper">
            <summary>
            Helper class to determine executing OS platform.
            </summary>
        </member>
        <member name="M:Evergine.Common.OperatingSystemHelper.IsOSPlatform(Evergine.Common.PlatformType)">
            <summary>
            Checks current executing platform.
            </summary>
            <param name="platform">Platform to check.</param>
            <returns>True if platform check succees; false otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.OperatingSystemHelper.IsAnyOfOSPlatforms(System.Collections.Generic.IEnumerable{Evergine.Common.PlatformType})">
            <summary>
            Checks current executing platform is one of specified platforms.
            </summary>
            <param name="platforms">Lookup platforms.</param>
            <returns>True if any of the provided platforms matches; false otherwise.</returns>
        </member>
        <member name="M:Evergine.Common.OperatingSystemHelper.GetCurrentPlatfom">
            <summary>
            Gets current executing platform.
            </summary>
            <returns>Executing platform if found. Returns <see cref="F:Evergine.Common.PlatformType.Undefined"/> if platform could not be determined.</returns>
        </member>
        <member name="T:Evergine.Common.Physics2D.IRigidBody2D">
            <summary>
            Interface for RigidBody of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Position">
            <summary>
            Gets the world position of the body.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Angle">
            <summary>
            Gets the world angle of the body in radians.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the body's origin in world co-ordinates.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the body.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.LinearDamping">
            <summary>
            Gets or sets the Linear damping is use to reduce the linear velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.AngularDamping">
            <summary>
            Gets or sets the Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.AllowSleep">
            <summary>
            Gets or sets a value indicating whether this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Awake">
            <summary>
            Gets or sets a value indicating whether this is this body initially awake or sleeping?.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.FixedRotation">
            <summary>
            Gets or sets a value indicating whether this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Bullet">
            <summary>
            Gets or sets a value indicating whether this is a fast moving body that should be prevented from tunneling through other moving bodies?.
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies.
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Active">
            <summary>
            Gets or sets a value indicating whether this body start out active?.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.UserData">
            <summary>
            Gets or sets the application specific body data.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.GravityScale">
            <summary>
            Gets or sets the gravity scale applied to this body.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Type">
            <summary>
            Gets or sets the rigid body 2D type.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.WorldCenter">
            <summary>
            Gets the world position of the center of mass.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.LocalCenter">
            <summary>
            Gets the local position of the center of the mass.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.ColliderList">
            <summary>
            Gets the collider list.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Mass">
            <summary>
            Gets the total mass of the body, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.Inertia">
            <summary>
            Gets the rotational inertia of the body about the local origin, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRigidBody2D.MassData">
            <summary>
            Gets or sets the mass data of the body.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.SetTransform(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="worldPosition">the world position of the body's local origin.</param>
            <param name="angle">the world rotation in radians.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.ApplyForce(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Boolean)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.ApplyForceToCenter(Evergine.Mathematics.Vector2,System.Boolean)">
            <summary>
            Apply a force to the center of mass. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="wake">Also wake up the body.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.ApplyLinearImpulse(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Boolean)">
            <summary>
            pply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.
            </summary>
            <param name="torque">About the z-axis (out of the screen), usually in N-m.</param>
            <param name="wake">Also wake up the body.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.CreateCollider(Evergine.Common.Physics2D.ColliderDef2D)">
            <summary>
            Creates a collider with the specified definition.
            </summary>
            <param name="def">The collider 2D definition.</param>
            <returns>The collider 2D.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.DestroyCollider(Evergine.Common.Physics2D.ICollider2D)">
            <summary>
            Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture.
            This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density.
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            </summary>
            <param name="collider">The collider 2D to be removed.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromLocalPoint(Evergine.Mathematics.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">Point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromWorldPoint(Evergine.Mathematics.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body..
            </summary>
            <param name="localPoint">Point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetLocalPoint(Evergine.Mathematics.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point.
            </summary>
            <param name="worldPoint">Point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetLocalVector(Evergine.Mathematics.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">Vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetWorldPoint(Evergine.Mathematics.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.GetWorldVector(Evergine.Mathematics.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRigidBody2D.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            </summary>
            <remarks>
            This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </remarks>
        </member>
        <member name="T:Evergine.Common.Physics2D.RigidBodyDef2D">
            <summary>
            Definition of a Rigid Body 2D.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Position">
            <summary>
            The world position of the body. Avoid creating bodies at the origin since this can lead to many overlapping shapes.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Angle">
            <summary>
            The world angle of the body in radians.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.LinearVelocity">
            <summary>
            The linear velocity of the body's origin in world co-ordinates.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.AngularVelocity">
            <summary>
            The angular velocity of the body.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.LinearDamping">
            <summary>
            Linear damping is use to reduce the linear velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.AngularDamping">
            <summary>
            Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.AllowSleep">
            <summary>
            Set this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Awake">
            <summary>
            Is this body initially awake or sleeping?.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.FixedRotation">
            <summary>
            Should this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Bullet">
            <summary>
            Is this a fast moving body that should be prevented from tunneling through other moving bodies?.
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies.
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Active">
            <summary>
            Does this body start out active?.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.GravityScale">
            <summary>
            Scale the gravity applied to this body.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyDef2D.Type">
            <summary>
            The rigid body 2D type.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.RigidBodyMassData2D">
            <summary>
            This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyMassData2D.Mass">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyMassData2D.Center">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyMassData2D.I">
            <summary>
            The rotational inertia of the shape about the local origin.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.RigidBodyType2D">
            <summary>
            Rigid body type 2D.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyType2D.Static">
            <summary>
            Zero mass, zero velocity, may be manually moved.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyType2D.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RigidBodyType2D.Dynamic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.ColliderCategory2D">
            <summary>
            Physic 2d Collision categories.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat1">
            <summary>
            Cat1 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat2">
            <summary>
            Cat2 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat3">
            <summary>
            Cat3 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat4">
            <summary>
            Cat4 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat5">
            <summary>
            Cat5 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat6">
            <summary>
            Cat6 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat7">
            <summary>
            Cat7 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat8">
            <summary>
            Cat8 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat9">
            <summary>
            Cat9 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat10">
            <summary>
            Cat10 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat11">
            <summary>
            Cat11 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat12">
            <summary>
            Cat12 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat13">
            <summary>
            Cat13 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat14">
            <summary>
            Cat14 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat15">
            <summary>
            Cat15 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.Cat16">
            <summary>
            Cat16 Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.None">
            <summary>
            None Category
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderCategory2D.All">
            <summary>
            All Categories
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.ColliderDef2D">
            <summary>
            Definition of a 2D Collision Shape.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.Density">
            <summary>
            The density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.Friction">
            <summary>
            The friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.IsSensor">
            <summary>
            A sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.Restitution">
            <summary>
            The restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.Shape">
            <summary>
            The Collider shape.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.ColliderShapeType2D">
            <summary>
            Shape types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.Box">
            <summary>
            Box shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.Edge">
            <summary>
            Edge type shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.Polygon">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.Chain">
            <summary>
            Chain shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.ColliderShapeType2D.TypeCount">
            <summary>
            Shape type count
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IBoxColliderShape2D">
            <summary>
            Interface for a Box collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IBoxColliderShape2D.Width">
            <summary>
            Gets or sets the width of the Box collider.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IBoxColliderShape2D.Height">
            <summary>
            Gets or sets the height of the Box collider.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IBoxColliderShape2D.Center">
            <summary>
            Gets or sets the center of the Box collider shape.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IBoxColliderShape2D.Angle">
            <summary>
            Gets or sets the angle of the box shape.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single)">
            <summary>
            Setup the box collider shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Build the shape to represent an oriented box.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="center">The box center.</param>
            <param name="angle">The box angle.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.ICircleColliderShape2D">
            <summary>
            Interface for a Circle Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICircleColliderShape2D.Position">
            <summary>
            Gets or sets the circle position.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ICircleColliderShape2D.SetShape(System.Single,Evergine.Mathematics.Vector2)">
            <summary>
            Set the shape of the circle collider.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="position">The position offset of the circle respect the rigid body.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.ContactDelegate">
            <summary>
            Contact delegate using in BeginContact and EndContact.
            </summary>
            <param name="contact">The contact instance.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.ICollider2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.ICollider2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.ICollider2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.Density">
            <summary>
            Gets or sets the density, usually in kg/m^2.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.IsSensor">
            <summary>
            Gets or sets a value indicating whether this sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.Shape">
            <summary>
            Gets the Collider shape.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.RigidBody">
            <summary>
            Gets the parent body of this collider.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.UserData">
            <summary>
            Gets or sets the object user data.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.InternalCollider">
            <summary>
            Gets the internal Box2D fixture instance.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.GroupIndex">
            <summary>
            Gets or sets the collision groups allow a certain group of objects to never collide (negative) or always collide (positive).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.CollisionCategories">
            <summary>
            Gets or sets the collision category bits.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollider2D.MaskBits">
            <summary>
            Gets or sets the collision mask bits.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ICollider2D.ComputeDistance(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single,System.Single@,Evergine.Mathematics.Vector2@)">
            <summary>
            Compute the distance from the current shape to the specified point. This only works for convex shapes.
            </summary>
            <param name="point">a point in world coordinates.</param>
            <param name="shapePosition">the shape world position.</param>
            <param name="shapeAngle">the shape world angle.</param>
            <param name="distance">the distance from the current shape.</param>
            <param name="normal">the direction in which the distance increases.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.IColliderShape2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IColliderShape2D.Radius">
            <summary>
            Gets or sets.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IColliderShape2D.Type">
            <summary>
            Gets the collider type.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IColliderShape2D.ChildCount">
            <summary>
            Gets the number of child primitives.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IColliderShape2D.InternalShape">
            <summary>
            Gets the internal shape.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IColliderShape2D.TestPoint(Evergine.Mathematics.Vector2@,Evergine.Mathematics.Vector2@,System.Single)">
            <summary>
            Test a point for containment in this shape.
            </summary>
            <param name="point">a point in world coordinates.</param>
            <param name="shapePosition">the shape world position.</param>
            <param name="shapeAngle">the shape world angle.</param>
            <returns>True if the point is contained in the shape.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IColliderShape2D.TestRectangle(Evergine.Mathematics.RectangleF@,Evergine.Mathematics.Vector2@,System.Single)">
            <summary>
            Test a rectangle for containment in this shape.
            </summary>
            <param name="rectangle">a rectangle in world coordinates.</param>
            <param name="shapePosition">the shape world position.</param>
            <param name="shapeAngle">the shape world angle.</param>
            <returns>True if the point is contained in the shape.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.IColliderShape2D.TestShape(Evergine.Mathematics.Vector2,System.Single,Evergine.Common.Physics2D.IColliderShape2D,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Test another shape for containment in this shape.
            </summary>
            <param name="positionA">The position of A shape.</param>
            <param name="angleA">The angle of A shape.</param>
            <param name="shapeB">The second shape.</param>
            <param name="positionB">The position of B shape.</param>
            <param name="angleB">The angle of B shape.</param>
            <returns>If the two shapes collides.</returns>
        </member>
        <member name="T:Evergine.Common.Physics2D.IEdgeColliderShape2D">
            <summary>
            Interface for a Edge Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IEdgeColliderShape2D.Vertices">
            <summary>
            Gets the edge vertices.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IEdgeColliderShape2D.Normals">
            <summary>
            Gets the Edge normals.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IEdgeColliderShape2D.SetShapeFromVertices(Evergine.Mathematics.Vector2[])">
            <summary>
            Copy vertices.
            </summary>
            <param name="vertices">The edge vertices.</param>>
        </member>
        <member name="M:Evergine.Common.Physics2D.IEdgeColliderShape2D.SetShapeFromVertices(Evergine.Mathematics.Vector2[],Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Copy vertices.
            </summary>
            <param name="vertices">The edge vertices.</param>
            <param name="scale">The scale of the shape.</param>
            <param name="center">The box center.</param>
            <param name="angle">The box angle.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.IPolygonColliderShape2D">
            <summary>
            Interface for a Polygon Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPolygonColliderShape2D.Vertices">
            <summary>
            Gets the polygon shapes.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPolygonColliderShape2D.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPolygonColliderShape2D.Normals">
            <summary>
            Gets the polygon normals.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(Evergine.Mathematics.Vector2[])">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(Evergine.Mathematics.Vector2[],System.Single,System.Single,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="scale">The scale of the shape.</param>
            <param name="center">The box center.</param>
            <param name="angle">The box angle.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromData(Evergine.Mathematics.Vector2[],System.Collections.Generic.List{System.Collections.Generic.List{Evergine.Mathematics.Vector2}},System.Single,System.Single,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Shape generated from the implementation data.
            </summary>
            <param name="vertices">The polygon vertices.</param>
            <param name="data">The internal data.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="scale">The scale of the shape.</param>
            <param name="center">The box center.</param>
            <param name="angle">The box angle.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromTexture(Evergine.Common.Graphics.Texture,Evergine.Mathematics.RectangleF,System.Single,System.Boolean,Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Build the polygon shape from a texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="rectangle">The source rectangle.</param>
            <param name="alphaThreshold">The alpha threshold.</param>
            <param name="holeDetection">Hole detection in the image.</param>
            <param name="scale">The scale of the shape.</param>
            <param name="center">The box center.</param>
            <param name="angle">The box angle.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.ICollisionInfo2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this contact is enabled. You can disable the contact in contact listener methods.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.IsTouching">
            <summary>
            Gets a value indicating whether the two colliders is touching.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.TangentSpeed">
            <summary>
            Gets or sets the tangent speed.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.ColliderA">
            <summary>
            Gets collider A in this contact.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.ColliderB">
            <summary>
            Gets collider B in this contact.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.Points">
            <summary>
            Gets the collision points.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ICollisionInfo2D.Normal">
            <summary>
            Gets the collision normals.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ICollisionInfo2D.FlagForFiltering">
            <summary>
            Flag this contact for filtering. Filtering will occur the next time step.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ICollisionInfo2D.ResetFriction">
            <summary>
            Reset the friction mixture to the default value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener.
            </remarks>
        </member>
        <member name="M:Evergine.Common.Physics2D.ICollisionInfo2D.ResetRestitution">
            <summary>
            Reset the restitution to the default contact value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener.
            </remarks>
        </member>
        <member name="T:Evergine.Common.Physics2D.ISimulation2D">
            <summary>
            Interface for Simulation2D.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.IsLocked">
            <summary>
            Gets a value indicating whether the world is locked (in the middle of a time step).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.Gravity">
            <summary>
            Gets or sets the global gravity vector.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.AllowSleeping">
            <summary>
            Gets or sets a value indicating whether allow sleeping.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.WorldScale">
            <summary>
            Gets or sets the world scale.
            <remarks>
            By default, the scale of the world is 1unit = 1meter.
            </remarks>
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.VelocityIterations">
            <summary>
            Gets or sets the velocity iterations.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.PositionIterations">
            <summary>
            Gets or sets the position iterations.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.InternWorld">
            <summary>
            Gets the internal native world instance.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.DrawFlags">
            <summary>
            Gets or sets the debug draw flags.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.ISimulation2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.ISimulation2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.CollisionList">
            <summary>
            Gets the colllision list.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.ISimulation2D.WorldStaticBody">
            <summary>
            Gets the world static body.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.ISimulation2D.OnPhysicStep">
            <summary>
            Event fired when the physics will do an step
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.CreateRigidBody(Evergine.Common.Physics2D.RigidBodyDef2D)">
            <summary>
            Creates a RigidBody 2D.
            </summary>
            <param name="bodyDef"> Body definition.</param>
            <returns>The rigid body instance.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.RemoveRigidBody(Evergine.Common.Physics2D.IRigidBody2D)">
            <summary>
            Removes a RigidBody 2D from the world.
            </summary>
            <param name="body"> The body to remove.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.CreateColliderShape``1">
            <summary>
            Instantiate a new Collider shape.
            </summary>
            <typeparam name="T">The ColliderShape type.</typeparam>
            <returns>The new collider shape.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.CreateJoint``2(``1)">
            <summary>
            Creates a Joint.
            </summary>
            <typeparam name="T">The Joint type.</typeparam>
            <typeparam name="J">The Joint definition type.</typeparam>
            <param name="jointDef">The joint definition instance.</param>
            <returns>The new joint instance.</returns>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.RemoveJoint(Evergine.Common.Physics2D.IJoint2D)">
            <summary>
            Remove the joint from the physic world.
            </summary>
            <param name="joint">The joint to remove.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.Step(System.TimeSpan)">
            <summary>
            Take a time step. This performs collision detection, integration, and constraint solution.
            </summary>
            <param name="gameTime">the amount of time to simulate, this should not vary.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.SetDebugDraw(Evergine.Common.Physics2D.ISimulationDebugDraw2D)">
            <summary>
            Sets the debug draw of Simulation 2D.
            </summary>
            <param name="debugDraw">The deubg draw instance.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulation2D.DebugDraw">
            <summary>
            Draw the debug information.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.DebugDrawFlags">
            <summary>
            Debug draw flags.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DebugDrawFlags.ShapeBit">
            <summary>
            Draw the shape
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DebugDrawFlags.JointBit">
            <summary>
            Draw joints
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DebugDrawFlags.AabbBit">
            <summary>
            Draw AABB (Axis Aligned Bounding Box)
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DebugDrawFlags.PairBit">
            <summary>
            Draw pairs
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DebugDrawFlags.CenterOfMassBit">
            <summary>
            Draw center of mass
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.ISimulationDebugDraw2D">
            <summary>
            Interface for drawing debug information of Simulation 2D.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawCircle(Evergine.Mathematics.Vector2,System.Single,Evergine.Common.Graphics.Color)">
            <summary>
            Draw a circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawPolygon(Evergine.Mathematics.Vector2[],Evergine.Common.Graphics.Color)">
            <summary>
            Draw a polygon.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawSegment(Evergine.Mathematics.Vector2,Evergine.Mathematics.Vector2,Evergine.Common.Graphics.Color)">
            <summary>
            Draw a segment.
            </summary>
            <param name="p1">The first point of the segment.</param>
            <param name="p2">The second point of the segment.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidCircle(Evergine.Mathematics.Vector2,System.Single,Evergine.Mathematics.Vector2,Evergine.Common.Graphics.Color)">
            <summary>
            Draw a solid circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="axis">The axis.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidPolygon(Evergine.Mathematics.Vector2[],Evergine.Common.Graphics.Color)">
            <summary>
            Draw a solid polygon.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Evergine.Common.Physics2D.ISimulationDebugDraw2D.DrawTransform(Evergine.Mathematics.Vector2,System.Single)">
            <summary>
            Draw a transform.
            </summary>
            <param name="position">The Draw.</param>
            <param name="angle">The Angle.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.AngleLimitsDef">
            <summary>
            Angle limit properties.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.AngleLimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.AngleLimitsDef.LowerAngle">
            <summary>
            The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.AngleLimitsDef.UpperAngle">
            <summary>
            The upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.DistanceJointDef2D">
            <summary>
            Definition of a 2D Distance Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DistanceJointDef2D.Lenght">
            <summary>
            /// The natural length between the anchor points.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DistanceJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.DistanceJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IDistanceJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IDistanceJoint2D.Distance">
            <summary>
            Gets or sets the natural length.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IDistanceJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IDistanceJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.OnBrokeEventHandler">
            <summary>
            Event broke delegate.
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="jointError">The force that the joint has received to be broke.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.IJoint2D">
            <summary>
            Interface for a Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.InternalJoint">
            <summary>
            Gets the Box2D internal joint.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.BodyA">
            <summary>
            Gets the first body attached to this joint.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.BodyB">
            <summary>
            Gets the second body attached to this joint.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.LocalAnchorA">
            <summary>
            Gets the local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.LocalAnchorB">
            <summary>
            Gets the local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.ReactionForce">
            <summary>
            Gets the reaction force on bodyB at the joint anchor in Newtons.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.ReactionTorque">
            <summary>
            Gets the reaction torque on bodyB in N*m.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.IsActive">
            <summary>
            Gets or sets a value indicating whether this joint is active.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IJoint2D.BreakPoint">
            <summary>
            Gets or sets the amount offorce that a joint can take before break.
            </summary>
        </member>
        <member name="E:Evergine.Common.Physics2D.IJoint2D.OnBroke">
            <summary>
            Event fired when the joint is broken
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IMouseJoint2D">
            <summary>
            Interface for a Mouse Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IMouseJoint2D.Target">
            <summary>
            Gets or sets the initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IMouseJoint2D.MaxForce">
            <summary>
            Gets or sets the maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IMouseJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IMouseJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IPrismaticJoint2D">
            <summary>
            Interface for a Prismatic Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.LowerLimit">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.UpperLimit">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IPrismaticJoint2D.MotorForce">
            <summary>
            Gets the current motor force given the inverse time step, usually in N.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IPrismaticJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits.
            </summary>
            <param name="lower">The lower limit.</param>
            <param name="upper">The upper limit.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.IRevoluteJoint2D">
            <summary>
            Interface for a Revolute Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.LowerAngle">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.UpperAngle">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.JointAngle">
            <summary>
            Gets the current joint angle in radians.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.JointAngleSpeed">
            <summary>
            Gets the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRevoluteJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step.
            Unit is N*m.
            </summary>
        </member>
        <member name="M:Evergine.Common.Physics2D.IRevoluteJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits.
            </summary>
            <param name="lower">The lower limit.</param>
            <param name="upper">The upper limit.</param>
        </member>
        <member name="T:Evergine.Common.Physics2D.IRopeJoint2D">
            <summary>
            Interface for a Rope Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IRopeJoint2D.MaxLength">
            <summary>
            Gets or sets the maximum length of the rope.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IWeldJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWeldJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWeldJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWeldJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.IWheelJoint2D">
            <summary>
            Interface for a Wheel Joint 2D physics.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.SpringFrequencyHz">
            <summary>
            Gets or sets the frequency in Hz.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.SpringDampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Evergine.Common.Physics2D.IWheelJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step, usually in N-m.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.JointDef2D">
            <summary>
            Definition of a 2D Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.BodyA">
            <summary>
            The first attached body.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.BodyB">
            <summary>
            The second attached body.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.LocalAnchorA">
            <summary>
            The local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.LocalAnchorB">
            <summary>
            The local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.UserData">
            <summary>
            Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.IsActive">
            <summary>
            The joint is active by default.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointDef2D.BreakPoint">
            <summary>
            The amount of force needed to break the joint.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.JointDef2D`1">
            <summary>
            Definition of a 2D Joint.
            </summary>
            <typeparam name="T">The type of the joint that define.</typeparam>
        </member>
        <member name="T:Evergine.Common.Physics2D.JointType2D">
            <summary>
            Joint types.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.UnknownJoint">
            <summary>
            Unknown joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.RevoluteJoint">
            <summary>
            Revolute joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.PrismaticJoint">
            <summary>
            Prismatic joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.DistanceJoint">
            <summary>
            Distance joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.PulleyJoint">
            <summary>
            Pulley joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.MouseJoint">
            <summary>
            Mouse joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.GearJoint">
            <summary>
            Gear joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.WheelJoint">
            <summary>
            Wheel joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.WeldJoint">
            <summary>
            Weld joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.FrictionJoint">
            <summary>
            Friction joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.RopeJoint">
            <summary>
            Rope joint
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.JointType2D.MotorJoint">
            <summary>
            Motor joint
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.LimitsDef">
            <summary>
            Motor properties definition.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.LimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.LimitsDef.LowerLimit">
            <summary>
            The lower translation limit.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.LimitsDef.UpperLimit">
            <summary>
            The upper translation limit.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.MotorDef">
            <summary>
            Motor properties definition.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MotorDef.EnableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MotorDef.MotorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MotorDef.MaxMotorTorque">
            <summary>
            The maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.MouseJointDef2D">
            <summary>
            Definition of a 2D Distance Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MouseJointDef2D.Target">
            <summary>
            The initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MouseJointDef2D.MaxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MouseJointDef2D.FrequencyHz">
            <summary>
            The response speed.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.MouseJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.PrismaticJointDef2D">
            <summary>
            Definition of a 2D Prismatic Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.PrismaticJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.PrismaticJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.PrismaticJointDef2D.MotorDef">
            <summary>
            Motor properties.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.PrismaticJointDef2D.TranslationLimitsDef">
            <summary>
            Translation limits.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.RevoluteJointDef2D">
            <summary>
            Definition of a 2D Revolute Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RevoluteJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RevoluteJointDef2D.MotorDef">
            <summary>
            Motor properties.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RevoluteJointDef2D.AngleLimitDef">
            <summary>
            Angle limits.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.RopeJointDef2D">
            <summary>
            Definition of a 2D Rope Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.RopeJointDef2D.MaxLength">
            <summary>
            The maximum length of the rope.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.WeldJointDef2D">
            <summary>
            Definition of a 2D Weld Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WeldJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WeldJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WeldJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Evergine.Common.Physics2D.WheelJointDef2D">
            <summary>
            Definition of a 2D Wheel Joint.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WheelJointDef2D.FrequencyHz">
            <summary>
            Suspension frequency, zero indicates no suspension.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WheelJointDef2D.DampingRatio">
            <summary>
            Suspension damping ratio, one indicates critical damping.
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WheelJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:Evergine.Common.Physics2D.WheelJointDef2D.MotorDef">
            <summary>
            Motor properties.
            </summary>
        </member>
        <member name="T:Evergine.Common.PlatformFamily">
            <summary>
            Specifies the platform family.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformFamily.Unsupported">
            <summary>
            Unsupported family.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformFamily.Mobile">
            <summary>
            Mobile family.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformFamily.Desktop">
            <summary>
            Desktop family.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformFamily.Console">
            <summary>
            Console family.
            </summary>
        </member>
        <member name="T:Evergine.Common.PlatformType">
            <summary>
            Specifies the platform type.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.Undefined">
            <summary>
            Undefined platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.Windows">
            <summary>
            Microsoft Windows platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.Android">
            <summary>
            Google Android Platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.iOS">
            <summary>
            Apple iOS platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.Linux">
            <summary>
            Linux platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.MacOS">
            <summary>
            Apple MacOS platform.
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.UWP">
            <summary>
            Universal Windows App
            </summary>
        </member>
        <member name="F:Evergine.Common.PlatformType.Web">
            <summary>
            Web platform.
            </summary>
        </member>
        <member name="T:Evergine.Common.ProjectAddOn">
            <summary>
            Class that represents a project add-on.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectAddOn.Id">
            <summary>
            Gets or sets the add-on id.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectAddOn.Version">
            <summary>
            Gets or sets the add-on version.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectAddOn.LocalPath">
            <summary>
            Gets or sets the path to add-on source project.
            </summary>
        </member>
        <member name="T:Evergine.Common.ProjectModel">
            <summary>
            Class that represents a project file.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectModel.ResourcesPath">
            <summary>
            Gets or sets the content path.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectModel.Packages">
            <summary>
            Gets or sets the add-ons data.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectModel.Profiles">
            <summary>
            Gets or sets profiles data.
            </summary>
        </member>
        <member name="T:Evergine.Common.ProjectProfile">
            <summary>
            Profile element class.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.Platform">
            <summary>
            Gets or sets the platform.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.LauncherType">
            <summary>
            Gets or sets the launcher type.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.GraphicsBackend">
            <summary>
            Gets or sets the graphics backend.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.AdditionalEffectTechniqueCombinations">
            <summary>
            Gets or sets the additional effect directives.
            Example1: A-B,B-C,... Example2: A, B-A, B-C,...
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.CompileEffects">
            <summary>
            Gets or sets a value indicating whether the effects will be compiled.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.AlphaCompressionFormat">
            <summary>
            Gets or sets the alpha compression format.
            </summary>
        </member>
        <member name="P:Evergine.Common.ProjectProfile.NonAlphaCompressionFormat">
            <summary>
            Gets or sets non alpha compresion format.
            </summary>
        </member>
        <member name="T:Evergine.Common.Serialization.ISerializer">
            <summary>
            Interfaces that represents a serializer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.ISerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Evergine.Common.Serialization.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.ISerializer.DeserializeInto``1(System.IO.Stream,``0)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <typeparam name="T">The type to be deserialized.</typeparam>
            <param name="stream">The stream.</param>
            <param name="existingObject">The object to deserialize into. If null (the default) then a new object will be created.</param>
            <returns>Deserialize object.</returns>
        </member>
        <member name="T:Evergine.Common.Serialization.SerializerYaml">
            <summary>
            Yaml serializer.
            </summary>
        </member>
        <member name="F:Evergine.Common.Serialization.SerializerYaml.ignoreAttribute">
            <summary>
            The default ignore attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Serialization.SerializerYaml.memberAttribute">
            <summary>
            The default ignore attribute.
            </summary>
        </member>
        <member name="F:Evergine.Common.Serialization.SerializerYaml.serializer">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.GetSerializer(System.Type)">
            <summary>
            Get a new serializer instance.
            </summary>
            <param name="type">The serializer type.</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.Serialization.SerializerYaml"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified obj into the stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.Serialize(System.IO.Stream,System.Object,System.Type)">
            <summary>
            Serializes the specified obj into the stream using the specified type.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The expected type.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.SerializerYaml.DeserializeInto``1(System.IO.Stream,``0)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <typeparam name="T">The type to be deserialized.</typeparam>
            <param name="stream">The stream.</param>
            <param name="existingObject">The object to deserialize into. If null (the default) then a new object will be created.</param>
            <returns>Deserialize object.</returns>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.ByteArraySerializer">
            <summary>
            Class that serializes a byte array into Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.ByteArraySerializer.Type">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.ByteArraySerializer.ConvertFromString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.ByteArraySerializer.ConvertToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer">
            <summary>
            Class that customizes the serializes a collection in Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.Type">
            <summary>
            Gets the type of the collection to serialize.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.IsFactory">
            <summary>
            Gets a value indicating whether the serializer is a factory.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.ReadYaml(SharpYaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlCollectionSerializer.TryCreate(SharpYaml.Serialization.SerializerContext,SharpYaml.Serialization.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer">
            <summary>
            Class that represent a custom object serializer in Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.Type">
            <summary>
            Gets the type of the object to serialize.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.ReadYaml(SharpYaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.IsFactory">
            <summary>
            Gets a value indicating whether the serialzier is a factory.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlObjectSerializer.TryCreate(SharpYaml.Serialization.SerializerContext,SharpYaml.Serialization.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer">
            <summary>
            Class that represents a custom scalar type serializer in Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.Type">
            <summary>
            Gets the type of the scalar.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.IsFactory">
            <summary>
            Gets a value indicating whether the serializer is a factory.
            </summary>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.TryCreate(SharpYaml.Serialization.SerializerContext,SharpYaml.Serialization.ITypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.ConvertFromString(System.String)">
            <summary>
            Converts a string into the scalar type instance.
            </summary>
            <param name="value">The string value containing the scalar info.</param>
            <returns>The scalar type instance.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.ConvertToString(System.Object)">
            <summary>
            Converts the scalar instance into a string.
            </summary>
            <param name="value">The scalar instance.</param>
            <returns>A string containing the scalar info.</returns>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.ConvertFrom(SharpYaml.Serialization.ObjectContext@,SharpYaml.Events.Scalar)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.CustomYamlScalarSerializer.ConvertTo(SharpYaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.GuidSerializer">
            <summary>
            Class that serializes a Guid object in Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.GuidSerializer.Type">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.GuidSerializer.ConvertFromString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.GuidSerializer.ConvertToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.StringSerializer">
            <summary>
            Class that ensures correct string serialization.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.StringSerializer.Type">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.StringSerializer.ConvertToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.StringSerializer.ConvertFromString(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.ToMutable`1">
            <summary>
            Abstract class that helps converting an immutable type object into another mutable object, helping it in the serialization.
            </summary>
            <typeparam name="T">The generic immutable type.</typeparam>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.ToMutable`1.ToImmutable">
            <summary>
            Converts the element into the original immutable type.
            </summary>
            <returns>An immutable instance containing the this instance data.</returns>
        </member>
        <member name="T:Evergine.Common.Serialization.YAML.WaveFormatSerializer">
            <summary>
            Class that helps serializing a WaveFormat object in Yaml.
            </summary>
        </member>
        <member name="P:Evergine.Common.Serialization.YAML.WaveFormatSerializer.Type">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.WaveFormatSerializer.CreateOrTransformObject(SharpYaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="M:Evergine.Common.Serialization.YAML.WaveFormatSerializer.TransformObjectAfterRead(SharpYaml.Serialization.ObjectContext@)">
            <inheritdoc/>
        </member>
        <member name="T:Evergine.Common.System.DownloadStringEventArgs">
            <summary>
            Event args for string download completed.
            </summary>
        </member>
        <member name="P:Evergine.Common.System.DownloadStringEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Evergine.Common.System.DownloadStringEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.DownloadStringEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.System.DownloadStringEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Evergine.Common.System.IStopwatch">
            <summary>
            Interface for stopwatchs.
            </summary>
        </member>
        <member name="P:Evergine.Common.System.IStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.IStopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.IStopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.IStopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:Evergine.Common.System.ISystem">
            <summary>
            Interface for system.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.ISystem.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Evergine.Common.System.ISystem.SetTaskContext">
            <summary>
            Sets the task context.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.ISystem.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.ISystem.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="T:Evergine.Common.System.Stopwatch">
            <summary>
            Class for representing a stop watch.
            </summary>
        </member>
        <member name="F:Evergine.Common.System.Stopwatch.stopwatch">
            <summary>
            Internal Watch object.
            </summary>
        </member>
        <member name="P:Evergine.Common.System.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.System.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.Stopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.Stopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.Stopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.Stopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Evergine.Common.System.WebClient">
            <summary>
            Represents a web client for downloading strings.
            </summary>
        </member>
        <member name="F:Evergine.Common.System.WebClient.request">
            <summary>
            Web request.
            </summary>
        </member>
        <member name="E:Evergine.Common.System.WebClient.DownloadStringCompleted">
            <summary>
            Occurs when [download string completed].
            </summary>
        </member>
        <member name="M:Evergine.Common.System.WebClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Evergine.Common.System.WebClient"/> class.
            </summary>
        </member>
        <member name="M:Evergine.Common.System.WebClient.DownloadStringAsync(System.Uri)">
            <summary>
            Downloads the string async.
            </summary>
            <param name="downloadUri">The download URI.</param>
        </member>
        <member name="M:Evergine.Common.System.WebClient.DownloadStringResponseCallback(System.IAsyncResult)">
            <summary>
            Downloads the string response callback.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Evergine.Common.UnsafeMethods">
            <summary>
            Unsafe and native methods.
            </summary>
        </member>
        <member name="M:Evergine.Common.UnsafeMethods.CopyPointer(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies the pointers.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Evergine.Common.UnsafeMethods.ClonePointer(System.IntPtr,System.Int32)">
            <summary>
            Clones the pointer.
            </summary>
            <param name="source">The source.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>New IntPtr created.</returns>
        </member>
        <member name="T:WaveTestCore.ITestingEngine">
            <summary>
            Interface for Testing engine.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.InRec">
            <summary>
             Gets a value indicating whether the testing engine is in Rec Mode.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.InRun">
            <summary>
            Gets a value indicating whether the testing engine is in Rec Mode.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.IsInTestMode">
            <summary>
            Gets a value indicating whether the testing engine is being visually tested.
            </summary>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.Initialize">
            <summary>
            Initialize Method.
            </summary>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.VisualTestUpdate(System.TimeSpan)">
            <summary>
            Visual Test Update method that wraps the original Update method.
            </summary>
            <param name="elapsedTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.VisualTestDraw(System.TimeSpan)">
            <summary>
            Visual Test Draw method that wraps the original Draw method.
            </summary>
            <param name="elapsedTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.SendResponse(System.Exception)">
            <summary>
            Send response result to Visual Manager with and optional exception if occured.
            </summary>
            <param name="exceptionResult">An optional exception.</param>
            <returns>Task result.</returns>
        </member>
    </members>
</doc>
